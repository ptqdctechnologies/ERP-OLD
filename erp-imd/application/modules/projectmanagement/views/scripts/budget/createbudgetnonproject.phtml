<script type="text/javascript">


    function showNextPerson(userArray, params)
    {
        if (approval == undefined || approval == '')
            approval = false;
        if (isEdit == undefined || isEdit == "")
            isEdit = false;
        var addlist = Ext.data.Record.create([
            {name: 'id', type: 'string'},
            {name: 'workflow_id', type: 'string'},
            {name: 'workflow_item_id', type: 'string'},
            {name: 'workflow_item_type_id', type: 'string'},
            {name: 'workflow_item_name', type: 'string'},
            {name: 'workflow_structure_id', type: 'string'},
            {name: 'next', type: 'string'},
            {name: 'uid_next', type: 'string'},
            {name: 'trano', type: 'string'},
            {name: 'name', type: 'string'},
            {name: 'role_name', type: 'string'},
            {name: 'prj_kode', type: 'string'}
        ]);

        var storeUser = new Ext.data.Store({
            reader: new Ext.data.JsonReader({fields: addlist})
        });

        var groupByRole = '';
        var groupByType = '';

        Ext.each(userArray, function(t, index) {
            var d = new addlist({
                id: t.id,
                workflow_id: t.workflow_id,
                workflow_item_id: t.workflow_item_id,
                workflow_item_type_id: t.workflow_item_type_id,
                workflow_item_name: t.workflow_item_name,
                workflow_structure_id: t.workflow_structure_id,
                uid_next: t.uid_next,
                trano: t.trano,
                next: t.next,
                name: t.name,
                role_name: t.role_name,
                prj_kode: t.prj_kode
            });
            storeUser.add(d);
            d = undefined;
            var cek = groupByRole.search(t.role_name);
            if (cek < 0)
            {
                if (groupByRole != "")
                    groupByRole = groupByRole + "," + t.role_name;
                else
                    groupByRole = t.role_name;
            }
            cek = groupByType.search(t.workflow_item_name);
            if (cek < 0)
            {
                if (groupByType != "")
                    groupByType = groupByType + "," + t.workflow_item_name;
                else
                    groupByType = t.workflow_item_name;
            }
        });

        var userColumns = [
            new Ext.grid.RowNumberer(),
            {header: "Receiver", dataIndex: 'name', width: 220, renderer: function(v, p, r) {
                    return '<div class="personicon"><b>' + r.data.name + '</b>&nbsp;<span class="rolename">' + r.data.role_name + '<br>Transaction Type: <b>' + r.data.workflow_item_name + '</b><br>Project : <b>' + r.data.prj_kode + '</b></span></div>';
                }}
        ];

        var storeFilter = new Ext.data.SimpleStore({
            fields: ['val', 'filter'],
            data: [
                ['role', 'Person\'s Role'],
                ['type', 'Transaction Type']
            ]
        });
        var storeFilter2 = new Ext.data.ArrayStore({
            fields: ['filter']
        });
        var combo = new Ext.form.ComboBox({
            store: storeFilter,
            id: 'combofilter',
            displayField: 'filter',
            valueField: 'val',
            fieldLabel: 'Filter By',
            editable: false,
            typeAhead: true,
            mode: 'local',
            forceSelection: true,
            triggerAction: 'all',
            emptyText: 'Select Criteria...',
            selectOnFocus: true,
            listeners: {
                select: {fn:
                            function(t, rec, indeks)
                            {
                                combo2.clearValue();
                                storeFilter2.removeAll();
                                var combolist = Ext.data.Record.create([
                                    {name: 'filter', type: 'string'}
                                ]);
                                var teks = t.getValue();
                                switch (teks)
                                {
                                    case 'role':
                                        var arrayInsert = groupByRole.split(",");
                                        break;
                                    case 'type':
                                        var arrayInsert = groupByType.split(",");
                                        break;
                                }
                                Ext.each(arrayInsert, function(rows) {
                                    var d = new combolist({
                                        filter: rows
                                    });
                                    storeFilter2.add(d);
                                });
                                combo2.setVisible(true);
                            }
                }
            }
        });

        var combo2 = new Ext.form.ComboBox({
            id: 'combofilter2',
            store: storeFilter2,
            displayField: 'filter',
            valueField: 'filter',
            fieldLabel: 'Value',
            editable: false,
            hidden: true,
            typeAhead: true,
            mode: 'local',
            forceSelection: true,
            triggerAction: 'all',
            emptyText: 'Select Value..',
            selectOnFocus: true,
            listeners: {
                select: {fn:
                            function(t, rec, indeks)
                            {
                                var parentCombo = Ext.getCmp('combofilter').getValue();
                                var teks = t.getValue();
                                storeUser.clearFilter();
                                switch (parentCombo)
                                {
                                    case 'role':
                                        storeUser.filter('role_name', teks, true, false);
                                        break;
                                    case 'type':
                                        storeUser.filter('workflow_item_name', teks, true, false);
                                        break;
                                }
                                Ext.getCmp('user-grids').getView().refresh();
                            }
                }
            }
        });

        var bForm = new Ext.Window({
            id: 'choose-next',
            layout: 'border',
            width: 350,
            height: 400,
            modal: true,
            resizable: false,
            title: 'Choose Document Receiver',
            style: 'margin-top: 10px',
            labelAlign: 'right',
            stateful: false,
            items: [
                new Ext.form.FormPanel({
                    frame: true,
                    region: 'north',
                    width: 348,
                    height: 70,
                    items: [
                        combo,
                        combo2
                    ]
                }),
                new Ext.grid.GridPanel({
                    id: 'user-grids',
                    region: 'center',
                    width: 348,
                    height: 248,
                    loadMask: true,
                    columns: userColumns,
                    store: storeUser,
                    sm: new Ext.grid.RowSelectionModel({
                        singleSelect: true
                    }),
                    viewConfig: {
                        forceFit: true,
                        enableRowBody: true,
                        showPreview: true,
                        getRowClass: function(record, rowIndex, p, ds) {
                            return 'x-grid3-row-collapsed';
                        }
                    },
                    listeners: {
                        'rowdblclick': function(g, rowIndex, e) {
                            var record = g.getStore().getAt(rowIndex);
                            submitData(params, record);
//                                    bForm.close();
                        }
                    }
                })
//                ]
//                })
            ],
            buttons: [
                {
                    text: 'OK',
                    id: 'ok-next',
                    iconCls: 'silk-upd',
                    handler: function(btn, ev) {
                        var row = Ext.getCmp('user-grids').getSelectionModel().getSelections();
                        var record = row[0];
                        submitData(params, record);
//                            bForm.close();
                    }

                },
                {
                    text: 'Cancel',
                    id: 'cancel',
                    handler: function(btn, ev) {
                        bForm.close();
                        bForm = '';
                    }

                }


            ]
        });
        bForm.show();
    }
    ;

    function submitData(params, dataArray)
    {
        var addurl = '';


        var prjKode = Ext.getCmp('prj_kode_text').getValue();
        var sitKode = Ext.getCmp('sit_kode_text').getValue();

        if (params == "" || params == '')
            return false;
        if (dataArray != undefined)
            addurl = '/next/' + dataArray.data['uid_next'] + '/uid_next/' + dataArray.data['uid_next'] + '/workflow_structure_id/' + dataArray.data['workflow_structure_id'] + '/workflow_id/' + dataArray.data['workflow_id'] + '/workflow_item_id/' + dataArray.data['workflow_item_id'] + '/workflow_item_type_id/' + dataArray.data['workflow_item_type_id'] + '/trano/' + dataArray.data['trano'];

        submitUrl = '/projectmanagement/budget/submitbudget/uid/<?php echo $this->uid; ?>/prj_kode/' + prjKode + '/sit_kode/' + sitKode;
        Ext.getBody().mask('Loading..','x-mask-loading',false);
        Ext.Ajax.request({
            url: submitUrl + addurl,
            method: 'POST',
            success: function(result, request) {
                Ext.getBody().unmask();
                var returnData = Ext.util.JSON.decode(result.responseText);
                if (!returnData.success) {
                    Ext.Msg.alert('Error!', returnData.msg);
                    return false;
                } else {
                    if (returnData.user != undefined && returnData.number == undefined)
                    {
                        if (Ext.getCmp('choose-next'))
                            Ext.getCmp('choose-next').close();
                        showNextPerson(returnData.user, params);
                        return false;
                    }
                    else
                    {
                        Ext.Msg.alert('Success!', 'Your Budget has been submitted!<br>Transaction Number: <b>' + returnData.number + '</b><br>' + returnData.count + ' of ' + returnData.of + ' Row has been saved.');
                        Ext.getCmp('boq3-grid').getStore().removeAll();
                        Ext.getCmp('boq3-grid').disable();
                        Ext.getCmp('boq3-form').enable();
                        Ext.getCmp('boq3-form').getForm().reset();
                        getExchangeRate();
                        Ext.getCmp('gtotal-text').setText('');
                        Ext.getCmp('gtotal-text2').setText('');
                    }
                }
            }
            , failure: function(action) {
                Ext.getBody().unmask();
                if (action.failureType == 'server') {
                    obj = Ext.util.JSON.decode(action.response.responseText);
                    Ext.Msg.alert('Error!', obj.errors.reason);
                }
            },
            params: params
        });
    }
    ;

<?php echo $this->action('popupgrid', 'grid'); ?>

//** Number **//
    Ext.apply(Ext.form.VTypes, {
        'numeric': function() {

            /*****************************************************************
             DESCRIPTION: Validates that a string contains only valid numbers.
             PARAMETERS:
             strValue - String to be tested for validity
             RETURNS:
             True if valid, otherwise false.
             ******************************************************************/
            var objRegExp = /(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/;
            return function(strValue) {
                //check for numeric characters
                return objRegExp.test(strValue);
            }
        }(),
        'numericText': 'Only numbers are allowed'
    });

    function showPrjList()
    {
        var columns = [
            {header: 'Budget Code', width: 100, sortable: true, dataIndex: 'prj_kode'},
            {header: 'Budget Name', width: 150, sortable: true, dataIndex: 'prj_nama'},
        ];

        data = [
            {name: 'prj_kode', mapping: 'Prj_Kode'},
            {name: 'prj_nama', mapping: 'Prj_Nama'},
        ];


        urlJson = '/project/list/type/overhead';

        primaryKey = 'prj_kode';
        Pk = primaryKey;
        widthGrid = 380;
        heightGrid = 250;

        var stores = new Ext.data.Store({
            proxy: new Ext.data.HttpProxy({
                url: urlJson
            }),
            reader: new Ext.data.JsonReader({
                root: 'posts',
                totalProperty: 'count'
            }, data)
        });

        yAxis = 100;
        grids = function()
        {
            grids.superclass.constructor.call(this, {
                store: stores,
                columns: columns,
                x: 0,
                y: yAxis,
                id: primaryKey + '_grid',
                loadMask: true,
                bbar: [new Ext.PagingToolbar({
                        pageSize: 100,
                        store: stores,
                        displayInfo: true,
                        displayMsg: 'Displaying data {0} - {1} of {2}',
                        emptyMsg: "No data to display"
                    })],
                height: heightGrid,
                width: widthGrid,
                listeners: {
                    'rowdblclick': function(g, rowIndex, e) {
                        objectName = 'prj_kode';
                        txtBoxChange = 'prj_kode_text';
                        closeForm = true;
                        formId = 'a-form-panel-pjr_kode_button';
                        prox = 'trano_proxy';
                        gri = 'trano_grid';

                        var record = g.getStore().getAt(rowIndex).get(objectName);
                        var record2 = g.getStore().getAt(rowIndex).get("prj_nama");
                        Ext.getCmp('prj_kode_text').setValue(record);

                        if (Ext.getCmp('prj_nama_text') != undefined)
                        {
                            Ext.getCmp('prj_nama_text').setValue(record2);
                        }
                        if (Ext.getCmp('sit_kode_text') != undefined)
                        {
                            Ext.getCmp('sit_kode_text').setValue('');
                        }
                        if (Ext.getCmp('sit_nama_text') != undefined)
                        {
                            Ext.getCmp('sit_nama_text').setValue('');
                        }


                        if (closeForm)
                        {
                            Ext.getCmp(formId).close();
                        }

                        window.setTimeout(function() {
                            isDblClick = false;
                        }, 0);
                    }
                }
            });
        }
        stores.load();

        Ext.extend(grids, Ext.grid.GridPanel);
        Ext.extend(txtboks, Ext.form.TextField);//PR
        searchPrjKode = function(field, e) {
            newUrl = '/default/project/listByParams/name/Prj_Kode/data/' + field.getValue();
            prox = Pk + '_proxy';
            gri = Pk + '_grid';
            proxies = Ext.getCmp(gri).getStore();
            proxies.proxy = new Ext.data.HttpProxy({
                url: newUrl
            });
            Ext.getCmp(gri).getStore().reload();

        }
        searchPrjName = function(field, e) {
            newUrl = '/default/project/listByParams/name/Prj_Nama/data/' + field.getValue();
            prox = Pk + '_proxy';
            gri = Pk + '_grid';
            proxies = Ext.getCmp(gri).getStore();
            proxies.proxy = new Ext.data.HttpProxy({
                url: newUrl
            });
            Ext.getCmp(gri).getStore().reload();
        }

        var aForm = new Ext.Window({
            id: 'a-form-panel-pjr_kode_button',
            layout: 'absolute',
            minWidth: 300,
            minHeight: 200,
            stateful: false,
            modal: true,
            resizable: false,
            width: 400,
            height: 400,
            items: [
                {
                    x: 10,
                    y: 12,
                    xtype: 'label',
                    text: 'Budget Code:'
                },
                new txtboks(80, 10, 80, 'project_code', searchPrjKode),
                {
                    x: 170,
                    y: 12,
                    xtype: 'label',
                    text: 'Budget Name:'
                },
                new txtboks(240, 10, 80, 'project_name', searchPrjName),
                new grids('project_list')
            ]

        });
        aForm.title = 'Choose Project';
        aForm.show();
    }

    function showSitList()
    {
        var columns = [
            {header: 'Site Code', width: 100, sortable: true, dataIndex: 'sit_kode'},
            {header: 'Project Code', width: 100, sortable: true, dataIndex: 'prj_kode'},
            {header: 'Site Name', width: 150, sortable: true, dataIndex: 'sit_nama'},
        ];

        data = [
            {name: 'prj_kode', mapping: 'prj_kode'},
            {name: 'sit_kode', mapping: 'sit_kode'},
            {name: 'sit_nama', mapping: 'sit_nama'},
        ];


        urlJson = '/site/list/type/true/byPrj_Kode/' + Ext.getCmp('prj_kode_text').getValue();

        primaryKey = 'sit_kode';
        Pk = primaryKey;
        widthGrid = 380;
        heightGrid = 250;

        var stores = new Ext.data.Store({
            proxy: new Ext.data.HttpProxy({
                url: urlJson
            }),
            reader: new Ext.data.JsonReader({
                root: 'posts',
                totalProperty: 'count'
            }, data)
        });

        yAxis = 100;
        grids = function()
        {
            grids.superclass.constructor.call(this, {
                store: stores,
                columns: columns,
                x: 0,
                y: yAxis,
                id: primaryKey + '_grid',
                loadMask: true,
                bbar: [new Ext.PagingToolbar({
                        pageSize: 100,
                        store: stores,
                        displayInfo: true,
                        displayMsg: 'Displaying data {0} - {1} of {2}',
                        emptyMsg: "No data to display"
                    })],
                height: heightGrid,
                width: widthGrid,
                listeners: {
                    'rowdblclick': function(g, rowIndex, e) {
                        objectName = 'sit_kode';
                        txtBoxChange = 'sit_kode_text';
                        closeForm = true;
                        formId = 'a-form-panel-site_kode_button';
                        var prjNama = g.getStore().getAt(rowIndex).get('sit_nama');
                        var prjKode = g.getStore().getAt(rowIndex).get('prj_kode');
                        var sitKode = g.getStore().getAt(rowIndex).get(objectName);
                        newUrl = '/procurement/listByParams/name/sit_kode/joinToPod/true/data/' + sitKode + '/Prj_Kode/' + prjKode;
                        prox = 'trano_proxy';
                        gri = 'trano_grid';
                        var record = g.getStore().getAt(rowIndex).get(objectName);
                        var record2 = g.getStore().getAt(rowIndex).get("sit_nama");
                        Ext.getCmp('sit_kode_text').setValue(record);
                        if (Ext.getCmp('sit_nama_text') != undefined)
                        {
                            Ext.getCmp('sit_nama_text').setValue(record2);
                        }


                        if (closeForm)
                        {
                            Ext.getCmp(formId).close();
                        }

                        window.setTimeout(function() {
                            isDblClick = false;
                        }, 0);
                    }
                }
            });
        }
        stores.load();

        Ext.extend(grids, Ext.grid.GridPanel);
        Ext.extend(txtboks, Ext.form.TextField);//PR
        searchSiteName = function(field, e) {
            newUrl = '/default/site/listbyproject/sit_nama/' + field.getValue() + '/prj_kode/' + Ext.getCmp('prj_kode_text').getValue();
            prox = Pk + '_proxy';
            gri = Pk + '_grid';
            proxies = Ext.getCmp(gri).getStore();
            proxies.proxy = new Ext.data.HttpProxy({
                url: newUrl
            });
            Ext.getCmp(gri).getStore().reload();

        }
        searchSiteKode = function(field, e) {
            newUrl = '/default/site/listbyproject/sit_kode/' + field.getValue() + '/prj_kode/' + Ext.getCmp('prj_kode_text').getValue();
            prox = Pk + '_proxy';
            gri = Pk + '_grid';
            proxies = Ext.getCmp(gri).getStore();
            proxies.proxy = new Ext.data.HttpProxy({
                url: newUrl
            });
            Ext.getCmp(gri).getStore().reload();

        }

        var aForm = new Ext.Window({
            id: 'a-form-panel-site_kode_button',
            layout: 'absolute',
            minWidth: 300,
            minHeight: 200,
            stateful: false,
            modal: true,
            resizable: false,
            width: 400,
            height: 400,
            items: [
                {
                    x: 10,
                    y: 12,
                    xtype: 'label',
                    text: 'Site Code:'
                },
                new txtboks(80, 10, 80, 'site_code', searchSiteKode),
                {
                    x: 170,
                    y: 12,
                    xtype: 'label',
                    text: 'Site Name:'
                },
                new txtboks(240, 10, 80, 'site_name', searchSiteName),
                new grids('site_list')
            ]

        });
        aForm.title = 'Pop Up Window';
        aForm.show();
    }

    function deptPopUpHandler()
    {
        var columns = [
            {header: 'Dept Code', width: 55, sortable: true, dataIndex: 'dept_kode'},
            {header: 'Dept Name', width: 155, sortable: true, dataIndex: 'dept_nama'}
        ];

        var store = new Ext.data.ArrayStore({
            fields: [
                {name: 'dept_kode'},
                {name: 'dept_nama'},
            ]
        });

        var myData = [
            ['01', 'General Affair / HR OPEX'],
            ['02', 'General Affair / HR CAPEX'],
            ['03', 'IT Department OPEX'],
            ['04', 'IT Department CAPEX']
        ];

        store.loadData(myData);

        var grid = new Ext.grid.GridPanel({
            store: store,
            columns: columns,
            height: 210,
            width: 210,
            listeners: {
                'rowdblclick': function(g, rowIndex, e) {
                    objectName = 'dept_kode';
                    closeForm = true;
                    formId = 'a-form-panel-dep_kode_button';

                    var record = g.getStore().getAt(rowIndex).get(objectName);

                    Ext.getCmp('prj_kode_text').setValue(record);

                    if (Ext.getCmp('prj_nama_text') != undefined)
                    {
                        var record2 = g.getStore().getAt(rowIndex).get("dept_nama");
                        Ext.getCmp('prj_nama_text').setValue(record2);
                    }

                    if (closeForm)
                    {
                        Ext.getCmp(formId).close();
                    }

                    window.setTimeout(function() {
                        isDblClick = false;
                    }, 0);
                }
            }
        });


        var aForm = new Ext.Window({
            id: 'a-form-panel-dep_kode_button',
            layout: 'absolute',
            minWidth: 200,
            minHeight: 200,
            stateful: false,
            modal: true,
            resizable: false,
            width: 220,
            height: 220,
            items: [
                grid
            ]

        });
        aForm.title = 'Choose Budget';
        aForm.show();
    }

    function totals(t, params, data) {

        var total = [];
        Ext.getCmp('boq3-grid').getStore().each(function(stores) {

            var val_kode = stores.data['val_kode'];
            if (total[val_kode] == undefined)
            {
                total[val_kode] = Ext.num(parseFloat(stores.data['total'].toString().replace(/\$|\,/g, '')), 0);
            }
            else
            {
                total[val_kode] = Ext.num(total[val_kode], 0) + Ext.num(parseFloat(stores.data['total'].toString().replace(/\$|\,/g, '')), 0);
            }

        });
        return CommaFormatted(total['IDR'].toFixed(2));

    }

    var msg = function(title, msg) {
        Ext.Msg.show({
            title: title,
            msg: msg,
            minWidth: 200,
            modal: true,
            icon: Ext.Msg.INFO,
            buttons: Ext.Msg.OK
        });
    };

    var grid;

    var fp = new Ext.FormPanel({
        renderTo: 'fi-form',
        id: 'boq3-form',
        fileUpload: true,
        width: 500,
        frame: true,
        title: 'File Budget Upload Form',
        autoHeight: true,
        bodyStyle: 'padding: 10px 10px 0 10px;',
        labelWidth: 100,
        defaults: {
            anchor: '95%'
        },
        items: [
            {xtype: 'trigger', name: 'prj_kode', id: 'prj_kode_text', fieldLabel: 'Dept Code', triggerClass: 'search-button',
                onTriggerClick: function( ) {
                    showPrjList();
                },
                allowBlank: false,
                editable: false
            },
            {fieldLabel: '',
                xtype: 'textfield',
                id: 'prj_nama_text',
                name: 'prj_nama',
                readOnly: true,
                style: {'font-weight': 'bold'}
            },
            {xtype: 'trigger', name: 'sit_kode', id: 'sit_kode_text', fieldLabel: 'Period Code',
                triggerClass: 'search-button',
                onTriggerClick: function( ) {
                    if (Ext.getCmp('prj_kode_text').getValue() != '')
                        showSitList();
                },
                editable: false,
                allowBlank: false
            },
            {fieldLabel: '',
                xtype: 'textfield',
                id: 'sit_nama_text',
                name: 'sit_nama',
//        readOnly:true,
                style: {'font-weight': 'bold'}
            },
            {
                xtype: 'fileuploadfield',
                id: 'form-file',
                emptyText: 'Select a File',
                fieldLabel: 'File Excel',
                name: 'file-path',
                buttonText: '',
                buttonCfg: {
                    iconCls: 'upload-icon'
                },
                allowBlank: false
            },
            {fieldLabel: 'USD Exchange Rate',
                xtype: 'textfield',
                vtype: 'numeric',
                id: 'rateidr',
                name: 'rateidr',
                renderer: function(v) {
                    return v ? Ext.util.Format.number(v, '0,0') : '';
                }
            },
            {fieldLabel: 'Description',
                xtype: 'textfield',
                id: 'ket',
                name: 'ket'
            }],
        buttons: [
            {
                text: 'Download Sample Format of Overhead Budget',
                handler: function() {
                    window.open('/default/file/download/type/master_budget', 'mywin',
                            'left=20,top=20,width=100,height=20,toolbar=0,resizable=0');
                }
            },
            {
                text: 'Upload',
                handler: function() {
                    if (fp.getForm().isValid()) {

                        var prjKode = Ext.getCmp('prj_kode_text').getValue();
                        var sitKode = Ext.getCmp('sit_kode_text').getValue();
                        var isValid = true;
//                        cekUrl = '/projectmanagement/budget/cekbudgetexist/prj_kode/' + prjKode + "/sit_kode/" + sitKode;
//                        Ext.Ajax.request({
//                            url: cekUrl,
//                            method: 'POST',
//                            success: function(result, request) {
//                                var returnData = Ext.util.JSON.decode(result.responseText);
//
//                                if (!returnData.success) {
//                                    Ext.Msg.alert('Error!', 'Budget has already created!');
//                                    isValid = false;
//                                }
//                                else
//                                {
                        fp.getForm().submit({
                            url: '/projectmanagement/budget/uploadbudget',
                            waitMsg: 'Uploading your file...',
                            success: function(fp, o) {
                                msg('Success', 'Processed file "' + o.result.file + '" on the server');

                                Ext.getCmp('boq3-form').disable();
                                if (grid != undefined)
                                {
                                    grid.enable();
                                }
                                var json = Ext.util.JSON.encode(o.result);
                                var jsonDataPosts = '{"posts" : ' + Ext.util.JSON.encode(o.result.RESULT.posts) + '}';
                                var jsonDataFields = Ext.util.JSON.encode(o.result.RESULT.fields);

                                var Posts = Ext.util.JSON.decode(jsonDataPosts);

                                var jsonData = Ext.util.JSON.decode(json);

                                var reader = new Ext.data.JsonReader({
                                    idProperty: 'id',
                                    root: 'posts',
                                    fields: jsonData.RESULT.fields
                                });

                                var store = new Ext.data.Store({
                                    id: 'boq3-store',
                                    reader: reader
                                });

                                if (grid != undefined)
                                {
                                    grid.destroy();
                                }

                                var theData = Ext.util.JSON.decode(jsonDataPosts);
                                store.loadData(theData);

                                var editor = new Ext.ux.grid.RowEditor({
                                    saveText: 'Update',
                                    clicksToEdit: 1,
                                    listeners: {
                                        'afteredit': function(ed, obj, rec, index) {
                                            var recs = store.getAt(index);
                                            recs.data['total'] = parseFloat(rec.data['qty']) * parseFloat(rec.data['harga']);

                                            ed.record.commit(); //Commit changes into store
                                        }
                                    }
                                });

//	        	                        var expander = new Ext.ux.grid.RowExpander({
//	        	                            tpl : new Ext.Template(
//	        	                            		'<div style="margin-left:45px;"><p><br>',
//	        	                                	'<p><b>Workname:</b> {workname}</p><br>',
//	        	                                    '<p><b>Nama Barang:</b> {nama_brg}</p><br></div>'
//	        	                                   )
//	        	                        });

                                var datas = new Ext.data.SimpleStore({
                                    fields: ['type', 'name']
                                    , data: [['USD', 'USD'], ['IDR', 'IDR']]
                                });

                                var totJum = 0;
                                var totJumUSD = 0;

                                grid = new Ext.grid.GridPanel({
                                    id: 'boq3-grid',
                                    store: store,
                                    width: 800,
                                    height: 400,
                                    frame: true,
                                    bbar: new Ext.Toolbar({
                                        id: 'gtotal-bbar',
                                        style: "text-align:right",
                                        items: [
                                            {
                                                xtype: 'label',
                                                id: 'gtotal-text'
                                            }, '-',
                                            {
                                                xtype: 'label',
                                                id: 'gtotal-text2'
                                            }
                                        ],
                                        layout: 'fit'
                                    }),
                                    renderTo: 'fi-grid',
                                    tbar: [
                                        {
                                            text: 'Refresh',
                                            iconCls: 'silk-table-refresh',
                                            handler: function() {
                                                Ext.MessageBox.confirm('Confirm', 'This action will remove all changes on grid, Refresh data now?',
                                                        function(btn)
                                                        {
                                                            if (btn == 'yes')
                                                            {
                                                                grid.getStore().removeAll();
                                                                grid.getStore().loadData(Ext.util.JSON.decode(jsonDataPosts));
                                                            }
                                                        }
                                                );

                                            },
                                            scope: this
                                        },
                                        {
                                            id: 'remove-data',
                                            text: 'Remove',
                                            iconCls: 'silk-delete',
                                            handler: function() {
                                                var sm = grid.getSelectionModel().getSelections();
                                                editor.stopEditing();
                                                grid.getStore().remove(sm);
                                                grid.getSelectionModel().clearSelections();
                                            },
                                        }
                                    ],
                                    buttons: [
                                        {
                                            text: 'Submit BOQ3',
                                            iconCls: 'icon-save',
                                            handler: function() {
                                                if (grid.getStore().getCount() == 0)
                                                    return false;
                                                Ext.MessageBox.confirm('Confirm', 'This action will submit Budget, Proceed?',
                                                        function(btn)
                                                        {
                                                            if (btn == 'yes')
                                                            {
                                                                var json = '';
                                                                grid.getStore().each(function(store) {
                                                                    var encode = Ext.util.JSON.encode(store.data);
                                                                    if (encode != undefined)
                                                                        json += encode + ',';
                                                                });
                                                                json = '[' + json.substring(0, json.length - 1) + ']';
                                                                Ext.getBody().mask('Loading..','x-mask-loading',false);
                                                                Ext.Ajax.request({
                                                                    url: '/projectmanagement/budget/checkbudgetid',
                                                                    method: 'POST',
                                                                    params: {posts: json},
                                                                    success: function(result, request) {
                                                                        Ext.getBody().unmask();
                                                                        var returnData = Ext.util.JSON.decode(result.responseText);
                                                                        if (!returnData.success) {
                                                                            Ext.Msg.alert('Error!', returnData.msg+'<br />Please remove first!');
                                                                        }
                                                                        else
                                                                        {
                                                                            var rate = Ext.getCmp('rateidr').getValue();
                                                                            var desc = '"' + Ext.getCmp('ket').getValue() + '"';
                                                                            var submitUrl = '';
                                                                            params = {posts: json, rateidr: rate, ket: desc};
                                                                            submitData(params);
                                                                        }
                                                                    }
                                                                    , failure: function(action) {
                                                                        Ext.getBody().unmask();
                                                                        if (action.failureType == 'server') {
                                                                            obj = Ext.util.JSON.decode(action.response.responseText);
                                                                            Ext.Msg.alert('Error!', obj.errors.reason);
                                                                        }
                                                                    }
                                                                });

                                                            }
                                                        }
                                                );

                                            },
                                            scope: this
                                        },
                                        {
                                            text: 'Cancel',
                                            iconCls: 'icon-cancel',
                                            handler: function() {
                                                Ext.getCmp('boq3-form').enable();
                                                Ext.getCmp('boq3-grid').getStore().removeAll();
                                                Ext.getCmp('boq3-grid').disable();
                                            }
                                        }
                                    ],
                                    plugins: [editor],
                                    columns: [
                                        new Ext.grid.RowNumberer(),
//	        	                                      expander,
                                        {
                                            header: 'Budget ID',
                                            dataIndex: 'budgetid',
                                            width: 80,
                                            sortable: true
                                        }, {
                                            header: 'Budget Name',
                                            dataIndex: 'budgetname',
                                            width: 100,
                                            sortable: true
                                        }, {
                                            header: 'CoA Code',
                                            dataIndex: 'coa_kode',
                                            width: 80,
                                            sortable: true,
                                            editor: {
                                                xtype: 'textfield'

                                            }
                                        }, {
                                            header: 'CoA Nama',
                                            dataIndex: 'coa_nama',
                                            width: 80,
                                            sortable: true,
                                            editor: {
                                                xtype: 'textfield'

                                            }
                                        },
//
                                        {
                                            header: 'Valuta',
                                            dataIndex: 'val_kode',
                                            width: 50,
                                            sortable: true,
                                            editor: {
                                                xtype: 'combo'
                                                , store: datas
                                                , valueField: 'type'
                                                , displayField: 'name'
                                                , typeAhead: true
                                                , mode: 'local'
                                                , triggerAction: 'all'
                                                , selectOnFocus: true
                                                , hiddenName: 'type'
                                            }
                                        }, {
                                            header: 'Total',
                                            dataIndex: 'total',
                                            align: 'right',
                                            width: 100,
                                            renderer: function(v, p, r) {

                                                return v ? Ext.util.Format.number(v, '0,0') : '';
                                            },
                                            sortable: true
//                                                          summaryType: 'jumlah',
//                                                          summaryRenderer: totals
                                        },
                                    ]
                                });


                            },
                            failure: function(fp, o) {
                                msg('Error', 'File "' + o.result.file + '" cannot processed on the server! Please refresh (F5) Your browser or Try uploading again.');
                            }
                        });
                    }
//                            }
//                            ,
//                            failure: function(action) {
//                                if (action.failureType == 'server') {
//                                    obj = Ext.util.JSON.decode(action.response.responseText);
//                                    Ext.Msg.alert('Error!', obj.errors.reason);
//                                }
//                            }
//                        });


                }

            }, {
                text: 'Reset',
                handler: function() {
                    fp.getForm().reset();
                    getExchangeRate();
                }
            }, {
                text: 'Cancel',
                handler: function(btn, ev) {
                    myPanel = Ext.getCmp('abs-budget-panel');
                    myPanel.body.load({
                        url: '/projectmanagement/budget/showcreateboq3',
                        scripts: true
                    });
                },
                scope: this
            }]
    });

    function getExchangeRate()
    {
        Ext.Ajax.request({
            url: '/default/valuta/getexchangerate/val_kode/USD',
            method: 'POST',
            success: function(result, request) {
                var returnData = Ext.util.JSON.decode(result.responseText);
                if (returnData.success) {
                    if(returnData.rate == 0)
                    {
                        Ext.MessageBox.show({
                            title: 'Error',
                            msg: 'Please Call Accounting Staffs (Ext. 1101 - 1104). Ask Them to Input Current IDR Rate. Thank You.',
                            buttons: Ext.MessageBox.OK,
                            icon: Ext.MessageBox.ERROR,
                            fn:function(){window.location='';}
                        });
                    }
                    
                    Ext.getCmp('rateidr').setValue(returnData.rate);
                }
            }
            , failure: function(action) {
                if (action.failureType == 'server') {
                    obj = Ext.util.JSON.decode(action.response.responseText);
                    Ext.Msg.alert('Error!', obj.errors.reason);
                }
            }
        });
    }
    getExchangeRate();
</script>

<div id="fi-form"></div>
<br />
<div id="fi-grid"></div>