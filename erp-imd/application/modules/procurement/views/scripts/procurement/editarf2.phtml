<script type="text/javascript">

var ori;

var txtboks = function(posX,posY,widthBox,idName,eventName)
     {
         txtboks.superclass.constructor.call(this, {
                id:idName,
                x:posX,
                y:posY,
                width:widthBox,
                enableKeyEvents:true,
                listeners: {
                keyup: eventName
    }
             })

     }
    Ext.extend(txtboks,Ext.form.TextField);//PR

var proxy = new Ext.data.HttpProxy({
   url : '/default/home/getboq3summary'
});

showAddARF = function(){
	    myPanel = Ext.getCmp('abs-budget-panel');
	    myPanel.body.load({
	        url: '/procurement/procurement/addarf',
	        scripts : true
        });
	};

var boq3list = Ext.data.Record.create ([
							             {name: 'id', type: 'integer'},
                                        {name: 'workid', type: 'string'},
                                        {name: 'workname', type: 'string'},
                                        {name: 'kode_brg', type: 'string'},
                                        {name: 'nama_brg', type: 'string'},
                                        {name: 'qty', type: 'float'},
                                        {name: 'price', type: 'float'},
                                        {name: 'hargaIDR', type: 'float'},
                                        {name: 'hargaUSD', type: 'float'},
                                        {name: 'val_kode', type: 'string'},
                                        {name: 'totalARF', type: 'float'},
                                        {name: 'totalqtyARF', type: 'float'},
                                        {name: 'totalQtyPO', type: 'float'},
                                        {name: 'totalPO', type: 'float'},
                                        {name: 'totalqtyASFCancel', type: 'float'},
                                        {name: 'totalASFCancel', type: 'float'},
                                        {name: 'totalPrice', type: 'float'},
                                        
                                        {name: 'totalPoArfAsfc', type: 'float'},
                                        {name: 'uom', type: 'string'},
                                        {name: 'cfs_kode', type: 'string'},
                                        {name: 'cfs_nama', type: 'string'}
							         ]);


var arflist = Ext.data.Record.create([{
  name: 'id',
    type: 'integer'
},{
    name: 'workid',
    type: 'string'
}, {
    name: 'trano',
    type: 'string'
},{
    name: 'workname',
    type: 'string'
}, {
    name: 'prj_kode',
    type: 'string'
},{
    name: 'prj_nama',
    type: 'string'
},{
    name: 'sit_kode',
    type: 'string'
},{
    name: 'sit_nama',
    type: 'string'
},{
    name: 'nama_brg',
    type: 'string'
},{
    name: 'kode_brg',
    type: 'string'
},{
    name: 'tgl',
    type: 'date',
    dateFormat: 'Y-m-d'
},{
    name: 'qty',
    type: 'string'
},{
    name: 'ket',
    type: 'string'
},{
    name: 'hargaIDR',
    type: 'float'
},{
    name: 'hargaUSD',
    type: 'float'
},{
    name: 'totalIDR',
    type: 'float'
},{
    name: 'totalPrice',
    type: 'float'
},{
    name: 'totalPriceARF',
    type: 'float'
},{
    name: 'totalUSD',
    type: 'float'
},{
    name: 'val_kode',
    type: 'string'
},{
    name: 'status',
    type: 'string'
},{
    name: 'net_act',
    type: 'string'
},{
    name: 'urut',
    type: 'integer'
},{
    name: 'priceArf',
    type: 'float'
},{
    name: 'totalARF',
    type: 'float'
},{
    name: 'uom',
    type: 'string'
},{
    name: 'harga',
    type: 'integer'
},{
    name: 'total',
    type: 'integer'
},{name: 'totalPoArfAsfc',
    type: 'float'
},{
    name: 'totalBOQ3',
    type: 'float'
},{
    name: 'requester',
    type: 'string'
},{
    name: 'requesterName',
    type: 'string'
}
]);

var filelist = Ext.data.Record.create([ {
    name: 'id',
    type: 'integer'
},{
    name: 'filename',
    type: 'string'
},{
    name: 'savename',
    type: 'string'
},{
    name: 'status',
    type: 'string'
},{
    name: 'path',
    type: 'string'
}]);

var storeARF = new Ext.data.Store({
    reader: new Ext.data.JsonReader({fields: arflist})
//    listeners:{
//		'load':function(t,r,o)
//		{
//			submitBoq3();
//
//		}
//    }
});

var storeFile = new Ext.data.Store({
    reader: new Ext.data.JsonReader({fields: filelist})
});

var proxy2 = new Ext.data.HttpProxy({
    api: {
        create : '/procurement/procurement/insertarf',
       //update: '/procurement/procurement/list/type/prd',
        destroy: '/procurement/procurement/list/type/arfd'
         }
});

var reader2 = new Ext.data.JsonReader({
    totalProperty: 'count',
    idProperty: 'trano',
    root: 'posts'
}, [
    {name: 'trano'}
]);


var reader = new Ext.data.JsonReader({
    totalProperty: 'count',
    idProperty: 'id',
    root: 'posts'
}, [
    {name: 'id', type: 'string'},
    {name: 'workid', type: 'string'},
    {name: 'workname', type: 'string'},
    {name: 'kode_brg', type: 'string'},
    {name: 'nama_brg', type: 'string'},
    {name: 'qty', type: 'float'},
    {name: 'price', type: 'float'},
    {name: 'hargaIDR', type: 'float'},
    {name: 'hargaUSD', type: 'float'},
    {name: 'val_kode', type: 'string'},
    {name: 'totalARF', type: 'float'},
    {name: 'totalqtyARF', type: 'float'},
    {name: 'totalQtyPO', type: 'float'},
    {name: 'totalPO', type: 'float'},
    {name: 'totalqtyASFCancel', type: 'float'},
    {name: 'totalASFCancel', type: 'float'},
    {name: 'totalPrice', type: 'float'},

    {name: 'totalPoArfAsfc', type: 'float'},
    {name: 'uom', type: 'string'},
    {name: 'cfs_kode', type: 'string'},
    {name: 'cfs_nama', type: 'string'}
]);

var writer = new Ext.data.JsonWriter({
    encode: true,
    writeAllFields: false
});

Ext.apply(Ext.form.VTypes, {
	'numeric': function(){

			/*****************************************************************
			DESCRIPTION: Validates that a string contains only valid numbers.
			PARAMETERS:
			   strValue - String to be tested for validity
			RETURNS:
			   True if valid, otherwise false.
			******************************************************************/
			  var objRegExp  =  /(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/;
			  return function(strValue){
				  //check for numeric characters
				  return objRegExp.test(strValue);
			  }
	},
	'numericText': 'Only numbers and dot are allowed'
});

var store = new Ext.data.Store({
    id: 'boq3',
    proxy: proxy,
    reader: reader,
    listeners: {
		'load':function(t,r,o)
		{
			addEditedBoq();
		}
    }
});

Ext.data.DataProxy.addListener('exception', function(proxy, type, action, options, res) {
    if (type === 'remote') {
        Ext.Msg.show({
            title: 'REMOTE EXCEPTION',
            msg: res.message,
            icon: Ext.MessageBox.ERROR,
            buttons: Ext.Msg.OK
        });
    }
});

var ori;

//Start our own function
function deleteFile()
{
    var rec = Ext.getCmp('files-grid').getSelectionModel().getSelections();
	theFile = storeFile.getAt(storeFile.findExact('id', rec[0].data['id']));

    if (theFile != undefined)
    {
        Ext.MessageBox.confirm('Confirm', 'Are you sure want to delete this file?', function(btn){
            if (btn== 'yes')
            {
//                if (theFile.data['status'] == 'new')
                    var params = {filename:theFile.data['savename']};
                    Ext.Ajax.request({
                        url: '/procurement/procurement/deletefile',
                        method:'POST',
                        success: function(result, request){
                            var returnData = Ext.util.JSON.decode(result.responseText);
                            if (returnData.success)
                            {
                                storeFile.remove(theFile);
                                Ext.getCmp('files-grid').getView().refresh();
                            }
                            else
                            {
                                Ext.Msg.alert('Error!', returnData.msg);
                                return false;
                            }
                        },
                        failure:function( action){
                        if(action.failureType == 'server'){
                          obj = Ext.util.JSON.decode(action.response.responseText);
                          Ext.Msg.alert('Error!', obj.errors.reason);
                        }else{
                          Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                        }
                        },
                        params: params
                    });
            }
	    });
    }
};

function getNewID()
{

	var maxRecordBOQ3 = storeBOQ3.getCount();
    var maxRecordARF = storeARF.getCount();

	var newID = maxRecordBOQ3 + maxRecordARF + 1;

	return newID;
}

function getValuta()
{
    var valuta = Ext.getCmp('val_kode_text').getValue();
	Ext.Ajax.request({
        results: 0,
        url: '/default/home/getmastervaluta/val_kode/'+valuta,
        method:'POST',
        success: function(result, request){
           var returnData = Ext.util.JSON.decode(result.responseText);
//            console.log(returnData);
         Ext.getCmp('val_nama_text').setValue(returnData);

        },
        failure:function( action){
            if(action.failureType == 'server'){
                obj = Ext.util.JSON.decode(action.response.responseText);
                Ext.Msg.alert('Error!', obj.errors.reason);
                }else{
                Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                }
                }
        });
}
function getLogin()
{
    var Xrequest = Ext.getCmp('mgr_kode_text').getValue();
	Ext.Ajax.request({
        results: 0,
        url: '/default/home/getmasterlogin2/uid/'+Xrequest,
        method:'POST',
        success: function(result, request){
           var returnData = Ext.util.JSON.decode(result.responseText);
         Ext.getCmp('mgr_nama_text').setValue(returnData);

        },
        failure:function( action){
            if(action.failureType == 'server'){
                obj = Ext.util.JSON.decode(action.response.responseText);
                Ext.Msg.alert('Error!', obj.errors.reason);
                }else{
                Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                }
                }
        });
}
function getFinance()
{
    var Xrequest = Ext.getCmp('fin_kode_text').getValue();

	Ext.Ajax.request({
        results: 0,
        url: '/default/home/getmasterlogin3/master_login/'+Xrequest,
        method:'POST',
        success: function(result, request){
           var returnData = Ext.util.JSON.decode(result.responseText);
         Ext.getCmp('fin_nama_text').setValue(returnData);

        },
        failure:function( action){
            if(action.failureType == 'server'){
                obj = Ext.util.JSON.decode(action.response.responseText);
                Ext.Msg.alert('Error!', obj.errors.reason);
                }else{
                Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                }
                }
        });
}


//function insertARFtoList()
//{
//
//    var cek = storeBOQ3.getAt(storeBOQ3.findExact('status', 'edit'));
//                    alert(cek);
//            alert("hallo lagi disini dong");
//    // lagi disini
//    var newQty = parseFloat(Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,''));
//
//    if (cek != undefined)
//    {
//        var arf = storeARF.getAt(storeARF.findExact('id',cek.data['id']));
//        if (cek.data['trano'] == dor.data['trano'])
//        {
//            arf.data['qty'] = newQty;
//            cek.data['totalARF'] = parseFloat(cek.data['totalARF']) + newQty;
//            clearEditStatus();
//            cek = undefined;
//        }
//        Ext.getCmp('save-dor').setText('Add to ARF list');
//    }
//    else
//    {
//        var recboq3 = Ext.getCmp('boq3-grid').getSelectionModel().getSelections();
//        var boq3 = storeBOQ3.getAt(storeBOQ3.findExact('id', recboq3[0].data['id']));
//        var arf = storeARF.getAt(storeARF.findExact('id', recboq3[0].data['id']));
//        if (recboq3[0] != undefined && arf == undefined)
//        {
//             var d = new arflist({
//                trano : recboq3[0].data['trano'],
//                tgl:recboq3[0].data['tgl'],
//                urut: recboq3[0].data['urut'],
//                workid: recboq3[0].data['workid'],
//                workname: recboq3[0].data['workname'],
//                pr_number: recboq3[0].data['trano'],
//                prj_kode: recboq3[0].data['prj_kode'],
//                sit_kode: recboq3[0].data['sit_kode'],
//                prj_nama: recboq3[0].data['prj_nama'],
//                sit_nama: recboq3[0].data['sit_nama'],
//                kode_brg: recboq3[0].data['kode_brg'],
//                nama_brg: recboq3[0].data['nama_brg'],
//                harga: recboq3[0].data['harga'],
//                total: recboq3[0].data['total'],
//                val_kode: recboq3[0].data['val_kode'],
//                qty:  newQty,
//                uom: recboq3[0].data['uom'],
//                id: boq3.data['id']
//            });
//            storeARF.add(d);
//            pr.data['totalARF'] = parseFloat(pr.data['totalARF']) + newQty;
//            pr = undefined;
//            d = undefined;
//        }
//        else if (recboq3[0] != undefined && arf != undefined)
//        {
//            arf.data['qty'] = parseFloat(arf.data['qty']) + newQty;
//            boq3.data['totalARF'] = parseFloat(boq3.data['totalARF']) + newQty;
//            boq3 = undefined;
//            arf = undefined;
//            d = undefined;
//        }
//    }
//    Ext.getCmp('boq3-grid').enable();
//    Ext.getCmp('arf-grid').enable();
//    Ext.getCmp('boq3-grid').getView().refresh();
//    Ext.getCmp('arf-grid').getView().refresh();
//    clearARFForm();
//    resetButton();
//}


function showManagerList()
{
    var columns = [
                    {header:'Uid',width:100,sortable:true,dataIndex:'uid'},
                    {header:'Manager Name',width:150,sortable:true,dataIndex:'nama'},
                ];

    data =  [

            {name: 'uid', mapping: 'uid'},
            {name: 'nama', mapping: 'nama'},
            ];


    urlJson = '/default/manager/list';

    primaryKey = 'uid';
    Pk = primaryKey;
    widthGrid = 380;
    heightGrid = 250;

    var stores = new Ext.data.Store({
        proxy:new Ext.data.HttpProxy({
        url: urlJson
         }),
            reader: new Ext.data.JsonReader({
        root: 'posts',
        totalProperty: 'count'
    },data)
        });

    yAxis=100;
    grids = function()
    {
        grids.superclass.constructor.call(this, {
        store: stores,
        columns: columns,
        x:0,
        y:yAxis,
        id:primaryKey+'_grid',
        loadMask: true,
        bbar:[ new Ext.PagingToolbar({
            pageSize: 100,
            store: stores,
            displayInfo: true,
            displayMsg: 'Displaying data {0} - {1} of {2}',
            emptyMsg: "No data to display"
        })],
        height:heightGrid,
        width:widthGrid,
        listeners: {
            'rowdblclick': function(g, rowIndex, e){
				        	objectName = 'uid';
				            txtBoxChange = 'mgr_kode_text';
				            closeForm = true;
				            formId = 'a-form-panel-mgr_kode_button';
				            var uid = g.getStore().getAt(rowIndex).get(objectName);
				           newUrl = '/default/manager/dblclick/name/uid/data/' + uid;
				            prox = 'trano_proxy';
				            gri = 'trano_grid';

				            var record = g.getStore().getAt(rowIndex).get(objectName);
				            var record2 = g.getStore().getAt(rowIndex).get("nama");
                            Ext.getCmp('mgr_kode_text').setValue(record);



                            if (Ext.getCmp('mgr_nama_text') != undefined)
                            {
                            	Ext.getCmp('mgr_nama_text').setValue(record2);
                            }


                            if (closeForm)
                            {
                                Ext.getCmp(formId).close();
                            }

                            window.setTimeout(function(){
                                    isDblClick = false;
                            }, 0);
                    }
            }
    });
    }
    stores.load();

    Ext.extend(grids, Ext.grid.GridPanel);
    
    searchMgrKode = function(field,e){
        newUrl = '/default/manager/dblclick/name/uid/data/' + field.getValue();    prox = Pk+'_proxy';
        gri = Pk+'_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy({
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();

    }
    searchMgrName = function(field,e){
        newUrl = '/default/manager/dblclick/name/Name/data/' + field.getValue();    prox = Pk+'_proxy';
        gri = Pk+'_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy({
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();
    }

    var aForm =  new Ext.Window({
        id: 'a-form-panel-mgr_kode_button',
        layout: 'absolute',
        minWidth: 300,
        minHeight: 200,
        stateful:false,
        modal: true,
        resizable: false,
        width: 400,
        height: 400,
        items : [
            {
            x: 10,
            y: 12,
            xtype: 'label',
            text: 'Manager Uid:'
            },
             new txtboks(90,10,80,'manager_code',searchMgrKode),
             {
            x: 180,
            y: 12,
            xtype: 'label',
            text: 'Manager Name:'
            },
            new txtboks(260,10,80,'manager_name',searchMgrName),
             new grids('manager_list')
        ]

      });
      aForm.title = 'Choose Manager';
      aForm.show();
}




function showUserList()
{
    var columns = [
                    new Ext.grid.RowNumberer({width: 30}),
                    {header:'User Name',width:150,sortable:true,dataIndex:'name'},
                ];

    data =  [
            {name: 'id'},
            {name: 'uid'},
            {name: 'name'}
            ];


    urlJson = '/user/list';

    primaryKey = 'id';
    Pk = primaryKey;
    widthGrid = 380;
    heightGrid = 250;

    var stores = new Ext.data.Store({
        proxy:new Ext.data.HttpProxy({
        url: urlJson
         }),
            reader: new Ext.data.JsonReader({
        root: 'posts',
        totalProperty: 'count'
    },data)
        });

    yAxis=100;
    grids = function()
    {
        grids.superclass.constructor.call(this, {
        store: stores,
        columns: columns,
        x:0,
        y:yAxis,
        id:primaryKey+'_grid',
        loadMask: true,
        bbar:[ new Ext.PagingToolbar({
            pageSize: 100,
            store: stores,
            displayInfo: true,
            displayMsg: 'Displaying data {0} - {1} of {2}',
            emptyMsg: "No data to display"
        })],
        height:heightGrid,
        width:widthGrid,
        listeners: {
            'rowdblclick': function(g, rowIndex, e){
				        	objectName = 'id';
				            txtBoxChange = 'mgr_kode_text';
				            closeForm = true;
				            formId = 'a-form-panel-user_button';
				            var id = g.getStore().getAt(rowIndex).get(objectName);
				            newUrl = '/default/user/listByParams/name/id/data/' + id;
				            prox = 'trano_proxy';
				            gri = 'trano_grid';

				            var record = g.getStore().getAt(rowIndex).get("uid");
				            var record2 = g.getStore().getAt(rowIndex).get("name");
                            Ext.getCmp('fin_kode_text').setValue(record);



                            if (Ext.getCmp('fin_nama_text') != undefined)
                            {
                            	Ext.getCmp('fin_nama_text').setValue(record2);
                            }


                            if (closeForm)
                            {
                                Ext.getCmp(formId).close();
                            }

                            window.setTimeout(function(){
                                    isDblClick = false;
                            }, 0);
                    }
            }
    });
    }

    stores.load({
        params: {
            start: 0,
            limit: 100
        }
    });

    Ext.extend(grids, Ext.grid.GridPanel);
    Ext.extend(txtboks,Ext.form.TextField);//PR
    searchUserLogin = function(field,e){
        newUrl = '/default/user/listByParams/name/master_login/data/' + field.getValue();    prox = Pk+'_proxy';
        gri = Pk+'_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy({
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();

    }
    searchUserName = function(field,e){
        newUrl = '/default/user/listByParams/name/Name/data/' + field.getValue();    prox = Pk+'_proxy';
        gri = Pk+'_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy({
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();
    }

    var aForm =  new Ext.Window({
        id: 'a-form-panel-user_button',
        layout: 'absolute',
        minWidth: 300,
        minHeight: 200,
        stateful:false,
        modal: true,
        resizable: false,
        width: 400,
        height: 400,
        items : [
            {
            x: 10,
            y: 12,
            xtype: 'label',
            text: 'User Login:'
            },
             new txtboks(100,10,80,'master_login',searchUserLogin),
             {
            x: 190,
            y: 12,
            xtype: 'label',
            text: 'User Name:'
            },
            new txtboks(260,10,80,'Name',searchUserName),
             new grids('user_list')
        ]

      });
      aForm.title = 'Choose User';
      aForm.show();
}

function getARFRecord(workid,kode_brg,isEdit)
{
	//Clear filter
	storeARF.clearFilter();
	storeARF.filterBy(function(record,id){
		if (!isEdit)
		{
			if (record.get('workid') == workid.toString() && record.get('kode_brg') == kode_brg.toString())
			{
				return record.get('workid');
			}
		}
		else
		{
			if (record.get('workid') == workid.toString() && (record.get('status') != '' || record.get('status') != undefined))
			{
				return record.get('workid');
			}
		}
	});
	if (storeARF.getCount() > 0)
	{
		var rec = storeARF.getAt(0);
	}

	storeARF.clearFilter();
	return rec;
}
function getOriRecordForARF(workid)
{
	//Clear filter
	store.clearFilter();
	store.filterBy(function(record,id){
			return record.get('workid') == workid;
	});
	if (store.getCount() > 0)
	{
		var rec = store.getAt(0);
	}

	store.clearFilter();
	return rec;
}


function clearButton()
{
	Ext.getCmp('cancel-to-arf').setText('Cancel Add');
//	Ext.getCmp('cancel-to-arf').disable();
	Ext.getCmp('save-to-arf').setText('Add to ARF List(Cart)');
// 	Ext.getCmp('save-to-arf').disable();
}

function refreshGrid()
{
	Ext.getCmp('boq3-grid').enable();
	Ext.getCmp('arf-grid').enable();
    Ext.getCmp('arf-grid').getSelectionModel().clearSelections();
    Ext.getCmp('boq3-grid').getSelectionModel().clearSelections();
    Ext.getCmp('arf-grid').getView().refresh();
    Ext.getCmp('boq3-grid').getView().refresh();
}

function clearARFForm()
{
	var teks = Ext.getCmp('arf-form').findByType('textfield');
    Ext.each(teks, function (t, index){
			t.setValue('');
        });
    Ext.getCmp('requester_text').setValue('');
    Ext.getCmp('user_selector').clearData();
    if (document.getElementById('boq3') != undefined)
        document.getElementById('boq3').innerHTML = '0';
    if (document.getElementById('inarf') != undefined)
        document.getElementById('inarf').innerHTML = '0';
    if (document.getElementById('balance') != undefined)
        document.getElementById('balance').innerHTML = '0';
    if (document.getElementById('newbalance') != undefined)
        document.getElementById('newbalance').innerHTML = '0';
	Ext.getCmp('kode_brg_text').disable();
//	Ext.getCmp('price_text').enable();
    Ext.getCmp('totalarf_text').disable();
}

function cekTotal()
{
         var boq3 = document.getElementById('boq3').innerHTML;
         var inarf = document.getElementById('inarf').innerHTML;

         inarf = parseFloat(inarf.toString().replace(/\$|\,/g,''));
         boq3 = parseFloat(boq3.toString().replace(/\$|\,/g,''));
         var unitQty = parseFloat(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,''));
         var newPrice = Ext.getCmp('price_text').getValue().replace(/\$|\,/g,'');
         var newBalance = parseFloat(inarf) + (parseFloat(newPrice) * parseFloat(unitQty));
         if (moneycomp(newBalance,'>',boq3))
//         if (newBalance > boq3)
         {
//             Ext.getCmp('save-to-arf').disable();
             Ext.MessageBox.show({
                    title: 'Error',
                    msg: 'Request Quantity is over the Budget!',
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
             return false;
         }
         else
         {

            return true;
         }
}

function clearEditStatus()
{
    storeARF.each(function(store){
            if (store.data['status'] == 'edit')
            {
                var e = storeARF.getAt(storeARF.findExact('id', store.data['id']));
                e.data['status'] = '';
            }
    });
    
}

function addEditedBoq()
{
    if(store.getCount() > 0 && storeARF.getCount() > 0)
	{
    //clearFilter
    storeARF.clearFilter();
    
	storeARF.each(function(stores){

                if(!isMscWorkid(stores.data['workid']))
                {
				var col = store.queryBy(function(record,id){

					 return record.get('workid') == stores.data['workid']  && record.get('kode_brg') == stores.data['kode_brg'];

				});
                }
                else
                {
                    var col = store.queryBy(function(record,id){

					 return record.get('workid') == stores.data['workid'];
                        });
                }
            

				if (col.length == 0)
				{

                           var lastID = stores.data['id'];

                         if(!isMscWorkid(stores.data['workid']))
                        {

							var e = new boq3list (
    								 {
	    							 'id':lastID,
							         'workid':stores.data['workid'],
						             'workname':stores.data['workname'],
						             'kode_brg':stores.data['kode_brg'],
						             'nama_brg':stores.data['nama_brg'],
						             'qty':stores.data['qty'],
						             'price':stores.data['price'],
						             'hargaIDR':stores.data['hargaIDR'],
						             'hargaUSD':stores.data['hargaUSD'],
						             'val_kode':stores.data['val_kode'],
                                     'totalqtyARF':stores.data['totalqtyARF'],
						             'totalARF':stores.data['totalARF'],
                                     'totalqtyPO':stores.data['totalqtyPO'],
                                     'totalPO':stores.data['totalPO'],
						             'totalqtyASFCancel':stores.data['totalqtyASFCancel'],
                                     'totalASFCancel':stores.data['totalASFCancel'],
						             'totalPrice':stores.data['totalBOQ3'],
						             
                                     'totalPoArfAsfc':stores.data['totalPoArfAsfc'],
						             'uom':stores.data['uom'],
                                     'cfs_kode':stores.data['cfs_kode'],
                                     'cfs_nama':stores.data['cfs_nama']

									});
                        }
                        else
                         {
                             var e = new boq3list (
    								 {
	    							 'id':lastID,
							         'workid':stores.data['workid'],
						             'workname':stores.data['workname'],
						             'kode_brg':'XX',
						             'nama_brg':'others',
						             'qty':stores.data['qty'],
						             'price':stores.data['price'],
						             'hargaIDR':stores.data['hargaIDR'],
						             'hargaUSD':stores.data['hargaUSD'],
						             'val_kode':stores.data['val_kode'],
                                     'totalqtyARF':stores.data['totalqtyARF'],
						             'totalARF':stores.data['totalARF'],
                                     'totalqtyPO':stores.data['totalqtyPO'],
                                     'totalPO':stores.data['totalPO'],
						             'totalqtyASFCancel':stores.data['totalqtyASFCancel'],
                                     'totalASFCancel':stores.data['totalASFCancel'],
						             'totalPrice':stores.data['totalBOQ3'],

                                     'totalPoArfAsfc':stores.data['totalPoArfAsfc'],
						             'uom':'',
                                     'cfs_kode':'',
                                     'cfs_nama':''

									});
                         }
							store.add(e);
							e = undefined;
                            Ext.getCmp('boq3-grid').getView().refresh();
				}
				else
				{
                  
                    col.items[0].data['totalPoArfAsfc'] = stores.data['totalPoArfAsfc'];
                     Ext.getCmp('boq3-grid').getView().refresh();
				}

	});
    filterDelete();
    }
}

function filterDelete()
{
    //clearFilter
    storeARF.clearFilter();
    
//    storeARF.each(function(stores){

        storeARF.filterBy(function(record,id) {
        if(record.get('status') == 'delete')
            return false;
        else
            return true;
        });
        
//    });
}

function checkList()
{
    storeARF.clearFilter();
    var gridboq = Ext.getCmp('boq3-grid').getSelectionModel().getSelections();
    if (gridboq[0] != undefined)
	    var oriboq = store.getAt(store.findExact('id', gridboq[0].data['id']));
    else
        return false;

    if(!isMscWorkid(oriboq.data['workid']))
    {
    var col = storeARF.queryBy(function(record,id){

         return record.get('workid') == oriboq.data['workid']  && record.get('kode_brg') == oriboq.data['kode_brg'];

    });
    }
    else
    {
        var col = storeARF.queryBy(function(record,id){

         return record.get('workid') == oriboq.data['workid'] && record.get('kode_brg') == oriboq.data['kode_brg'];;
            });
    }

    if (col.length == 0)
    {
        return false;
    }
    else
    {
        var qty = Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,'');
        var priceArf   =parseFloat(Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''));
        var totalARF   =parseFloat(Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,''));

        var ket = Ext.getCmp('ket-arf').getValue().toString().replace(/\"|\'|\n|\r|\t/g,'');
        var netAct = Ext.getCmp('net-act').getValue();
        
        if(col.items[0].data['status'] == 'delete')
        {
            col.items[0].data['qty'] = qty;
            col.items[0].data['priceArf'] = priceArf;
            col.items[0].data['totalARF'] = totalARF;
            col.items[0].data['status'] = '';
            col.items[0].data['ket'] = ket;
            col.items[0].data['net_act'] = netAct;
            col.items[0].data['totalPoArfAsfc'] = parseFloat(col.items[0].data['totalPoArfAsfc'].toString().replace(/\$|\,/g,'')+parseFloat(totalARF));

            filterDelete();
            return true;

        }
        else
        {
            Ext.MessageBox.show({
            title: 'Error',
            msg: 'Please Use Edit To Update this Item!',
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.ERROR
            });
            return true;

        }
    }

}

function syncMiscWorkid(inArf)
{
    storeARF.clearFilter();

    storeARF.each(function(stores){
        if(isMscWorkid(stores.data['workid']))
        {
           stores.data['totalPoArfAsfc'] = inArf;
        }

    })

}

function addToARF(idBoq)
{
    var gridboq = Ext.getCmp('boq3-grid').getSelectionModel().getSelections();
	ori = store.getAt(store.findExact('id', gridboq[0].data['id']));
//    console.log(ori);
	if (ori != undefined)
	{
		Ext.getCmp('save-to-arf').setText('Add to ARF List(Cart)');
		Ext.getCmp('arf-workid').setValue(ori.data['workid']);
		Ext.getCmp('kode_brg_text').setValue(ori.data['kode_brg']);
		Ext.getCmp('nama_brg_text').setValue(ori.data['nama_brg']);
		Ext.getCmp('arf-val').setValue(ori.data['val_kode']);
		Ext.getCmp('uom_text').setValue(ori.data['uom']);
        Ext.getCmp('net-act').setValue(ori.data['cfs_kode']);
		Ext.getCmp('price_text').setValue(CommaFormatted(ori.data['price']));
		Ext.getCmp('kode_brg_text').disable();
        Ext.getCmp('totalarf_text').disable();
		Ext.getCmp('arf-qty').setValue('');

		var piece = ori.data['uom'];
		var valuta = ori.data['val_kode'];

//		Ext.getCmp('save-to-arf').disable();
		Ext.getCmp('arf-grid').disable();
		Ext.getCmp('boq3-grid').disable();
		Ext.getCmp('cancel-to-arf').setText('Cancel Add');
//		Ext.getCmp('cancel-to-arf').enable();

		if (!isMscWorkid(ori.data['workid']))
		{
			var boq3total = parseFloat(ori.data['totalPrice']);
	    	var inARF = parseFloat(ori.data['totalPoArfAsfc']);
	    	var balance = boq3total - inARF;
			document.getElementById('a-qty').innerHTML = '<table class="tablebox"><tr><td>BOQ3 Total :</td><td align="right"><b id="boq3">' + CommaFormatted(boq3total.toFixed(4)) + ' '  + '</b></td></tr><tr><td>In ARF + PO Total :</td><td align:"right"><b id="inarf">' + CommaFormatted(inARF.toFixed(4)) + ' ' + '</b></td></tr><tr><td>Balance :</td><td align="right"><b id="balance" style="color:#FF3F7D">' + CommaFormatted(balance.toFixed(4)) + ' ' +  '</b></td></tr><tr><td>New Balance :</td><td align="right"><b id="newbalance" style="color:#FF3F7D">0</b></td></tr></table>';
		}
		else
		{

			Ext.getCmp('kode_brg_text').setValue('');
			Ext.getCmp('nama_brg_text').setValue('');
			Ext.getCmp('price_text').setValue('');
			Ext.getCmp('kode_brg_text').enable();
            Ext.getCmp('totalarf_text').disable();
			Ext.getCmp('price_text').enable();
	    	var boq3total = parseFloat(ori.data['totalPrice']);
	    	var inARF = parseFloat(ori.data['totalPoArfAsfc']);
	    	var balance = boq3total - inARF;


			document.getElementById('a-qty').innerHTML = '<table class="tablebox"><tr><td>BOQ3 Total :</td><td align="right"><b id="boq3">' + CommaFormatted(boq3total.toFixed(4)) + ' '  + '</b></td></tr><tr><td>In ARF  + PO Total :</td><td align:"right"><b id="inarf">' + CommaFormatted(inARF.toFixed(4)) + ' ' + '</b></td></tr><tr><td>Balance :</td><td align="right"><b id="balance" style="color:#FF3F7D">' + CommaFormatted(balance.toFixed(4)) + ' ' +  '</b></td></tr><tr><td>New Balance :</td><td align="right"><b id="newbalance" style="color:#FF3F7D">0</b></td></tr></table>';
		}
	}
	else
	{
		Ext.MessageBox.show({
	           title: 'Error',
	           msg: 'Error while fetching data...',
	           buttons: Ext.MessageBox.OK,
	           icon: Ext.MessageBox.ERROR
	       });
  		return false;
	}
}

function insertToARF()
{
if(cekTotal())
{
        if(checkList())
        {
             clearARFForm();
             clearButton();
             refreshGrid();
      
        }
        else
        {

                var qty = Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,'');
                
                var gridarf = Ext.getCmp('arf-grid').getSelectionModel().getSelections();

                if (gridarf[0] != undefined)
                {
                    var oriarf = storeARF.getAt(storeARF.findExact('id', gridarf[0].data['id']));
                }

                var netAct  = Ext.getCmp('net-act').getValue();
                if ( netAct == '')
                {
                    Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please Select Net Act!',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                       });
                    return false;
                }

                var kode_brg = Ext.getCmp('kode_brg_text').getValue();
                if (kode_brg == undefined || kode_brg == '')
                {
                    Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please Select Product!',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                       });
                    return false;
                }
                var requesterUID = Ext.getCmp('user_selector').getUid();
                var requesterName = Ext.getCmp('user_selector').getUserName();
                if (requesterUID == undefined || requesterUID == '')
                {
                    Ext.MessageBox.show({
                        title: 'Error',
                        msg: 'Please choose Requester for this Item!',
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.ERROR
                    });
                    return false;
                }
                var nama_brg = Ext.getCmp('nama_brg_text').getValue(),
                    cari = ['business','trip','allowance','bt'];
                var cek = cari.has(nama_brg);
                if (cek)
                {
                    Ext.MessageBox.show({
                        title: 'Information',
                        msg: 'Please choose (Business Trip/Allowance ARF) on checkbox above if this ARF contain Business Trip/Allowance items.',
                        buttons: Ext.MessageBox.OK,
                        icon: Ext.MessageBox.INFO
                    });
                }
            if (oriarf != undefined)
            {
//                if (oriarf.data['status'] == undefined || oriarf.data['status'] == '')
//                {
//                    Ext.MessageBox.show({
//                           title: 'Error',
//                           msg: 'Please use Edit for updating this Work ID!',
//                           buttons: Ext.MessageBox.OK,
//                           icon: Ext.MessageBox.ERROR
//                       });
//                    return false;
//                }
              //   sini

                    if (oriarf.data['status'] == 'edit')
                    {

                        if (!isMscWorkid(oriarf.data['workid']))
                        {

                            var inpoarfasfc = parseFloat(oriarf.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,''));
                            var priceArf   =parseFloat(Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''));
                            var totalARF   =parseFloat(Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,''));

                            var ket = Ext.getCmp('ket-arf').getValue().toString().replace(/\"|\'|\n|\r|\t/g,'');
                            var netAct = Ext.getCmp('net-act').getValue();
                            
                            oriarf.data['qty'] = qty;
                             oriarf.data['priceArf'] = priceArf;
                             oriarf.data['totalARF'] = totalARF;
                            oriarf.data['ket'] = ket;
                            oriarf.data['net_act'] = netAct;
                            oriarf.data['requester'] = requesterUID;
                            oriarf.data['requesterName'] = requesterName;

                            qty = parseFloat(qty);
                            oriarf.data['totalPoArfAsfc'] = inpoarfasfc+totalARF ;
                            addEditedBoq();

                            oriarf.data['status'] = '';
                        }
                        else
                        {
                            var inpoarfasfc = parseFloat(oriarf.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,''));
                            var priceArf   =parseFloat(Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''));
                            var totalARF   =parseFloat(Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,''));


                            var kode_brg = Ext.getCmp('kode_brg_text').getValue();
                            var nama_brg = Ext.getCmp('nama_brg_text').getValue();
                            var net_act = Ext.getCmp('net-act').getValue();
                            var ket = Ext.getCmp('ket-arf').getValue().toString().replace(/\"|\'|\n|\r|\t/g,'');
                            var netAct = Ext.getCmp('net-act').getValue();

                            oriarf.data['kode_brg'] = kode_brg;
                            oriarf.data['nama_brg'] = nama_brg;
                            oriarf.data['net_act'] = net_act;
                            oriarf.data['ket'] = ket;
                            oriarf.data['qty'] = qty;
                            oriarf.data['priceArf'] = priceArf;
                            oriarf.data['totalARF'] = totalARF;
                            oriarf.data['net_act'] = netAct;
                            oriarf.data['requester'] = requesterUID;
                            oriarf.data['requesterName'] = requesterName;

                            qty = parseFloat(qty);
                            oriarf.data['totalPoArfAsfc'] = inpoarfasfc+ totalARF;
                            syncMiscWorkid(oriarf.data['totalPoArfAsfc']);
                            addEditedBoq();

                            oriarf.data['status'] = '';

                        }
                }
                 clearARFForm();
                 clearButton();
                 refreshGrid();

            }
            else
            {

                var newTotalARF = Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,'');
                 if (!isMscWorkid(ori.data['workid']))
                {
                    
                     var inpoarfasfc = parseFloat(ori.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,''));
                     var newinpoarfasfc = inpoarfasfc + parseFloat(newTotalARF);
                    
                     var e = new arflist({
                            workid: ori.data['workid'],
                            workname: ori.data['workname'],
//						                    trano: trano,
                            prj_kode: Ext.getCmp('prj_kode_text').getValue(),
                            sit_kode: Ext.getCmp('sit_kode_text').getValue(),
                            prj_nama: Ext.getCmp('prj_nama_text').getValue(),
                            sit_nama: Ext.getCmp('sit_nama_text').getValue(),
                            kode_brg: ori.data['kode_brg'],
                            nama_brg: ori.data['nama_brg'],
                            val_kode: ori.data['val_kode'],
                            requester: requesterUID,
                             requesterName: requesterName,
                             val_kode: ori.data['val_kode'],
                            uom: ori.data['uom'],
                            id: getNewID(),
                            qty:  Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,''),
                            priceArf: Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''),
                            totalARF: newTotalARF,
                            totalBOQ3: ori.data['totalPrice'],
                            totalPO: ori.data['totalPO'],
                            totalASFCancel: ori.data['totalASFCancel'],
                            totalPoArfAsfc: newinpoarfasfc,
                            net_act: Ext.getCmp('net-act').getValue(),
                            pic : Ext.getCmp('pic_kode_text').getValue(),
                            ket: Ext.getCmp('ket-arf').getValue().toString().replace(/\"|\'|\n|\r|\t/g,'')
                        });

                    ori.data['totalPoArfAsfc'] = newinpoarfasfc;

                }
                else
                {
                     var inpoarfasfc = parseFloat(ori.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,''));
                     var newinpoarfasfc = inpoarfasfc + parseFloat(newTotalARF);

                    var e = new arflist({
                        workid: ori.data['workid'],
                        workname: ori.data['workname'],
//					                    trano: trano,
                        prj_kode: Ext.getCmp('prj_kode_text').getValue(),
                        sit_kode: Ext.getCmp('sit_kode_text').getValue(),
                        prj_nama: Ext.getCmp('prj_nama_text').getValue(),
                        sit_nama: Ext.getCmp('sit_nama_text').getValue(),
                        kode_brg: Ext.getCmp('kode_brg_text').getValue(),
                        nama_brg: Ext.getCmp('nama_brg_text').getValue(),
                        val_kode: ori.data['val_kode'],
                        uom: Ext.getCmp('uom_text').getValue(),
                        requester: requesterUID,
                        requesterName: requesterName,
                        val_kode: ori.data['val_kode'],
                        id: getNewID(),
                         qty:  Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,''),
                         priceArf: Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''),
                         totalARF: newTotalARF,
                         totalBOQ3: ori.data['totalPrice'],
                         totalPO: ori.data['totalPO'],
                        totalASFCancel: ori.data['totalASFCancel'],
                        totalPoArfAsfc: newinpoarfasfc,
                        net_act: Ext.getCmp('net-act').getValue(),
                        ket: Ext.getCmp('ket-arf').getValue().toString().replace(/\"|\'|\n|\r|\t/g,'')
                    });

                    ori.data['totalPoArfAsfc'] = newinpoarfasfc;
                    syncMiscWorkid(ori.data['totalPoArfAsfc']);
                 
                }
                 storeARF.add(e);
                 ori = undefined;
                 e = undefined;
                 clearARFForm();
                 clearButton();
                 refreshGrid();
            }
    }
}
}

function delToARF(idBoq,workid)
{
	Ext.MessageBox.confirm('Confirm', 'Are you sure want to delete this?', function(btn){
		if (btn == 'yes')
		{
            var gridarf = Ext.getCmp('arf-grid').getSelectionModel().getSelections();
            var b = storeARF.getAt(storeARF.findExact('id', gridarf[0].data['id']));

				if (b != undefined)
				{
                    b.data['status'] = 'delete';
                    
					var totalarf = parseFloat(b.data['totalARF'].toString().replace(/\$|\,/g,''));
					var inARF = parseFloat(b.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,''));
					b.data['totalPoArfAsfc'] = inARF - totalarf;
                    syncMiscWorkid(b.data['totalPoArfAsfc']);
                    addEditedBoq();
					filterDelete();
//                    storeARF.reload();
					Ext.getCmp('arf-grid').getView().refresh();
					Ext.getCmp('boq3-grid').getView().refresh();
                }

			clearARFForm();
			clearButton();
		}

	});
}

function editToARF(idBoq)
{
	Ext.getCmp('save-to-arf').setText('Update to ARF List(Cart)');
    var gridarf = Ext.getCmp('arf-grid').getSelectionModel().getSelections();
    var oriarf = storeARF.getAt(storeARF.findExact('id', gridarf[0].data['id']));
   
//    ori = store.getAt(store.findExact('id', oriarf.data['id']));
   

	Ext.getCmp('arf-grid').disable();
	Ext.getCmp('boq3-grid').disable();
	Ext.getCmp('cancel-to-arf').setText('Cancel Edit');
//	Ext.getCmp('cancel-to-arf').enable();
	if (oriarf != undefined)
	{
   		oriarf.data['status'] = 'edit';
        
		Ext.getCmp('arf-workid').setValue(oriarf.data['workid']);
		Ext.getCmp('arf-qty').setValue(oriarf.data['qty']);
        Ext.getCmp('price_text').setValue(oriarf.data['priceArf']);
        Ext.getCmp('totalarf_text').setValue(oriarf.data['totalARF']);
		Ext.getCmp('ket-arf').setValue(oriarf.data['ket']);
		Ext.getCmp('net-act').setValue(oriarf.data['net_act']);
		Ext.getCmp('kode_brg_text').setValue(oriarf.data['kode_brg']);
		Ext.getCmp('nama_brg_text').setValue(oriarf.data['nama_brg']);
		Ext.getCmp('uom_text').setValue(oriarf.data['uom']);
		Ext.getCmp('arf-val').setValue(oriarf.data['val_kode']);

        Ext.getCmp('requester_text').setValue(oriarf.data['requesterName']);
        Ext.getCmp('user_selector').setUid(oriarf.data['requester']);
        Ext.getCmp('user_selector').setUserName(oriarf.data['requesterName']);
        Ext.getCmp('price_text').enable();
//		Ext.getCmp('save-to-arf').disable();

		var newTotalARF = parseFloat(oriarf.data['totalARF'].toString().replace(/\$|\,/g,''));

    	var oldPOARFASFC = parseFloat(oriarf.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,''));
      
        oriarf.data['totalPoArfAsfc'] = oldPOARFASFC - newTotalARF;
        addEditedBoq();


    if (!isMscWorkid(oriarf.data['workid']))
    {
      
        var boq3total = parseFloat(oriarf.data['totalBOQ3']);
        var inARF = parseFloat(oriarf.data['totalPoArfAsfc']);
        var inARF = parseFloat(oriarf.data['totalPoArfAsfc']);
        var balance = boq3total - inARF;
        var newbalance   = balance - newTotalARF;
        document.getElementById('a-qty').innerHTML ='<table class="tablebox"><tr><td>BOQ3 Total :</td><td align="right"><b id="boq3">' + CommaFormatted(boq3total.toFixed(4)) + ' '  + '</b></td></tr><tr><td>In ARF + PO Total :</td><td align:"right"><b id="inarf">' + CommaFormatted(inARF.toFixed(4)) + ' ' +  '</b></td></tr><tr><td>Balance :</td><td align="right"><b id="balance" style="color:#FF3F7D">' + CommaFormatted(balance.toFixed(4)) + ' '  + '</b></td></tr><tr><td>New Balance :</td><td align="right"><b id="newbalance" style="color:#FF3F7D">' + CommaFormatted(newbalance.toFixed(4)) + '</b></td></tr></table>';
    }
    else
    {
         var boq3total = parseFloat(oriarf.data['totalBOQ3']);
        var inARF = parseFloat(oriarf.data['totalPoArfAsfc']);
        var balance = boq3total - inARF;
        var newbalance   = balance - newTotalARF ;
        document.getElementById('a-qty').innerHTML ='<table class="tablebox"><tr><td>BOQ3 Total :</td><td align="right"><b id="boq3">' + CommaFormatted(boq3total.toFixed(4)) + ' '  + '</b></td></tr><tr><td>In ARF + PO Total :</td><td align:"right"><b id="inarf">' + CommaFormatted(inARF.toFixed(4)) + ' ' +  '</b></td></tr><tr><td>Balance :</td><td align="right"><b id="balance" style="color:#FF3F7D">' + CommaFormatted(balance.toFixed(4)) + ' '  + '</b></td></tr><tr><td>New Balance :</td><td align="right"><b id="newbalance" style="color:#FF3F7D">' + CommaFormatted(newbalance.toFixed(4)) + '</b></td></tr></table>';
        Ext.getCmp('price_text').enable();
        Ext.getCmp('kode_brg_text').enable();

        Ext.getCmp('totalarf_text').disable();

    }

	}
}

function init()
{
	Ext.getCmp('trano_text').setValue('<?php echo $this->trano; ?>');
//	Ext.getCmp('tgl_text').setValue('<?php echo $this->tgl; ?>');
	Ext.getCmp('kode_brg_text').disable();
//	Ext.getCmp('price_text').disable();
    Ext.getCmp('pic_kode_text').setValue('<?php echo $this->uid; ?>');
    Ext.getCmp('pic_nama_text').setValue('<?php echo $this->nama; ?>');
    Ext.getCmp('val_kode_text').setValue('<?php echo $this->val_kode; ?>');
    Ext.getCmp('mgr_kode_text').setValue('<?php echo $this->request; ?>');
    Ext.getCmp('fin_kode_text').setValue('<?php echo $this->orangfinance; ?>');
    getValuta();
    getLogin();
    getFinance();
//	Ext.getCmp('tgl_text').disable();
	Ext.Ajax.request({
		scope: this,
		results: 0,
        url: '/default/home/whoami',
        method:'POST',
        success: function(result, request){
        	   var returnData = Ext.util.JSON.decode(result.responseText);
//            console.log(returnData);
				if(returnData.user.id != '') {
//					Ext.getCmp('assign-to').setValue(returnData.user.uid);
				}
			}
    });
}

function getLastARF()
{
	Ext.Ajax.request({
        url: '/procurement/procurement/getlastarf',
        method:'POST',
        success: function(result, request){
        	   var returnData = Ext.util.JSON.decode(result.responseText);

				if (returnData.arf != undefined && returnData.arf != '')
				{
					Ext.getCmp('trano_text').setValue('ARF01-' + returnData.arf);
				}
			}
		,
    	failure:function( action){
      	if(action.failureType == 'server'){
          obj = Ext.util.JSON.decode(action.response.responseText);
          Ext.Msg.alert('Error!', obj.errors.reason);
      	}
      	}
    });
};

function hitungTotalArf()
{
       if (Ext.getCmp('arf-qty').getValue() != '' && Ext.getCmp('price_text').getValue() != '')
        {
            var a = parseFloat(Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,''));
            var b = parseFloat(Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''));

            //Ext.getCmp('total_price_text').setValue( CommaFormatted((a*b).toFixed(2)));
            Ext.getCmp('totalarf_text').setValue(CommaFormatted(a*b));
            parseFloat(Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,''));
            Ext.getCmp('totalarf_text').setValue(CommaFormatted(a*b));
            //													Ext.getCmp('save-po').enable();
        }
    else
       Ext.getCmp('totalarf_text').setValue('');

}


//end our own function

var textField =  new Ext.form.TextField();


var userColumns =  [
    new Ext.grid.RowNumberer(),
    {header: "",width: 30, dataIndex: 'id',renderer: function (v,p,r) {
        if (!isMscWorkid(r.data['workid']))
        {
            var percent = 0;
             percent = (parseFloat(r.data['totalPoArfAsfc']) /parseFloat(r.data['totalPrice'])) * 100;
        }
        else
        {
            var percent = 0;
             percent = (parseFloat(r.data['totalPoArfAsfc']) /parseFloat(r.data['totalPrice'])) * 100;

        }

    	if (percent < 100)
			return '<a href="#" onclick="addToARF(' + v + ');"><img src="/images/g_rec_add.png"></a>';
    	else
    	{
    		p.attr ='ext:qtip="This item (' + r.data['kode_brg'] + ') must be created by AFE"';
    		return '<img src="/images/icons/fam/page_tag_red.gif">';
//    		return '<a href="#" onclick="addToAFE(' + v + ');"><img src="/images/icons/fam/page_tag_red.gif"></a>';
    	}
    }},
    {header: "Work Id", width: 55, sortable: true, dataIndex: 'workid'},
    {header: "Work Name", width: 150, sortable: true, dataIndex: 'workname'},
    {header: "Product Id", width: 65, sortable: true, dataIndex: 'kode_brg'},
    {header: "Description", width: 200, sortable: true, dataIndex: 'nama_brg'},
    {header: "Uom", width: 50, sortable: true, dataIndex: 'uom'},


//    {header: "Qty", width: 80, sortable: true, dataIndex: 'totalQtyARFPO',css:'text-align:right;',renderer: function (v,p,r) {
//        return CommaFormatted(v);
//    }
//    },
    {header: "Currency", width: 60, sortable: true, dataIndex: 'val_kode'},
    {header: "Total Price BoQ3", width: 80, sortable: true, dataIndex: 'totalPrice',css:'text-align:right;',renderer: function (v,p,r) {
        return CommaFormatted(v);
    }
    },
    {header: "Total Price ARF & PO", width: 80, sortable: true, dataIndex: 'totalPoArfAsfc',css:'text-align:right;',renderer: function (v,p,r) {
       
        return CommaFormatted(v);
    }
    },
    {header: "Progress", width: 100, renderer: function(v,p,r) {
        var percent = 0;
	        if  (parseFloat(r.data['totalPrice']) != 0)
	        {
	        	percent = (parseFloat(r.data['totalPoArfAsfc']) /parseFloat(r.data['totalPrice'])) * 100;
	        	if (percent > 100)
	            	percent = 100;
	        	percent = percent.toFixed(2);
				var warna = '#0a0';
	        	if (percent > 75)
	            	warna = '#FF3F7D';
	        	else if (percent > 50)
	            	warna = '#FFDA2F';
            }
		return '<div class="meter-wrap"><div class="meter-value" style="background-color: ' + warna + '; width: ' + percent + '%;"><div class="meter-text"><b>' + percent + '%</b></div></div></div>';
    } }

];


var userColumns2 =  [
                    new Ext.grid.RowNumberer(),
//                    {header: "",width: 60, dataIndex: 'id',css:'text-align:center;',renderer: function (v,p,r) {
//                		return '<a href="#" onclick="editToARF(' + v + ');"><img src="/images/g_rec_upd.png"></a>&nbsp;<a href="#" onclick="delToARF(' + v + ',\'' + r.data['workid'] + '\');"><img src="/images/g_rec_del.png"></a>';
//                    }},
                         {header: "Edit",width: 60, dataIndex: 'id',css:'text-align:center;',renderer: function (v,p,r) {
                		return '<a href="#" onclick="editToARF(' + v + ');"><img src="/images/g_rec_upd.png"></a>';
                    }},
                    {header: "Requester Name", width: 120, sortable: true, dataIndex: 'requesterName'},
                    {header: "Work Id", width: 55, sortable: true, dataIndex: 'workid'},
                    {header: "Work Name", width: 150, sortable: true, dataIndex: 'workname'},
                    {header: "Product Id", width: 65, sortable: true, dataIndex: 'kode_brg'},
                    {header: "Description", width: 200, sortable: true, dataIndex: 'nama_brg'},
                     {header: "Currency", width: 100, sortable: true, dataIndex: 'val_kode'},
                    {header: "Uom", width: 50, sortable: true, dataIndex: 'uom'},

                    {header: "Qty", width: 80, sortable: true,css:'text-align:right;', renderer: function (v,p,r) {
                //						if (r.data['val_kode'] == 'IDR')
                            return CommaFormatted(r.data['qty']);
                //						else
                //							return CommaFormatted(r.data['priceArf: ']);
                    }},
                    {header: "Price", width: 100, sortable: true,css:'text-align:right;', renderer: function (v,p,r) {
//						if (r.data['val_kode'] == 'IDR')
							return CommaFormatted(r.data['priceArf']);
//						else
//							return CommaFormatted(r.data['priceArf: ']);
                    }},
                    {header: "Total", width: 100, sortable: true,css:'text-align:right;', renderer: function (v,p,r) {
                        return CommaFormatted(r.data['totalARF']);
//						if (r.data['val_kode'] == 'IDR')
//							return CommaFormatted((parseFloat(r.data['hargaIDR']) * parseFloat(r.data['qty'])).toString());
//						else
//							return CommaFormatted((parseFloat(r.data['hargaUSD']) * parseFloat(r.data['qty'])).toString());
                    }},
                    {header: "Net Act", width: 100, sortable: true, dataIndex: 'net_act'},
                    {header: "Remark", width: 100, sortable: true, dataIndex: 'ket'},
                ];




var submitBoq3 = function (){

    var valuta = Ext.getCmp('val_kode_text').getValue();
	var prjKode = Ext.getCmp('prj_kode_text').getValue();
    var sitKode = Ext.getCmp('sit_kode_text').getValue();
//    var reQuester = Ext.getCmp('requester_text').getValue();
    var manager = Ext.getCmp('mgr_kode_text').getValue();

//    if (reQuester == '' )
//    {
//    	Ext.MessageBox.show({
//	           title: 'Error',
//	           msg: 'Please Select Requester Name !',
//	           buttons: Ext.MessageBox.OK,
//	           icon: Ext.MessageBox.ERROR
//	       });
//        return false;
//    }
//    if (manager == '' )
//    {
//    	Ext.MessageBox.show({
//	           title: 'Error',
//	           msg: 'Please Select Manager !',
//	           buttons: Ext.MessageBox.OK,
//	           icon: Ext.MessageBox.ERROR
//	       });
//        return false;
//    }

//    if (valuta == '' )
//    {
//    	Ext.MessageBox.show({
//	           title: 'Error',
//	           msg: 'Please Select Currency Code !',
//	           buttons: Ext.MessageBox.OK,
//	           icon: Ext.MessageBox.ERROR
//	       });
//        return false;
//    }

//    if (prjKode == '' || sitKode == '')
//    {
//    	Ext.MessageBox.show({
//	           title: 'Error',
//	           msg: 'Please Select Project/Site Code !',
//	           buttons: Ext.MessageBox.OK,
//	           icon: Ext.MessageBox.ERROR
//	       });
//        return false;
//    }
//    Ext.getCmp('tgl_text').disable();
    var offset = storeARF.getCount();
    var newUrl = '/default/home/getboq3arfsummary/arf/true/sumarf/true/prj_kode/' + prjKode + '/sit_kode/' + sitKode+'/offset/'+offset ;
    store.proxy.setUrl(newUrl);
    store.reload();
    var boq3Grid = Ext.getCmp('boq3-grid');
    boq3Grid.getStore().proxy.setUrl(newUrl);
//    boq3Grid.getStore().reload({params:{start: 0, limit: 100}});
    boq3Grid.getBottomToolbar().store.proxy.api.read['url'] = newUrl;
    boq3Grid.getBottomToolbar().store.proxy.url = newUrl;
    boq3Grid.getBottomToolbar().store.proxy.setUrl(newUrl);
//    console.log(boq3Grid.getBottomToolbar().store.proxy);


};



userForm = new Ext.FormPanel({
    renderTo: 'user-form',
    iconCls: 'silk-user',
    title: 'Edit Existing Advance Request Form (ARF)',
    frame: true,
    width: 750,
    labelAlign: 'left',
    items: [
            {
            layout:'column',
            items:[
                   {columnWidth:.335,
                    layout: 'form',
			         labelWidth: 120,
                	items: [
				            {fieldLabel: 'No Trans',
				             id: 'trano_text',
				             name:"trano",
				             disabled: true,
				             allowBlank: false,
				             xtype: 'textfield',
					         width: 120
				            },

//                            {
//                                fieldLabel : 'Requester Name',
//                                id : 'requester_text',
//                                xtype: 'textfield',
//                                disabled: false,
//
//                                width: 120
//                            },
                        {
                            fieldLabel : 'Name of Beneficiary',
                            id : 'penerima_text',
                            xtype: 'textfield',
                            disabled: false,

                            width: 120
                        },
                        {
                            fieldLabel : 'Bank Name ',
                            id : 'bank_text',
                            xtype: 'textfield',
                            disabled: false,

                            width: 120
                        },
                        {
                            fieldLabel : 'Bank Account Name ',
                            id : 'bankaccountname_text',
                            xtype: 'textfield',
                            disabled: false,

                            width: 120
                        },
                        {
                            fieldLabel : 'Bank Account Number ',
                            id : 'bankaccountno_text',
                            xtype: 'textfield',
                            disabled: false,

                            width: 120
                        },
                       {
                             fieldLabel : 'Origin Of Budget',
                             id:'arf_origin_text',
                             name:'arf-origin',
                             xtype:'combo',
                             store: new Ext.data.SimpleStore({
                                         fields:['nilai', 'ori']
                                                 ,data:[
                                                        ['Project','Project'],
                                                        ['OPEX','OPEX'],
                                                        ['CAPEX','CAPEX']
                                                    ]

                                             }),
                             valueField:'ori',
                             displayField:'nilai',
                             typeAhead: true,
                             mode: 'local',
                             triggerAction: 'all',
                             value: 'Project',
                             selectOnFocus:true,
                             forceSelection:false,
                             width: 70

                        }

                    ]    
                   },
                   {columnWidth:.270,
                    layout: 'form',
                    style: 'margin-left:10px;',
                    items: [

                        {fieldLabel: 'Project Code',
					             id:'prj_kode_text',
					             name:'prj_kode',
					             allowBlank: false,
					             xtype:"trigger",
                                 editable: false,
                            disabled : true,
                                                     triggerClass: 'teropong',
						     	 width: 80,
					             onTriggerClick:
					                  function ()
					                    {
//					                      projectPopUphandler();
					                    }
					             },

					            {fieldLabel: 'Site Code',
					             id:'sit_kode_text',
					             name:'sit_kode',
					             allowBlank: false,
					             xtype:"trigger",
                                 editable: false,
                                 disabled : true,
                                                     triggerClass: 'teropong',
						         width: 80,
					             onTriggerClick:
					                 function ()
					                    {
//					                	  if (Ext.getCmp('prj_kode_text').getValue() != '')
//					                      	sitePopUphandler();
					                    }
					            },
                                                {fieldLabel: 'Currency',id:'val_kode_text',name: 'val_kode', xtype: 'trigger',triggerClass: 'teropong',editable: false,disabled : true,
                             onTriggerClick: function(){
//                                 valutaPopUphandler();

                             },

                                 allowBlank: false,
                                 width: 80
                             },
                        {
                            fieldLabel : 'PIC Name',
                            id : 'pic_kode_text',
                            xtype: 'textfield',
                            disabled: true,

                            width: 80
                        },
                        {xtype:'trigger',fieldLabel: 'Manager Code',id:'mgr_kode_text',name: 'mgr_kode', triggerClass: 'teropong', editable: false,
                        onTriggerClick: function( ){
                            showManagerList();
                        },
                        editable: false,
                        allowBlank: false,
                        width: 80
                        },

                            {
                                fieldLabel : 'Finance Receiving Name',
                                id : 'fin_kode_text',
                                xtype: 'trigger',
                                triggerClass: 'teropong',
                                onTriggerClick: function( ){
                                    showUserList();
                                        },
                                        editable: false,
                                        allowBlank: false,
                                        width: 80

                            }


				            ]
                   },
                   {columnWidth:.270,
                	   style: 'text-align:left',
                       layout: 'form',
                       items: [
								{
								    id:'prj_nama_text',
								    name: 'prj_nama',
								    hideLabel: true,
								    allowBlank: false,
						            xtype: 'textfield',
								    disabled:true,
                                    width: 175
								   },
							   {
						             id:'sit_nama_text',
						             name: 'sit_nama',
						             hideLabel: true,
						             allowBlank: false,
						             disabled: true,
						             xtype: 'textfield',
                                     width: 175
					            },
                           {
                                 id:'val_nama_text',
                                 name: 'val_nama',
                                 hideLabel: true,
                                 allowBlank: false,
                                 disabled: true,
                                 xtype: 'textfield',
                                width: 175

                            },

                           {
                                 id:'pic_nama_text',
                                 name: 'pic_nama',
                                 hideLabel: true,
                                 allowBlank: false,
                                 disabled: true,
                                 xtype: 'textfield',
                                 width: 175
                            },
                           {

                                    id : 'mgr_nama_text',
                                    xtype: 'textfield',
                                    hideLabel: true,
                                    disabled: true,
                                    width: 175
                                } ,
                           {

                                            id : 'fin_nama_text',
                                            xtype: 'textfield',
                                            hideLabel: true,
                                            disabled: true,
                                            width: 175
                                        }

                               ]
                   }]
            },
            {
                fieldLabel: 'Internal Notes',
                id: 'ketin_text',
                xtype:'textarea',

                width: 250,
                height: 80
            },
            {
                xtype:'checkbox',
                id:'arf_type',
                fieldLabel:'Business Trip/Allowance ARF',
                trueText: '1',
                falseText: '0'
            }
        ],
	buttons: [
        {
          text: 'Submit',
          id: 'boq3-submit',
            disabled: true,
          iconCls: 'silk-add',
          handler: function() {
      		submitBoq3();

    	},
          scope: this
        },
        {
            text: 'Reset',
            disabled: true,
            handler: function(btn, ev){
                var teks = userForm.findByType('textfield');
                Ext.each(teks, function(t, index) {
                    t.setValue('');
                });

				store.removeAll();
				storeARF.removeAll();
				Ext.getCmp('boq3-grid').getView().refresh();
				Ext.getCmp('arf-grid').getView().refresh();
                init();
            },
            scope: this
         }, {
             text: 'Cancel',
            disabled: true,
             handler: function(btn, ev){
 	        	myPanel = Ext.getCmp('abs-budget-panel');
 	    	    myPanel.body.load({
 	    	        url: '/procurement/procurement/arf',
 	    	        scripts : true
 	            });
             },
             scope: this
         } ]
    ,

    onCreate : function(btn, ev) {
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid");
            return false;
        }

        var prjKode = Ext.getCmp('prj_kode_text').getValue();
        var sitKode = Ext.getCmp('sit_kode_text').getValue();
        var workId = Ext.getCmp('workid_text').getValue();
        var kodeBrg = Ext.getCmp('kode_brg_text').getValue();

        if ((prjKode == '' || prjKode == undefined) && (sitKode == '' || sitKode == undefined) && (workId =='' || workId == undefined) && (kodeBrg=='' || kodeBrg==undefined))
        {
            Ext.msg.alert('Error!', 'Please fill Project Code & Site Code');
            return false;
        }

        store2.proxy.setApi('read',  '/procurement/procurement/list/type/arfd/prj_kode/' + prjKode + '/sit_kode/' + sitKode + '/workid/' + workId + '/kode_brg/' + kodeBrg);
        store2.reload();
        Ext.getCmp('boq3-grid').getStore().loadData(store);
//      this.fireEvent('create', this, this.getForm().getValues());
//      this.getForm().reset();
    }

});



userForm2 = new Ext.FormPanel({
    renderTo: 'user-form2',
    id: 'arf-form',
    iconCls: 'silk-user',
    labelAlign: 'right',
    title: 'Detail Advance Request Form(ARF)',
    frame: true,
    width: 500,
    labelAlign: 'left',
    style: 'margin-top: 10px',
    items: [
            {
                fieldLabel : 'Requester Name',
                id : 'user_selector',
                xtype: 'userselector',
                ShowName: false,
                UserSelectid: 'requester_text',
                width: 200
            },
            {
            layout:'column',
            items:[
                   {columnWidth:.390,
                    layout: 'form',
                	items: [
                	        {
                    	        fieldLabel: 'Work ID',
                    	        id: 'arf-workid',
                    	        xtype:'textfield',
                        	    disabled: true,
                                style:"font-weight:bold;color:black",
                        	    width: 55
                	        }

                	       ]
                   },
                  ]
            },
            {
                xtype: 'itemselector',
                fieldLabel: 'Product ID',
                id: 'item-select',
                Selectid: 'kode_brg_text',
                Nameid: 'nama_brg_text',
                ShowName: true,
                SelectWidth: 90,
                prjKodeField: 'prj_kode_text'
            },

//            {
//            	fieldLabel:'Product Name',
//			    id:'nama_brg_text',
//			    name: 'nama_brg',
//			    allowBlank: false,
//	            xtype: 'textfield',
//                style:"font-weight:bold;color:black",
//		        width: 315,
//			    disabled:true
//		    },
        {
        layout:'column',
        items:[
            {columnWidth:.6,
                layout: 'form',
                labelWidth: 80,
                    items: [
                     {
                         layout:'column',
                         items:[
                                {columnWidth:.71,
                                 labelWidth:100,
                                 layout: 'form',
                                 items: [
                                            new Ext.ux.customRendererField({
                                             priceDelemiter:',',
                                             fieldLabel: 'Qty Request',
                                             xtype:'textfield',
                                             id: 'arf-qty',
                                             allowBlank : false,
                                             width: 100,
                                             style:"text-align:right",
                                             enableKeyEvents: true,
                                            listeners: {

                                             'keyup' : function (t,e) {
                                                 if (!isNaN(t.getValue()) && !isNaN(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,'')))
                                                 {
                                                             hitungTotalArf();
                                                            var newPrice = Ext.getCmp('price_text').getValue().replace(/\$|\,/g,'');

                                                             var boq3 = document.getElementById('boq3').innerHTML;
                                                             var inarf = document.getElementById('inarf').innerHTML;

                                                             inarf = parseFloat(inarf.toString().replace(/\$|\,/g,''));
                                                             boq3 = parseFloat(boq3.toString().replace(/\$|\,/g,''));
                                                             var unitQty = parseFloat(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,''));
                                                             var newBalance = parseFloat(inarf) + (parseFloat(newPrice) * parseFloat(unitQty));

                                                             temp = boq3 - newBalance;
                                                             document.getElementById('newbalance').innerHTML = CommaFormatted(temp.toFixed(2)) + ' ' + Ext.getCmp('arf-val').getValue();

                                                 }
                                            }
                                        }

                                     } )
                                 ]
//                                         })]
                                },
                                {columnWidth:.110,
                                     layout: 'form',
                                     items: [
                                                {
                                                     hideLabel: true,
                                                     id: 'uom_text',
                                                     xtype:'textfield',
                                                     style:"font-weight:bold;color:black",
                                                     disabled: true,
                                                     width: 30
                                                 }
                                             ]
                                }
                            ]
                     },
                     {
                         layout:'column',
                         items:[
                                {columnWidth:.71,
                                 labelWidth:100,
                                 layout: 'form',
                                 items: [
                                     new Ext.ux.customRendererField({
                                         priceDelemiter:',',
                                         fieldLabel:'Unit Price',
                                         id:'price_text',
                                         name: 'price',
                                         allowBlank: false,
//                                         width:55,
                                         xtype: 'textfield',
                                         style:"text-align:right",
                                         enableKeyEvents: true,
                                         listeners: {

                                             'keyup' : function (t,e) {
                                                 if (!isNaN(t.getValue()) && !isNaN(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,'')))
                                                 {
                                                             hitungTotalArf();
                                                            var newPrice = Ext.getCmp('price_text').getValue().replace(/\$|\,/g,'');

                                                             var boq3 = document.getElementById('boq3').innerHTML;
                                                             var inarf = document.getElementById('inarf').innerHTML;

                                                             inarf = parseFloat(inarf.toString().replace(/\$|\,/g,''));
                                                             boq3 = parseFloat(boq3.toString().replace(/\$|\,/g,''));
                                                             var unitQty = parseFloat(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,''));
                                                             var newBalance = parseFloat(inarf) + (parseFloat(newPrice) * parseFloat(unitQty));

                                                             temp = boq3 - newBalance;
                                                             document.getElementById('newbalance').innerHTML = CommaFormatted(temp.toFixed(2)) + ' ' + Ext.getCmp('arf-val').getValue();

                                                 }
                                            }
                                        },
                                         width: 100

                                     } )
                                 ]
                                },
                                 {columnWidth:.170,
                                     layout: 'form',
                                     items: [
                                                {
                                                     hideLabel: true,
                                                     id: 'arf-val',
                                                     xtype:'textfield',
                                                    style:"font-weight:bold;color:black",
                                                     disabled: true,
                                                     width: 40
                                                 }
                                             ]
                                }
                             ]
                     }

                    ]
            }
                ]
        },
        {
            fieldLabel: 'Total',
            id: 'totalarf_text',
            xtype:'textfield',
            style:"text-align:right;font-weight:bold;color:black",
            width: 130,
            disabled: true
        },

        {
            fieldLabel: 'Net Act',
            id: 'net-act',
            xtype:'textfield',
            width: 130
        },
            {
    	        fieldLabel: 'Remark',
    	        id: 'ket-arf',
    	        xtype:'textfield',
        	    width: 315
	        }

            ],
       buttons: [{
			         text: 'Add to ARF List(Cart)',
			         id: 'save-to-arf',
			         iconCls: 'icon-add',

			         handler: function(btn, ev) {
	         			insertToARF();
				       },
			         scope: this
			         },
			         {
				         text: 'Cancel Add',
				         id: 'cancel-to-arf',
				         iconCls: 'icon-cancel',
				         handler: function(btn, ev) {

				         if (btn.text == 'Cancel Edit')
				         {
					        var gridarf = Ext.getCmp('arf-grid').getSelectionModel().getSelections();
                            var oriarf = storeARF.getAt(storeARF.findExact('id', gridarf[0].data['id']));
//				        	 	var b = store.getAt(store.findExact('id', ori.data['id']));
                            if (oriarf != undefined)
                            {
									oriarf.data['totalPoArfAsfc'] = parseFloat(oriarf.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,'')) + parseFloat(oriarf.data['totalARF'].toString().replace(/\$|\,/g,''));
									oriarf.data['status'] == '';
                                    addEditedBoq();
                            }

				         }
							clearARFForm();
							refreshGrid();
							clearButton();
							oriarf = undefined;
					        ori = undefined;
			         	},
				         scope: this
			         }

       			]
});


userGrid = Ext.extend(Ext.grid.GridPanel, {
    renderTo: 'user-grid',
    iconCls: 'silk-grid',
    id: 'boq3-grid',
    frame: true,
    title: 'BOQ3 Detail',
    height: 250,
    width: 750,
    stateful: false,
    style: 'margin-top: 10px',
//    listeners: {
//    	'rowclick' : function(g, rowIndex, e){
//			alert(rowIndex);
//		}
//	},
    initComponent : function() {

        this.buttons = this.buildUI();

        userGrid.superclass.initComponent.call(this);
    },

    buildUI : function() {
//        return [
//           {
//           text: 'Save',
//           iconCls: 'icon-save',
//           handler: this.onSave,
//           scope: this
//           }
//               ];
    },

    onSave : function(btn, ev) {
       //this.store.save();
        var json = '';
    	this.store.each(function(store){
    	json += Ext.util.JSON.encode(store.data) + ',';
    	});
    	json = json.substring(0, json.length - 1);
    	params = {posts:[json]};
    	Ext.Ajax.request({
            url: '/procurement/procurement/insertpr',
            method:'POST',
            success: function(resp){
    		Ext.Msg.alert('Success', 'Data has been saved!');
    		isEdited = false;
            },
        	failure:function( action){
          	if(action.failureType == 'server'){
              obj = Ext.util.JSON.decode(action.response.responseText);
              Ext.Msg.alert('Error!', obj.errors.reason);
          	}else{
              Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
          	}
          	},
            params: params
        });
    }
});

userGrid2 = Ext.extend(Ext.grid.GridPanel, {
    renderTo: 'user-grid2',
    iconCls: 'silk-grid',
    id: 'pr-grid',
    frame: true,
    title: 'PR List(Cart)',
    height: 250,
    width: 750,
    stateful: false,
    style: 'margin-top: 10px',
    initComponent : function() {

        this.buttons = this.buildUI();

        userGrid.superclass.initComponent.call(this);
    },

    buildUI : function() {
//        return [
//           {
//           text: 'Save',
//           iconCls: 'icon-save',
//           handler: this.onSave,
//           scope: this
//           }
//               ];
    },

    onSave : function(btn, ev) {
       //this.store.save();
        var json = '';
    	this.store.each(function(store){
    	json += Ext.util.JSON.encode(store.data) + ',';
    	});
    	json = json.substring(0, json.length - 1);
    	var params = {posts:[json]};
    	Ext.Ajax.request({
            url: '/procurement/procurement/insertpr',
            method:'POST',
            success: function(resp){
                Ext.Msg.alert('Success', 'Data has been saved!');
                isEdited = false;
            },
        	failure:function( action){
          	if(action.failureType == 'server'){
              obj = Ext.util.JSON.decode(action.response.responseText);
              Ext.Msg.alert('Error!', obj.errors.reason);
          	}else{
              Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
          	}
          	},
            params: params
        });
    }
});



var storeBOQ3 = new Ext.data.Store({
    reader: new Ext.data.JsonReader({fields: boq3list}),
    listeners: {
		'add':function(t,r,o)
		{
            var myTrano = r[0].data['trano'];

            var myWork = r[0].data['workid'];
            var myBrg = r[0].data['kode_brg'];
            storeARF.each(function(stores)
                {
                    if(stores.data['boq3_number'] = myTrano && stores.data['workid'] == myWork && stores.data['kode_brg'] == myBrg)
                    {
                        var arf = storeARF.getAt(storeARF.findExact('id',stores.data['id']));
                        if (arf != undefined)
                        {
                            arf.data['id'] = r[0].data['id'];
                            r[0].data['totalARF'] = parseFloat(r[0].data['totalARF']) + parseFloat(arf.data['qty']);
                        }
                        arf = undefined;
                    }
                }
            )


		}
    }
});

//** Number **//

//var store3 = new Ext.data.Store({
//    id: 'user3',
//    proxy: proxy3,
//    reader: reader2,
//     listeners: {
//		   'load' : function(stores,records,options) {
//                       var tranoGet = this.getAt(0).data.trano;
//                        Ext.getCmp('trano_text').setValue(tranoGet);
//
//                   }
//     }
//});





// all exception events





var getDetail =
{
	ARF: function (workid,kode_brg)
	{
		var prjKode = Ext.getCmp('prj_kode_text').getValue();
		var sitKode = Ext.getCmp('sit_kode_text').getValue();
		Ext.Ajax.request({
			scope: this,
			results: 0,
	        url: '/default/home/getbarangdetail/type/ARF/prj_kode/' + prjKode + '/sit_kode/' + sitKode + '/workid/' + workid + '/kode_brg/' + kode_brg,
	        method:'POST',
	        success: function(result, request){
	        	   var returnData = Ext.util.JSON.decode(result.responseText);
					if( returnData.success) {
						this.results = returnData.qty;
					}
				}
			,
	    	failure:function( action){
	      	if(action.failureType == 'server'){
	          obj = Ext.util.JSON.decode(action.response.responseText);
	          Ext.Msg.alert('Error!', obj.errors.reason);
	      	}
	      	}
	    });

	}
};


userGrid2 = Ext.extend(Ext.grid.GridPanel, {
    renderTo: 'user-grid2',
    iconCls: 'silk-grid',
    id: 'arf-grid',
    frame: true,
    title: 'ARF List(Cart)',
    height: 250,
    width: 750,
    stateful: false,
    style: 'margin-top: 10px',
    initComponent : function() {

        this.buttons = this.buildUI();

        userGrid.superclass.initComponent.call(this);
    },

    buildUI : function() {
//        return [
//           {
//           text: 'Save',
//           iconCls: 'icon-save',
//           handler: this.onSave,
//           scope: this
//           }
//               ];
    },

    onSave : function(btn, ev) {
       //this.store.save();
        var json = '';
    	this.store.each(function(store){
    	json += Ext.util.JSON.encode(store.data) + ',';
    	});
    	json = json.substring(0, json.length - 1);
    	params = {posts:[json]};
    	Ext.Ajax.request({
            url: '/procurement/procurement/insertarf',
            method:'POST',
            success: function(resp){
    		Ext.Msg.alert('Success', 'Data has been saved!');
    		isEdited = false;
            },
        	failure:function( action){
          	if(action.failureType == 'server'){
              obj = Ext.util.JSON.decode(action.response.responseText);
              Ext.Msg.alert('Error!', obj.errors.reason);
          	}else{
              Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
          	}
          	},
            params: params
        });
    }
});

Ext.onReady(function() {
    Ext.QuickTips.init();

//    var userForms = new userForm({
//        renderTo: 'user-form'
//    });

    var userGrids = new userGrid({
        renderTo: 'user-grid',
        id: 'boq3-grid',
        store: store,
        columns : userColumns,
        loadMask: true,
        bbar: new Ext.PagingToolbar({
            id: 'paging',
            pageSize: 100,
            store: store,
            displayInfo: true,
            displayMsg: 'Displaying data {0} - {1} of {2}',
            emptyMsg: "No data to display"
        })
    });
    var userGrids2 = new userGrid2({
        renderTo: 'user-grid2',
        id: 'arf-grid',
        store: storeARF,
        columns : userColumns2,
        loadMask: true,
//    renderTo:'user-grid2',
//    store: storeARF,
//    columns:userColumns2,
//    width:700,
//    plugins: [summary],
//    view : new Ext.grid.GridView({
//        	forceFit: false,
//        	listeners : {
//		    	refresh : function(grid){
//					if (t != undefined){
//
//
//
//				}}
//			}
//        }),
//        renderTo: 'user-grid2',
//        id: 'arf-grid',
//        store: storeARF,
//        columns : userColumns2,
//        loadMask: true,
        bbar: ['->',{
             xtype: 'button',
	         text: 'Save ARF List(Cart)',
	         iconCls: 'icon-save',
	         handler: function()
	         {
				if (storeARF.getCount() == 0)
				{
					return false;
				}

	         	var json = '';
                var fileJson = '';
	         	var parameter = '',
                     storeIsValid = true;
	        	Ext.getCmp('arf-grid').getStore().each(function(store){
                    if (store.data['requester'] == undefined || store.data['requester'] == '')
                    {
                        var msg =  '<b>' + store.data['kode_brg'] + ' (' + store.data['nama_brg'] + ')</b> Requester Name is missing.<br>Please use Edit (<img src="/images/g_rec_upd.png">) on ARF List (Cart) to fix this problem.';
                        Ext.Msg.alert('Error!', msg);
                        storeIsValid = false;
                        return false;
                    }
	            	json += Ext.util.JSON.encode(store.data) + ',';
                });
                if (!storeIsValid)
                    return false;
            	json = '[' + json.substring(0, json.length - 1) + ']'; //JSON format fix
//                 console.log(json);

                 storeFile.each(function(store){
                fileJson += Ext.util.JSON.encode(store.data) + ',';
                });
            	fileJson = '[' + fileJson.substring(0, fileJson.length - 1) + ']'; //JSON format fix

            	//Get add. Data
            	var prjKode = Ext.getCmp('prj_kode_text').getValue();
            	var sitKode = Ext.getCmp('sit_kode_text').getValue();
            	var prjNama = Ext.getCmp('prj_nama_text').getValue();
            	var sitNama = Ext.getCmp('sit_nama_text').getValue();
                var budgetType = Ext.getCmp('arf_origin_text').getValue();
//                var requester = Ext.getCmp('requester_text').getValue();
//                var requester2 = Ext.getCmp('requester_text').getValue();
                var penerima = Ext.getCmp('penerima_text').getValue();
                var bank = Ext.getCmp('bank_text').getValue();
                var bankaccountname = Ext.getCmp('bankaccountname_text').getValue();
                var bankaccountno = Ext.getCmp('bankaccountno_text').getValue();
                var valuta = Ext.getCmp('val_kode_text').getValue();
                var finance = Ext.getCmp('fin_kode_text').getValue();
                var manager = Ext.getCmp('mgr_kode_text').getValue();
            	var ketin = Ext.getCmp('ketin_text').getValue().replace(/\"|\'|\r|\n/g,' ');
             
                var pic = Ext.getCmp('pic_kode_text').getValue();
                var tgl = new Date();
                 var type = Ext.getCmp('arf_type').getValue();
                 if (type == 1)
                     type = 'Y';
                 else
                     type = 'N';
            	var trano = '<?php echo $this->trano; ?>';
//                parameter = '[{"prj_kode":"' + prjKode + '","prj_nama":"' + prjNama + '", "sit_kode":"' + sitKode + '", "sit_nama":"' + sitNama + '", "requester":"' + requester + '", "penerima":"' + penerima + '", "bank":"' + bank + '", "bankaccountname":"' + bankaccountname + '", "bankaccountno":"' + bankaccountno + '", "valuta":"' + valuta + '", "pic_kode":"' + pic + '", "mgr_kode":"' + manager + '", "finance":"' + finance + '", "budgettype":"' + budgetType + '", "trano":"' + trano + '", "ketin":"' + ketin + '"}]';
                 parameter = '[{"prj_kode":"' + prjKode + '","prj_nama":"' + prjNama + '", "sit_kode":"' + sitKode + '", "sit_nama":"' + sitNama + '", "penerima":"' + penerima + '", "bank":"' + bank + '", "bankaccountname":"' + bankaccountname + '", "bankaccountno":"' + bankaccountno + '", "valuta":"' + valuta + '", "pic_kode":"' + pic + '", "mgr_kode":"' + manager + '", "finance":"' + finance + '", "budgettype":"' + budgetType + '", "trano":"' + trano + '", "ketin":"' + ketin + '", "bt": "' + type + '"}]';
            	params = {posts:json, etc:parameter , file:fileJson};
            	myPanel = Ext.getCmp('abs-budget-panel'); //Load the panel
        	    myPanel.body.load({
        	        url: '/procurement/procurement/apparf/from/edit', //the url
        	        scripts : true,
        	        params: params //our params goes here
                });
	         },
	         scope: this
        	}
                ,
                {
                xtype: 'button',
	         text: 'Cancel ARF List(Cart)',
	         iconCls: 'icon-cancel',
	         handler:showAddARF
	         ,
	         scope: this
        	}
                ]
    });

    var fileColumns = [
                    new Ext.grid.RowNumberer(),
                    {header: "File Name",width: 130, dataIndex: 'filename'},
                    {header:'',width:40,sortable:true,css:'text-align:center;', renderer: function (v,p,r){
                        return '<a href="#" onclick="window.open(\'/default/file/download/path/files/filename/' + r.data['savename'] + '\',\'mywin\',\'left=20,top=20,width=100,height=20,toolbar=0,resizable=0\');"><img src="/images/icons/fam/page_find.gif"></a>&nbsp;<a href="#" onclick="deleteFile();"><img src="/images/g_rec_del.png"></a>';
                    }}
                ];

    var fileUploads = new Ext.FormPanel({
        renderTo: 'form_file',
        fileUpload: true,
        autoHeight: true,
        frame: true,
        style: 'margin-top: 10px',
        width: 700,
    //     bodyStyle: 'padding: 10px 10px 10px 10px;',
    //     labelWidth: 50,
         defaults: {
             anchor: '95%',
             allowBlank: false,
             msgTarget: 'side'
         },
         items:[
                 {
                    layout : 'column',
                    items:[
                            {
                                 columnWidth:.46,
                                 layout :'form',
                                 items:[
                                    {
                                        xtype: 'fileuploadfield',
                                        id: 'po-file',
                                        emptyText: 'Select a File',
                                        fieldLabel: 'Attach File',
                                        allowBlank: false,
                                        name: 'file-path',
                                        buttonText: '',
                                        buttonCfg: {
                                            iconCls: 'upload-icon'
                                        }
                                    },
                                     {
                                        xtype: 'button',
                                        text: 'Upload',
                                        style: 'float: right',
                                        handler: function(){
                                            if(fileUploads.getForm().isValid()){
                                                form_action=1;
                                                fileUploads.getForm().submit({
                                                    url: '/procurement/procurement/uploadfile/type/ARF',
                                                    waitMsg: 'Uploading file...',
                                                    success: function(form,action){
                                                        var returnData = action.result;
                                                        if( returnData.success) {
                                                            var c = new filelist({
                                                                id:parseFloat(storeFile.getCount() + 1),
                                                                filename: returnData.filename,
                                                                savename: returnData.savename,
                                                                path: returnData.path,
                                                                status: 'new'
                                                          });
                                                          storeFile.add(c);
                                                          Ext.getCmp('files-grid').getView().refresh();
                                                            Ext.getCmp('po-file').setValue('');
                                                        }
                                                        else
                                                        {
                                                            Ext.Msg.alert('Error', returnData.msg);
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    }
                                 ]
                            },
                            {
                                 columnWidth:.5,
                                 layout :'form',
                                 items:[
                                    new Ext.grid.GridPanel ({
                                        id:'files-grid',
                                        iconCls: 'silk-grid',
                                        height: 100,
                                        style: 'margin-left: 5px',
                                        store: storeFile,
                                        trackMouseOver: true,
                                        view : new Ext.grid.GridView({
                                            forceFit: true
                                        }),
                                        columns: fileColumns
                                    })
                                 ]
                            }
                    ]
                }

         ],
        buttons: []
     });

    init();
    var jsonFile = <?php echo $this->file ?>;

    storeFile.loadData(jsonFile);
    Ext.getCmp('files-grid').getView().refresh();

    <?php
    if ($this->json != '')
    {
    ?>
    var json = <?php echo $this->json; ?>;
    <?php
    if ($this->jsonEtc != '')
    {
    ?>
    var etc = <?php echo $this->jsonEtc; ?>;
        
    Ext.getCmp('prj_kode_text').setValue(etc[0]['prj_kode']);
    Ext.getCmp('prj_nama_text').setValue(etc[0]['prj_nama']);
    Ext.getCmp('sit_kode_text').setValue(etc[0]['sit_kode']);
    Ext.getCmp('sit_nama_text').setValue(etc[0]['sit_nama']);
    Ext.getCmp('val_kode_text').setValue(etc[0]['val_kode']);
    Ext.getCmp('val_nama_text').setValue(etc[0]['val_nama']);
//    Ext.getCmp('requester_text').setValue(etc[0]['request2']);
    Ext.getCmp('mgr_kode_text').setValue(etc[0]['request']);
    Ext.getCmp('mgr_nama_text').setValue(etc[0]['mgr_nama']);
    Ext.getCmp('penerima_text').setValue(etc[0]['penerima']);
    Ext.getCmp('bank_text').setValue(etc[0]['namabank']);
    Ext.getCmp('bankaccountname_text').setValue(etc[0]['reknamabank']);
    Ext.getCmp('bankaccountno_text').setValue(etc[0]['rekbank']);
//    Ext.getCmp('pic_kode_text').setValue(etc[0]['orangpic']);
//    Ext.getCmp('pic_nama_text').setValue(etc[0]['pic_nama']);
    Ext.getCmp('fin_kode_text').setValue(etc[0]['orangfinance']);
    Ext.getCmp('arf_origin_text').setValue(etc[0]['budgettype']);
    Ext.getCmp('ketin_text').setValue(etc[0]['ketin']);
    Ext.getCmp('arf_type').setValue(etc[0]['bt']);


    <?php
        }
    ?>

    storeARF.loadData(json);

        
    submitBoq3()
  
    var grouplist = Ext.data.Record.create([{
        name: 'trano',
        type: 'string'
    }]);



    <?php
    }
    ?>

//    <?php
//        foreach ($this->prNo as $key => $val)
//        {
//    ?>
//            submitBoq3('<?php echo $val;?>');
//    <?php
//        }
//    }
//     ?>


});

<?php echo $this->action('popupgrid','grid'); ?>

</script>

<div id="user-form"></div>
<div id="form_file"></div>
<div id="user-grid"></div>
<div id="separator">
<div id="user-form2" style="float:left;"></div>
<div class="sidebox" style="float:left;width:22em;">
	<div class="boxhead"><h2>Available Total</h2></div>
	<div class="boxbody" id="a-qty">

	</div>
</div>
</div>
<div id="user-grid2" style="margin-top:10px;float:left;"></div>

