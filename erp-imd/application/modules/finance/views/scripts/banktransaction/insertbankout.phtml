<script type="text/javascript">

    var BANK_TYPE = '';
    Ext.apply(Ext.form.VTypes, {
        numericText: "Only numbers are allowed.",
        numericMask: /[0-9]/,
        numericRe: /(^-?dd*.d*$)|(^-?dd*$)|(^-?.dd*$)/,
        numeric: function(v) {
            return function() {
                return this.numericRe.test(v)
            };
        }
    });

    var bankoutlist = Ext.data.Record.create([
        {name: 'trano'},
        {name: 'ref_number'},
        {name: 'tgl'},
        {name: 'uid'},
        {name: 'prj_kode'},
        {name: 'sit_kode'},
        {name: 'job_number'},
        {name: 'coa_kode'},
        {name: 'coa_nama'},
        {name: 'val_kode'},
        {name: 'debit'},
        {name: 'credit'},
        {name: 'rateidr'}
    ])

    var storebankout = new Ext.data.GroupingStore({
        id: 'store-bankout',
        reader: new Ext.data.JsonReader({fields: bankoutlist}),
        listeners: {
            'load': function(record) {
                hitungTotal();
            }
        }
    });
    var totDebit = 0;
    var totCredit = 0;
    function hitungTotal()
    {
        totDebit = 0;
        totCredit = 0;

        storebankout.each(function(items) {
            totDebit += (parseFloat(items.data['debit']));
            totCredit += (parseFloat(items.data['credit']));
        });
        Ext.getCmp('debittotal').setText('Total Debit : ' + Ext.util.Format.number(totDebit, '0,0.00'));
        Ext.getCmp('credittotal').setText('Total Credit : ' + Ext.util.Format.number(totCredit, '0,0.00'));
    }

    function edit(r)
    {

        var dat = storebankout.getAt(r);
        Ext.getCmp('acc-number').setValue(dat.data['ref_number']);
        Ext.getCmp('coa-kode').setValue(dat.data['coa_kode']);
        Ext.getCmp('coa-nama').setValue(dat.data['coa_nama']);
        //Ext.getCmp('val-kode').setValue(dat.data['val_kode']);
        Ext.getCmp('val_kode_text').setValue(dat.data['val_kode']);
        Ext.getCmp('debit').setValue(dat.data['debit']);
        Ext.getCmp('credit').setValue(dat.data['credit']);

        Ext.getCmp('form-insert-bank-out').stat = 'edit';
        Ext.getCmp('form-insert-bank-out').idEdit = dat.id;
    }

    function deleterowgrid(idItem)
    {
        Ext.MessageBox.confirm('Confirm', 'Are you sure want to delete this?', function(btn) {
            if (btn == 'yes')
            {
                var store = storebankout;
                var dat = store.getById(idItem);
                if (dat)
                {
                    store.remove(dat);
                    Ext.getCmp('form-insert-bank-out').stat = 'new';
                    Ext.getCmp('form-insert-bank-out').idEdit = '';
                    Ext.getCmp('grid-bankout').getView().refresh();
                    hitungTotal();
                }
            }
        });
    }

    Ext.onReady(function() {

        Ext.QuickTips.init();
        Ext.form.Field.prototype.msgTarget = 'side';

        var formpanel = new Ext.form.FormPanel({
            title: 'Bank Spend Money',
            id: 'form-insert-bank-out',
            renderTo: 'insert_bank_out',
            frame: true,
            labelAlign: 'top',
            style: 'margin:10 10 10 10',
            width: 400,
            stat: 'new',
            items: [
                {
                    xtype: 'combo',
                    fieldLabel: 'Bank Type',
                    id: 'trans_type',
                    allowBlank: false,
                    width: 100,
                    store: new Ext.data.Store({
                        proxy: new Ext.data.HttpProxy({
                            url: '/finance/coa/gettranotype'
                        }),
                        reader: new Ext.data.JsonReader({
                            totalProperty: 'count',
                            root: 'data'
                        }, [{
                                name: 'trano'
                            }])
                    }),
                    valueField: 'trano',
                    displayField: 'trano',
                    typeAhead: true,
                    forceSelection: true,
                    editable: false,
                    mode: 'remote',
                    triggerAction: 'all',
                    selectOnFocus: true,
                    emptyText: 'Select a type ...',
                    listeners: {
                        'select': function(c, rec, ind) {
                            BANK_TYPE = rec.get("trano");
                        }
                    }
                },
                {
                    xtype: 'textfield',
                    fieldLabel: 'Referrence ',
                    id: 'acc-number',
                    allowBlank: false
                },
                {
                    xtype: 'tranodatechanger',
                    anchor: '100%',
                    id: 'trano_tgl',
                    Selectid: 'tgl',
                    fieldLabel: 'Transaction Date',
                    selectValue: '<?= date("d M Y") ?>'
                },
                {
                    xtype: 'projectselectorreport',
                    anchor: '100%',
                    id: 'project-select',
                    Selectid: 'prj_kode_text',
                    Nameid: 'prj_nama_text',
                    ShowName: true,
                    fieldLabel: 'Project Code',
                    allowBlank: false,
                    showAll: true,
                    callback: function(prj) {
                        prjKode = parseProjectCode(prj.prj_kode);
                        if (prjKode != '')
                            Ext.getCmp('job_number').setValue(prjKode + ".");
                        else
                            Ext.getCmp('job_number').setValue('');
                        Ext.getCmp('site-select').clearAllValue();
                    }
                }, {
                    xtype: 'siteselector',
                    anchor: '100%',
                    independent: false,
                    id: 'site-select',
                    SiteSelectid: 'sit_kode_text',
                    SiteNameid: 'sit_nama_text',
                    ProjectSelectid: 'prj_kode_text',
                    ShowName: true,
                    fieldLabel: 'Site Code',
                    allowBlank: false,
                    showAll: true,
                    callback: function(site) {
                        if (site.sit_kode != '')
                        {
                            sitKode = site.sit_kode;
                            Ext.getCmp('job_number').setValue(prjKode + "." + sitKode + ".");
                        }
                    }
                },
                {
                    xtype: 'coaselector',
                    fieldLabel: 'Chart Of Account',
                    id: 'coa_kodes',
                    Selectid: 'coa_kode',
                    Nameid: 'coa_nama',
                    width: 180,
                    ShowName: true,
                    allowBlank: false
                },
                {
                    xtype: 'currencyselector',
                    anchor: '100%',
                    id: 'currency-select',
                    Selectid: 'val_kode_text',
                    Nameid: 'val_nama_text',
                    ShowName: true,
                    fieldLabel: 'Currency Code',
                    allowBlank: false,
                    selectValue: 'IDR'
                },
                new Ext.ux.customRendererField({
                    xtype:'textfield',
                    fieldLabel:'IDR Rate',
                    id:'val_rate_text',
                    name: 'val_rate_text',
                    vtype:'numeric',
                    style:'text-align:right',
                    priceDelemiter:','
                }),       
                /* {
                    fieldLabel: 'Valuta ',
                    xtype: 'combo',
                    width: 100,
                    allowBlank: false,
                    store: new Ext.data.SimpleStore({
                        fields: ['name', 'nilai'],
                        data: [
                            ['IDR', 'IDR'],
                            ['USD', 'USD']
                        ]
                    }),
                    valueField: 'nilai',
                    displayField: 'name',
                    typeAhead: true,
                    forceSelection: true,
                    editable: false,
                    mode: 'local',
                    triggerAction: 'all',
                    selectOnFocus: true,
                    id: 'val-kode',
                    listeners: {
                        'select': function(c, store, index) {
                            var data = store.data['nilai'];
                            if (data != 'IDR')
                                Ext.getCmp('rateidr').setVisible(true);
                            else
                                Ext.getCmp('rateidr').setVisible(false);
                        }
                    }
                }, {
                    xtype: 'textfield',
                    id: 'rateidr',
                    width: 104,
                    fieldLabel: 'Exchange Rate',
                    value: '<?= $this->rateidr ?>',
//                    readOnly: false,
                    hidden: true
                },*/
                new Ext.ux.customRendererField(
                        {
                            xtype: 'textfield',
                            id: 'debit',
                            style: 'text-align:right',
                            priceDelemiter: ',',
                            fieldLabel: 'Debit ',
                            value: '0.00',
                            listeners: {
                                'customfocus': function(t) {
                                    Ext.getCmp('credit').setValue('');
                                }
                            }
                        }),
                new Ext.ux.customRendererField(
                        {
                            xtype: 'textfield',
                            id: 'credit',
                            style: 'text-align:right',
                            priceDelemiter: ',',
                            fieldLabel: 'Credit ',
                            value: '0.00',
                            listeners: {
                                'customfocus': function(t) {
                                    Ext.getCmp('debit').setValue('');
                                }
                            }
                        }), {
                    xtype: 'textfield',
                    id: 'job_number',
                    fieldLabel: 'Job Number ',
                    vtype: 'alphanumericonly'
                }
            ],
            buttons: [{
                    text: 'Add to Grid',
                    iconCls: 'silk-add',
                    handler: function(btn, ev)
                    {
                        if (BANK_TYPE == '')
                        {
                            Ext.Msg.alert('Error', 'Please select Bank Type');
                            return false;
                        }

                        if (!Ext.getCmp('form-insert-bank-out').getForm().isValid())
                        {
                            Ext.Msg.alert('Error', 'Form not valid');
                            return false;
                        }

                        if (Ext.getCmp('debit').getValue().toString().replace(/\$|\,/g, '') == 0 && Ext.getCmp('credit').getValue().toString().replace(/\$|\,/g, '') == 0)
                        {
                            Ext.MessageBox.show({
                                title: 'Error',
                                msg: 'Sorry , please insert field debit or credit',
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.ERROR
                            });
                            return false;
                        }

//                        if (storebankout.getCount() > 0)
//                        {
//                            var row = storebankout.getAt(storebankout.findExact('val_kode', Ext.getCmp('val-kode').getValue()));
//
//                            if (row == null)
//                            {
//                                Ext.MessageBox.show({
//                                    title: 'Error',
//                                    msg: 'Sorry this document different valuta',
//                                    buttons: Ext.MessageBox.OK,
//                                    icon: Ext.MessageBox.ERROR
//                                });
//                                return false;
//                            }
//                        }
                        //var rateidr = Ext.getCmp('rateidr').getValue();
                        //var valkode = Ext.getCmp('val-kode').getValue();
                        var rateidr = Ext.getCmp('val_rate_text').getOriginalValue();
                        var valkode = Ext.getCmp('val_kode_text').getValue();

                        if (valkode != 'IDR' && rateidr == 0) {
                            Ext.MessageBox.show({
                                title: 'Error',
                                msg: 'Exchange Rate is empty!',
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.ERROR
                            });
                            return false;
                        }
                        //Cek job number sesuai dengan patter Qxxx.yyy (xxx == kode project, yyy == cfs kode)
                        var testJob = Ext.getCmp('job_number').getValue();
                        if (!regexJobNumber.test(testJob.toString()))
                        {
                            Ext.MessageBox.show({
                                title: 'Error',
                                msg: 'Job Number not valid, please use format ( Qxxxxxx.yyy.zzz ), ex : Q000101.254.123<br>xxxxxx = Project Code, yyy = Site Code, zzz = CFS Code',
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.ERROR
                            });
                            return false;
                        }
                        if (Ext.getCmp('form-insert-bank-out').stat == 'new')
                        {
                            var e = new bankoutlist({
                                ref_number: Ext.getCmp('acc-number').getValue(),
                                coa_kode: Ext.getCmp('coa_kode').getValue(),
                                coa_nama: Ext.getCmp('coa_nama').getValue(),
                                //val_kode: Ext.getCmp('val-kode').getValue(),
                                val_kode: Ext.getCmp('val_kode_text').getValue(),
                                prj_kode: Ext.getCmp('prj_kode_text').getValue(),
                                sit_kode: Ext.getCmp('sit_kode_text').getValue(),
                                job_number: Ext.getCmp('job_number').getValue(),
                                debit: Ext.getCmp('debit').getValue().toString().replace(/\$|\,/g, ''),
                                credit: Ext.getCmp('credit').getValue().toString().replace(/\$|\,/g, ''),
                                //rateidr: Ext.getCmp('rateidr').getValue().toString().replace(/\$|\,/g, '')
                                rateidr: Ext.getCmp('val_rate_text').getOriginalValue().toString().replace(/\$|\,/g, '')
                            })

                            storebankout.add(e);

//                        Ext.MessageBox.alert('Status', 'Changes saved successfully.');

                        } else
                        {
                            if (Ext.getCmp('form-insert-bank-out').stat == 'edit')
                            {
                                var row = storebankout.getById(Ext.getCmp('form-insert-bank-out').idEdit);

                                row.data['ref_number'] = Ext.getCmp('acc-number').getValue(),
                                        row.data['prj_kode'] = Ext.getCmp('prj_kode_text').getValue(),
                                        row.data['sit_kode'] = Ext.getCmp('sit_kode_text').getValue(),
                                        row.data['job_number'] = Ext.getCmp('job_number').getValue(),
                                        row.data['coa_kode'] = Ext.getCmp('coa_kode').getValue(),
                                        row.data['coa_nama'] = Ext.getCmp('coa_nama').getValue(),
                                        //row.data['val_kode'] = Ext.getCmp('val-kode').getValue(),
                                        row.data['val_kode'] = Ext.getCmp('val_kode_text').getValue(),
                                        row.data['debit'] = Ext.getCmp('debit').getValue().toString().replace(/\$|\,/g, ''),
                                        row.data['credit'] = Ext.getCmp('credit').getValue().toString().replace(/\$|\,/g, ''),
                                        //row.data['rateidr'] = Ext.getCmp('rateidr').getValue().toString().replace(/\$|\,/g, '')
                                        row.data['rateidr'] = Ext.getCmp('val_rate_text').getOriginalValue().toString().replace(/\$|\,/g, '')

//                            Ext.MessageBox.alert('Status', 'Update Data successfully.');
                            }
                        }

                        Ext.getCmp('form-insert-bank-out').stat = 'new';
                        Ext.getCmp('form-insert-bank-out').idEdit = '';
                        Ext.getCmp('grid-bankout').getView().refresh();

                        var ref_number = Ext.getCmp('acc-number').getValue(),
                                //valuta = Ext.getCmp('val-kode').getValue(),
                                valuta = Ext.getCmp('val_kode_text').getValue(),
                                prj_kode = Ext.getCmp('prj_kode_text').getValue(),
                                sit_kode = Ext.getCmp('sit_kode_text').getValue(),
                                //rateidr = Ext.getCmp('rateidr').getValue(),
                                rateidr = Ext.getCmp('val_rate_text').getOriginalValue(),
                                job_number = Ext.getCmp('job_number').getValue();

                        Ext.getCmp('form-insert-bank-out').getForm().reset();

                        Ext.getCmp('acc-number').setValue(ref_number);
                        //Ext.getCmp('val-kode').setValue(valuta);
                        Ext.getCmp('val_kode_text').setValue(valuta);
                        Ext.getCmp('trans_type').setValue(BANK_TYPE);
                        Ext.getCmp('trans_type').setRawValue(BANK_TYPE);
                        Ext.getCmp('prj_kode_text').setValue(prj_kode);
                        Ext.getCmp('sit_kode_text').setValue(sit_kode);
                        Ext.getCmp('job_number').setValue(job_number);
                        //Ext.getCmp('rateidr').setValue(rateidr);
                        Ext.getCmp('val_rate_text').setValue(rateidr);
                        hitungTotal();
                    }
                }, {
                    text: 'Reset',
                    style: 'margin-right:26px;',
                    handler: function(btn, ev)
                    {
                        Ext.getCmp('form-insert-bank-out').getForm().reset();
                    }
                }]

        })

        var gridpanel = new Ext.grid.GridPanel({
            store: storebankout,
            renderTo: 'grid_bankout',
            id: 'grid-bankout',
            frame: true,
            width: 800,
            height: 200,
            style: 'margin:10 10 10 10',
            viewConfig: {
                forceFit: true
            },
            columns: [new Ext.grid.RowNumberer(), {
                    header: "Action",
                    width: 60,
                    dataIndex: 'id',
                    css: 'text-align:center;',
                    renderer: function(v, p, r) {
                        return '<a href="#" onclick="deleterowgrid(\'' + r.id + '\')"><img src="/images/g_rec_del.png"></a>';
                    }
                }, {
                    header: 'Referrence',
                    dataIndex: 'ref_number',
                    sortable: true
                }, {
                    header: 'COA Code',
                    dataIndex: 'coa_kode',
                    sortable: true
                }, {
                    header: 'COA Name',
                    dataIndex: 'coa_nama',
                    sortable: true
                }, {
                    header: 'Valuta',
                    dataIndex: 'val_kode'
                }, {
                    header: 'Debit',
                    dataIndex: 'debit',
                    sortable: true,
                    align: 'right',
                    renderer: function(v) {
                        return v ? Ext.util.Format.number(v, '0,0.00') : '';
                    }
                }, {
                    header: 'Credit',
                    dataIndex: 'credit',
                    sortable: true,
                    align: 'right',
                    renderer: function(v) {
                        return v ? Ext.util.Format.number(v, '0,0.00') : '';
                    }
                }],
            buttons: [{
                    text: 'Submit',
                    iconCls: 'icon-save',
                    handler: function(btn, ev)
                    {
                        var totdebit = parseFloat(totDebit.toString().replace(/\$|\,/g, ''));
                        var totcredit = parseFloat(totCredit.toString().replace(/\$|\,/g, ''));

                        if (!moneycomp(totdebit, '==', totcredit))
                        {
                            Ext.MessageBox.show({
                                title: 'Error',
                                msg: 'Sorry, Debit and Credit Total Must be Balance',
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.ERROR
                            });
                            return false;
                        }

                        var count = storebankout.getCount();
                        if (count == 0)
                        {
                            return false;
                        }

                        Ext.MessageBox.confirm('Confirm', 'Are you sure want this action ?', function(btn) {

                            if (btn == 'yes')
                            {
                                var bankoutdata = '';
                                var totaldata = 0;
                                storebankout.each(function(store) {
                                    bankoutdata += Ext.util.JSON.encode(store.data) + ',';
                                })

                                bankoutdata = '[' + bankoutdata.substring(0, bankoutdata.length - 1) + ']';
                                var tgl = '';
                                if (Ext.getCmp('tgl').getValue() != '')
                                    tgl = Ext.util.Format.date(Ext.getCmp('tgl').getValue(), 'Y-m-d');
                                var params = {
                                    bankoutdata: bankoutdata,
                                    tgl: tgl,
                                    bank_type: BANK_TYPE
                                }
                                Ext.getBody().mask('Loading..','x-mask-loading',false);
                                Ext.Ajax.request({
                                    url: '/finance/banktransaction/doinsertbankout',
                                    method: 'POST',
                                    params: params,
                                    success: function(result) {
                                        Ext.getBody().unmask();
                                        obj = Ext.util.JSON.decode(result.responseText);

                                        if (obj.success)
                                        {
                                            Ext.Msg.alert('Message', 'Success, Data has been saved<br>Trano : <b>' + obj.trano + '</b>');
                                            myPanel = Ext.getCmp('abs-budget-panel');
                                            myPanel.body.load({
                                                url: '/finance/banktransaction/menu',
                                                scripts: true
                                            });
                                        } else
                                        {
                                            Ext.Msg.alert('Error', obj.msg);
                                        }
                                    },
                                    failure: function(action) {
                                        Ext.getBody().unmask();
                                        if (action.failureType == 'server') {
                                            obj = Ext.util.JSON.decode(action.response.responseText);
                                            Ext.Msg.alert('Error!', obj.errors.reason);
                                        } else {
                                            Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                                        }
                                    }

                                })
                            }

                        })

                    }
                }], bbar: new Ext.Toolbar({
                id: 'total-bbar',
                style: "text-align:right",
                items: [{
                        xtype: 'label',
                        id: 'debittotal',
                        style: 'color:red;font-weight:bold;margin-right:20px;font-size:12'
                    },
                    {
                        xtype: 'label',
                        id: 'credittotal',
                        style: 'color:red;font-weight:bold;font-size:12;margin-right:10px'
                    }],
                layout: 'fit'
            }),
            listeners: {
                'rowdblclick': function(g, r, e)
                {
                    edit(r);
//                    var dat = storebankin.getAt(r);
//                    Ext.getCmp('acc-number').setValue(dat.data['ref_number']);
//                    Ext.getCmp('coa-kode').setValue(dat.data['coa_kode']);
//                    Ext.getCmp('coa-nama').setValue(dat.data['coa_nama']);
//                    Ext.getCmp('val-kode').setValue(dat.data['val_kode']);
//                    Ext.getCmp('debit').setValue(dat.data['debit']);
//                    Ext.getCmp('credit').setValue(dat.data['credit']);
//
//                    Ext.getCmp('form-insert-bank-in').stat = 'edit';
//                    Ext.getCmp('form-insert-bank-in').idEdit = dat.id;
                },
                'afterrender': function(t)
                {
                    hitungTotal();
                }
            }

        })




    })

</script>

<div id="insert_bank_out"></div>
<div id="grid_bankout"></div>
