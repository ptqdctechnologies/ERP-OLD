<style type="text/css">
    .notif {
        padding: 10px 10px;
        margin: 5px 10px 5px 5px;
        background: #FFFFAA;
        -moz-border-radius:15px;
        border-radius: 15px;
        -webkit-border-radius: 15px; //edit :D
    }

    .tooltip {
            border-bottom: 1px dotted #000000; color: #000000; outline: none;
            cursor: help; text-decoration: none;
            position: relative;
        }
        .tooltip span {
            margin-left: -999em;
            position: absolute;
        }
        .tooltip:hover span {
            border-radius: 5px 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px;
            box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.1); -webkit-box-shadow: 5px 5px rgba(0, 0, 0, 0.1); -moz-box-shadow: 5px 5px rgba(0, 0, 0, 0.1);
            font-family: Calibri, Tahoma, Geneva, sans-serif;
            position: absolute; left: 1em; top: 2em; z-index: 99;
            margin-left: 0;
        }
        .tooltip:hover img {
            border: 0; margin: -10px 0 0 -55px;
            float: left; position: absolute;
        }
        .tooltip:hover em {
            font-family: Candara, Tahoma, Geneva, sans-serif; font-size: 1.2em; font-weight: bold;
            display: block; padding: 0.2em 0 0.6em 0;
        }
        .info { padding: 0.8em 1em; }
        .custom { padding: 0.5em 0.8em 0.8em 2em; }
        * html a:hover { background: transparent;}
        .info {background: #FFFFAA; border: 1px solid #FFAD33; }
    .berita {
        padding: 10px 10px;
        margin: 5px 10px 5px 5px;
        background: #ffffff;
        -moz-border-radius:15px;
        border-radius: 15px;
        border: 1px solid rgba(134, 84, 41, 0.5);
        -webkit-border-radius: 15px; //edit :D
    }

    .berita legend {
        font-family: "Helvetica Neue", "Lucida Grande", Helvetica, Arial, Verdana, sans-serif;
        font-size: 14px;
        color: #ed9155;
    }

    .berita ul li {
        border-bottom: 2px dotted #DDD;
        padding: 4px 8px 4px 0;
    }

    .berita span {
        font-weight: bold;
        font-size: 12px;
        color: #666;
    }

    .berita span a {
        text-decoration:  none;
        color: #666;
    }

    .berita span img {
        float:left;
        display:inline;
        margin-right:5px;
    }

    .berita p {
        margin: 2px !important;
    }

    .berita-preview .x-panel-body {
        background:#fff;
        color:#222;
        font:normal 12px tahoma,verdana,arial,sans-serif;
    }

    .berita-preview .x-panel-body p {
        line-height:18px;
        margin:8px 0;
    }

    .berita-preview .x-panel-body ul {
        margin-left:18px;
    }

    .berita-preview .x-panel-body ul li {
        display:list-item;
        list-style-image:none !important;
        list-style-position:outside !important;
        list-style-type:disc !important;
        margin-left:18px;
    }

    .berita-preview .x-panel-body pre, #preview .x-panel-body code {
        background:#f1f1f1;
        display:block;
    }

    .berita-preview .x-panel-body h4.berita-author {
        font-weight:normal;
        color:#555;
        font-size:11px;
    }

    .berita-preview .x-panel-body h3.berita-judul {
         white-space: -moz-pre-wrap !important;  /* Mozilla, since 1999 */
         white-space: -pre-wrap;      /* Opera 4-6 */
         white-space: -o-pre-wrap;    /* Opera 7 */
         white-space: pre-wrap;       /* css-3 */
         word-wrap: break-word;       /* Internet Explorer 5.5+ */

    }

    .berita-preview .x-panel-body span.berita-tgl {
        font-weight:normal;
        color:#555;
        float:right;
        font-size:11px;
    }

    .berita-preview .x-panel-body div.berita-attachment {
        position: absolute;
        left: 0px;
        bottom: 0px;
        background-color: #f0fff0;
        height: 60px;
        width: 100%;
        overflow: auto;
        padding-bottom: 3px;
    }

    .berita-preview .x-panel-body div.berita-attachment p {
        padding-left: 5px;
    }

    .berita-preview .x-panel-body div.berita-isi {
        overflow: auto;
        height: 365px;
    }

    .berita-preview .x-panel-body div.berita-unread {
        background: transparent url(/images/icons/fam/icon_favourites.gif) no-repeat 0 2px;
        padding-left:15px;
        padding-top:2px;
        color: #F3740C;
    }

    .judul-berita{
        white-space: -moz-pre-wrap !important;  /* Mozilla, since 1999 */
        white-space: -pre-wrap;      /* Opera 4-6 */
        white-space: -o-pre-wrap;    /* Opera 7 */
        white-space: pre-wrap;       /* css-3 */
        word-wrap: break-word;       /* Internet Explorer 5.5+ */
    }

    .berita-preview .x-panel-body div.berita-data {
        background:#f1f2f4;
        padding:5px;
        border-bottom:1px solid #dadadb;
    }
    .berita-preview .x-panel-body div.berita-body {
        padding:10px;
    }

    .berita-preview .x-panel-body div.berita-data-old {
        background:#f1f2f4;
        padding:5px;
        border-bottom:1px solid #dadadb;
    }

    .berita-preview .x-panel-body div.berita-body-old {

        margin-top: 3px;
        padding:10px;
        background: #E9E9E9;
        border-bottom:1px solid #dadadb;
    }

    .berita-preview .x-panel-body div.berita-body-old-unread {
        padding:10px;
        background: transparent url(/images/engineer-icon.png) no-repeat 0 2px;
    }

</style>

<script type="text/javascript">


function showBerita(id)
{
    Ext.Ajax.request({
        results: 0,
        url: '/admin/news/getnews',
        params: {
            id: id
        },
        method:'POST',
        success: function(result, request){
               var returnData = Ext.util.JSON.decode(result.responseText);
                if( returnData.data.length > 0) {
                    var news = returnData.data[0];

                    var dFormBerita =  new Ext.Window({
                            id: 'window-berita',
                            layout:'fit',
                            width: 600,
                            height: 500,
                            title: 'News',
                            stateful: false,
                            modal: true,
                            resizable: false,
                            closeAction: 'close',
                            items: [
                                new Ext.Panel({
                                    id: 'berita-message',
                                    height: 210,
                                    cls:'berita-preview single-preview',
                                    html: Ext.Template.from('berita-preview-tpl', {
                                        compiled:true,
                                        getAttachment: function(v,all) {
                                            if (v.length > 0)
                                            {
                                                var ul = '<div class="berita-attachment"><p>Attachments :</p><ul>',ulc = '</ul></div>', listFile = '';
                                                var title = '<p>Attachments :</p>';
                                                Ext.each(v,function(file){
                                                    listFile += '<li><a href="#" onclick="location.href=\'/default/file/download/path/files/filename/' + file.savename + '\'">' + file.filename + '</a></li>';
                                                });

                                                return title + ul + listFile + ulc;
                                            }
                                            else
                                                return '';
                                        }
                                    }).apply(news),
                                    closable:true,
                                    border:true
                                })
                            ],
                            buttons:[
                                {
                                 text: 'Close',
                                 id: 'close-window',
                                 handler: function(btn, ev) {
                                     dFormBerita.close();
                                  }

                              }
                            ]
                    });

                    dFormBerita.show();
                }
            }
        ,
        failure:function( action){
        if(action.failureType == 'server'){
          obj = Ext.util.JSON.decode(action.response.responseText);
          Ext.Msg.alert('Error!', obj.errors.reason);
        }
        }
    });
}

Ext.onReady(function() {
    Ext.QuickTips.init();
    
    var windowForm =  ({

    title: 'Home Page',
    id: 'abs-budget-panel',
    layout: 'fit',
    bodyCfg : { cls:'xpanel-body-table' , style: {'overflow':'auto'}},
    bodyStyle: 'padding:15px;',
    loadMask: true,
    minWidth: 300,
    minHeight: 200,
    contentEl: 'start-div'

});
viewPort = Ext.getCmp('viewport');

centerRegionTab = viewPort.getComponent('content-panel');
centerRegionTab.items.each(function(c){centerRegionTab.remove(c);});
centerRegionTab.add(windowForm);
panelBaru = Ext.getCmp('abs-budget-panel');
centerRegionTab.layout.setActiveItem('abs-budget-panel');

    Ext.lib.Ajax.isCrossDomain = function(u) {
    var match = /(?:(\w*:)\/\/)?([\w\.]*(?::\d*)?)/.exec(u);
    if (!match[1]) return false; // No protocol, not cross-domain
    return (match[1] != location.protocol) || (match[2] != location.host);
};

//Ext.override(Ext.data.Connection, {
//
//    request : function(o){
//            var me = this;
//            if(me.fireEvent("beforerequest", me, o)){
//                if (o.el) {
//                    if(!Ext.isEmpty(o.indicatorText)){
//                        me.indicatorText = '<div class="loading-indicator">'+o.indicatorText+"</div>";
//                    }
//                    if(me.indicatorText) {
//                        Ext.getDom(o.el).innerHTML = me.indicatorText;
//                    }
//                    o.success = (Ext.isFunction(o.success) ? o.success : function(){}).createInterceptor(function(response) {
//                        Ext.getDom(o.el).innerHTML = response.responseText;
//                    });
//                }
//
//                var p = o.params,
//                    url = o.url || me.url,
//                    method,
//                    cb = {success: me.handleResponse,
//                          failure: me.handleFailure,
//                          scope: me,
//                          argument: {options: o},
//                          timeout : Ext.num(o.timeout, me.timeout)
//                    },
//                    form,
//                    serForm;
//
//
//                if (Ext.isFunction(p)) {
//                    p = p.call(o.scope||WINDOW, o);
//                }
//
//                p = Ext.urlEncode(me.extraParams, Ext.isObject(p) ? Ext.urlEncode(p) : p);
//
//                if (Ext.isFunction(url)) {
//                    url = url.call(o.scope || WINDOW, o);
//                }
//
//                if((form = Ext.getDom(o.form))){
//                    url = url || form.action;
//                     if(o.isUpload || (/multipart\/form-data/i.test(form.getAttribute("enctype")))) {
//                         return me.doFormUpload.call(me, o, p, url);
//                     }
//                    serForm = Ext.lib.Ajax.serializeForm(form);
//                    p = p ? (p + '&' + serForm) : serForm;
//                }
//
//                method = o.method || me.method || ((p || o.xmlData || o.jsonData) ? 'POST' : 'GET');
//
//                if(method === 'GET' && (me.disableCaching && o.disableCaching !== false) || o.disableCaching === true){
//                    var dcp = o.disableCachingParam || me.disableCachingParam;
//                    url = Ext.urlAppend(url, dcp + '=' + (new Date().getTime()));
//                }
//
//                o.headers = Ext.apply(o.headers || {}, me.defaultHeaders || {});
//
//                if(o.autoAbort === true || me.autoAbort) {
//                    me.abort();
//                }
//
//                if((method == 'GET' || o.xmlData || o.jsonData) && p){
//                    url = Ext.urlAppend(url, p);
//                    p = '';
//                }
//
//                if (o.scriptTag || this.scriptTag || Ext.lib.Ajax.isCrossDomain(url)) {
//                   me.transId = this.scriptRequest(method, url, cb, p, o);
//                } else {
//                   me.transId = Ext.lib.Ajax.request(method, url, cb, p, o)
//                }
//                return me.transId;
//            }else{
//                return o.callback ? o.callback.apply(o.scope, [o,undefined,undefined]) : null;
//            }
//    },
//
//    scriptRequest : function(method, url, cb, data, options) {
//        var transId = ++Ext.data.ScriptTagProxy.TRANS_ID;
//        var trans = {
//            id : transId,
//            cb : options.callbackName || "stcCallback"+transId,
//            scriptId : "stcScript"+transId,
//            options : options
//        };
//
//        if (!Ext.isEmpty(data))
//            url = Ext.urlAppend(url, data)
//        url = Ext.urlAppend(url, String.format("{0}={1}", options.callbackParam || this.callbackParam || 'callback', trans.cb));
//
//        var conn = this;
//        window[trans.cb] = function(o){
//            conn.handleScriptResponse(o, trans);
//        };
//
//        // Set up the timeout handler
//        trans.timeoutId = this.handleScriptFailure.defer(cb.timeout, this, [trans]);
//
//        var script = document.createElement("script");
//        script.setAttribute("src", url);
//        script.setAttribute("type", "text/javascript");
//        script.setAttribute("id", trans.scriptId);
//        document.getElementsByTagName("head")[0].appendChild(script);
//
//        return trans;
//    },
//
//    handleScriptResponse : function(o, trans){
//        this.transId = false;
//        this.destroyScriptTrans(trans, true);
//        var options = trans.options;
//
//        // Attempt to parse a string parameter as XML.
//        var doc;
//        if (typeof o == 'string') {
//            if (window.ActiveXObject) {
//                doc = new ActiveXObject("Microsoft.XMLDOM");
//                doc.async = "false";
//                doc.loadXML(o);
//            } else {
//                doc = new DOMParser().parseFromString(o,"text/xml");
//            }
//        }
//
//        // Create the bogus XHR
//        response = {
//            responseObject: o,
//            responseText: (typeof o == "object") ? Ext.util.JSON.encode(o) : String(o),
//            responseXML: doc,
//            argument: options.argument
//        }
//        this.fireEvent("requestcomplete", this, response, options);
//        Ext.callback(options.success, options.scope, [response, options]);
//        Ext.callback(options.callback, options.scope, [options, true, response]);
//    },
//
//    handleScriptFailure: function(trans) {
//        this.transId = false;
//        this.destroyScriptTrans(trans, false);
//        var options = trans.options;
//        response = {
//            argument:  options.argument,
//            status: 500,
//            statusText: 'Server failed to respond',
//            responseText: ''
//        };
//        this.fireEvent("requestexception", this, response, options, {
//            status: -1,
//            statusText: 'communication failure'
//        });
//        Ext.callback(options.failure, options.scope, [response, options]);
//        Ext.callback(options.callback, options.scope, [options, false, response]);
//    },
//
//    // private
//    destroyScriptTrans : function(trans, isLoaded){
//        document.getElementsByTagName("head")[0].removeChild(document.getElementById(trans.scriptId));
//        clearTimeout(trans.timeoutId);
//        if(isLoaded){
//            window[trans.cb] = undefined;
//            try{
//                delete window[trans.cb];
//            }catch(e){}
//        }else{
//            // if hasn't been loaded, wait for load to remove it to prevent script error
//            window[trans.cb] = function(){
//                window[trans.cb] = undefined;
//                try{
//                    delete window[trans.cb];
//                }catch(e){}
//            };
//        }
//    }
//});

    <?php if ($this->isSubmitter) { ?>

//    var proxy = new Ext.data.HttpProxy({
//		api: {
//        	read : '/default/home/getmylastsubmitdocument'
//		}
//	});
//
//	var reader = new Ext.data.JsonReader({
//	    root: 'posts'
//	}, [
//	    {name: 'appName'},
//	    {name: 'item_id'},
//	    {name: 'appDate'}
//	]);
//
//	var store = new Ext.data.Store({
//	    id: 'docs',
//	    proxy: proxy,
//	    reader:reader
//    });
//
//
//	store.load();
//
//    var lastDocs = new Ext.grid.GridPanel({
//        title: 'My Last Submitted Documents',
//        layout: 'fit',
//        width: 300,
//        store: store,
//        loadMask: true,
//        renderTo: 'last-docs',
//        columns: [
//            new Ext.grid.RowNumberer(),
//            {
//                  header: 'Trano',
//                  dataIndex: 'item_id',
//                  width: 70
//            },
//            {
//                  header: 'Approved By',
//                  dataIndex: 'appName',
//                  width: 120
//            },
//            {
//                  header: 'Date',
//                  dataIndex: 'appDate',
//                  width: 70
//            }
//        ]
//    });
    <?php } ?>

    <?php if ($this->mail != '') {?>
    Ext.Ajax.request({
        results: 0,
        url: '/default/curl/getattendance/email/<?php echo $this->mail;?>',
        method:'POST',
//        scriptTag: true,
        success: function(result, request){
               var returnData = Ext.util.JSON.decode(result.responseText);
                if( returnData.success) {

                    var myTable = document.getElementById("one-column-emphasis");
                    myTable.style.visibility = 'visible';
                    var tBody = myTable.getElementsByTagName('tbody')[0];

                    tBody.innerHTML = '';
                    if (returnData.prev != '')
                    {
                        newTRh = document.createElement('tr');
                        newTHh = document.createElement('th');
                        newTRd = document.createElement('tr');
                        newTDd = document.createElement('td');

                        newTHh.setAttribute('scope','col');
                        newTHh.innerHTML = 'Attendance';
                        newTHh.setAttribute('style','background-color: #d0dafd');
                        newTRh.appendChild (newTHh);
                        newTDd.innerHTML = 'Last Week';
                        newTDd.setAttribute('style','background-color: #fff');
                        newTRd.appendChild (newTDd);

                        Ext.each(returnData.prev, function (t, index){
                            newTHh = document.createElement('th');
                            newTHh.setAttribute('scope','col');
                            newTHh.innerHTML = t.DATE;
                            newTHh.setAttribute('style','background-color: #d0dafd');
                            newTRh.appendChild (newTHh);
                            newTDd = document.createElement('td');
                            if (t.IN != undefined || t.OUT != undefined)
                                newTDd.innerHTML = "IN : " + t.IN + "<br>" + "OUT : " + t.OUT;
                            else
                            {
                                newTDd.innerHTML = '&nbsp;';
                            }
                            newTRd.appendChild (newTDd);
                        });

                        tBody.appendChild(newTRh);
                        tBody.appendChild(newTRd);
                    }
                    if (returnData.first != '')
                    {
                        newTRh = document.createElement('tr');
                        newTHh = document.createElement('th');
                        newTRd = document.createElement('tr');
                        newTDd = document.createElement('td');

                        newTHh.setAttribute('scope','col');
                        newTHh.innerHTML = '&nbsp;';
                        newTHh.setAttribute('style','background-color: #d0dafd');
                        newTRh.setAttribute('style','border-top: 2px #000 solid');
                        newTRh.appendChild (newTHh);
                        newTDd.innerHTML = 'This Week';
                        newTDd.setAttribute('style','background-color: #fff');
                        newTRd.appendChild (newTDd);

                        Ext.each(returnData.first, function (t, index){
                            newTHh = document.createElement('th');
                            newTHh.setAttribute('scope','col');
                            newTHh.innerHTML = t.DATE;
                            newTHh.setAttribute('style','background-color: #d0dafd');
                            newTRh.appendChild (newTHh);
                            newTDd = document.createElement('td');
                            if (t.IN != undefined || t.OUT != undefined)
                                newTDd.innerHTML = "IN : " + t.IN + "<br>" + "OUT : " + t.OUT;
                            else
                            {
                                newTDd.innerHTML = '&nbsp;';
                            }
                            newTRd.appendChild (newTDd);
                        });

                        tBody.appendChild(newTRh);
                        tBody.appendChild(newTRd);
                    }

                }
            }
        ,
        failure:function( action){
        if(action.failureType == 'server'){
          obj = Ext.util.JSON.decode(action.response.responseText);
          Ext.Msg.alert('Error!', obj.errors.reason);
        }
        }
    });
    <?php } ?>

    <?php if ($this->showTabs) { ?>

    var tabs = new Ext.TabPanel({
                renderTo: 'summary',
                width:450,
                activeTab: 0,
                frame:true,
                defaults:{autoHeight: true},
                items:[]
    });

    //SCurve Grid...

    var readerScurve = new Ext.data.JsonReader({
        root: 'posts'
    }, [
        {name: 'prj_kode', type: 'string'},
        {name: 'prj_nama', type: 'string'}

    ]);

    var sitNamaAsli = '';

    var storeScurve = new Ext.data.Store({
        id: 'scurve_store',
        url: '/extjs4/gantt/getscurveprojectlist',
        reader: readerScurve
    });

    storeScurve.load();

    showScurveCost = function(prjKode) {
        var newWin = new Ext.Window({
            height: 600,
            width: 600,
            title: 'Show SCurve Baseline & Cost for Project ' + prjKode,
            modal: true,
            stateful: false,
            closeAction: 'close',
            frame: true,
            items: [
                new Ext.Panel({
                    autoHeight: true,
                    autoWidth: true,
                    id: 'panel-scurve',
                    frame: false,
                    autoScroll: true
                })
            ],
            tbar: [
                {
                    xtype: 'tbtext',
                    text: 'Site Code'
                },
                {
                    xtype: 'combo',
                    id: 'combo-site',
                    triggerAction: 'all',
                    forceSelection:true,
                    pageSize:20,
                    typeAhead: true,
                    mode: 'remote',
                    width: 250,
                    displayField: 'sit_nama',
                    valueField: 'sit_kode',
                    store: new Ext.data.JsonStore({
                        autoLoad: true,
                        url: '/extjs4/gantt/getscurvesitelist/prj_kode/' + prjKode,
                        root: 'posts',
                        totalProperty: 'count',
                            fields:[
                                { name: "sit_kode"},{ name: "sit_nama"},{ name: "sit_nama_asli"}
                            ]
                    }),
                    listeners:
                        {
                            'select': function(t, rec, index){
                                sitNamaAsli = rec.data['sit_nama_asli'];
                                Ext.getCmp('combo-site').setRawValue(rec.data['sit_nama_asli']);
                            },
                            'change': function(t, newval, oldval){
                                t.setRawValue(sitNamaAsli);
                            }
                        }

                },
                '-',
                {
                    xtype: 'button',
                    text: 'Show',
                    width:70,
                    id: 'show_budget',
                    cls:"x-btn-text-icon" ,
                    icon:"/images/icons/fam/control_rewind.png",
                    handler:function(){
                        var sitKode = Ext.getCmp('combo-site').getValue();
                        if (sitKode == '')
                        {
                            Ext.Msg.alert('Error','Please choose Site Code!');
                            return false;
                        }
                        Ext.getCmp('panel-scurve').body.load({
                            url: '/projectmanagement/report/scurvecost/prj_kode/' + prjKode + '/sit_kode/' + sitKode + '/height/455/width/580/notitle/true',
                            scripts: true
                        });
                    }
                }

            ],
            buttons: [
                {
                    text: 'Close',
                    handler: function()
                    {
                        newWin.close();
                    }
                }
            ]
        });

        newWin.show();
    };

    var rowactions = new Ext.ux.grid.RowActions({
        actions:[
            {
                iconCls:'silk-magnifier',
                qtip:'Show SCurve',
                callback: function (grid,record,action,row,col)
                {
                    showScurveCost(record.data['prj_kode']);
                }
            }
        ]
        ,index: 'actions'
        ,header: ''
        });

    var userColumns = [
        new Ext.grid.RowNumberer(),
        rowactions,
        {header: "Project", width: 70, sortable: true, dataIndex: 'prj_kode'},
        {header: "Name", width: 200, sortable: true, dataIndex: 'prj_nama'}
    ];

    //End of SCurve

    tabs.add({
        title: 'SCurve',
        items: [
            new Ext.grid.GridPanel({
                id: 'scurvelist-grid',
                stateful: false,
                height: 300,
                store: storeScurve,
                columns: userColumns,
                plugins: [
                    rowactions
                ],
                viewConfig: {
                    forceFit: true
                }
            })
        ]
    }).show();


    <?php if ($this->timesheetTotal != '') { ?>
        var tsheet = Ext.data.Record.create([
            {
                name: 'total',
                type: 'integer'
            },
            {
                name: 'prj_kode',
                type: 'string'
            }
         ]);
        var storeTimesheet = new Ext.data.Store({
            reader: new Ext.data.JsonReader({fields: tsheet}),
            root: 'posts'
        });

        var json = <?php echo $this->timesheetTotal; ?>;

        storeTimesheet.loadData(json);

        tabs.add({
            title: 'Summary Timesheet',
            items: [
                new Ext.Panel({
                    height: 250,
                    autoWidth: true,
//                    collapsible: true,
                    //title: 'Summary Timesheet for My Projects - Update until <?php echo date("d-m-Y H:i:s"); ?>',
                    tbar: [
                        {
                            text: 'View Detail',
                            iconCls: 'icon-go',
                            handler: function()
                            {

                                myPanel = Ext.getCmp('abs-budget-panel');
                                myPanel.body.load({
                                    url: '/projectmanagement/timesheet/alltimesheet',
                                    scripts : true
                                });
                            }
                        }
                    ],
                    items: {
                        xtype: 'columnchart',
                        store: storeTimesheet,
                        yField: 'total',
                        url: '/resources/charts.swf',
                        xField: 'prj_kode',
                        xAxis: new Ext.chart.CategoryAxis({
                            title: 'Project'
                        }),
                        yAxis: new Ext.chart.NumericAxis({
                            title: 'Hours'
                        }),
                        extraStyle: {
                            xAxis: {
                                labelRotation: -45
                            }
                        }
                    }
                })
            ]
        });
            <?php } ?>
    <?php } ?>

    //News....

    Ext.Ajax.request({
        results: 0,
        url: '/admin/news/getnews',
        params: {
            limit: 5
        },
        method:'POST',
        success: function(result, request){
               var returnData = Ext.util.JSON.decode(result.responseText);
                if( returnData.data.length > 0) {
                    var news = returnData.data,
                        listnews = document.getElementById("isi-berita");
                        listnews.innerHTML = '';

                    Ext.each(news,function(isi){
                        newBerita = document.createElement("li");
                        newJudul = document.createElement("span");
                        newJudul.innerHTML = '<img src="/images/new.jpeg" />' + '<a href="#" onclick="showBerita(' + isi.id + ');">' + isi.judul + '</a>';
                        newIsi = document.createElement("p");
                        newIsi.setAttribute("class","isiberita");
                        newIsi.innerHTML = isi.excerpt + '&nbsp;<a href="#" onclick="showBerita(' + isi.id + ');">Read More</a>';
                        newBerita.appendChild(newJudul);
                        newBerita.appendChild(newIsi);
                        listnews.appendChild(newBerita);
                    });
                }
            }
        ,
        failure:function( action){
        if(action.failureType == 'server'){
          obj = Ext.util.JSON.decode(action.response.responseText);
          Ext.Msg.alert('Error!', obj.errors.reason);
        }
        }
    });
});
</script>
<div id="start-div" style="width: 100%;">
    <div style="float:left; margin-left:10px;" ><img src="/images/qdc.gif" /></div>
    <div style="float:left; margin-left:10px; min-width:470px">
        <h2>Welcome!</h2>
        This is QDC ERP on web, current state : Production.
    </div>
    <div style="float:right; width:250px">
        <center>
        <img width="100" height="130" src="<?php echo $this->accountImage;?>" style="border: solid 2px #DEDEDE; padding: 2px;"></img>
        </center>
        <!--<br>
        <?php //echo $this->account['displayname'][0];?>
        <br>
        <?php //echo $this->account ['mobile'] [0];?>
        <br>-->
        <fieldset class="berita">
            <legend>News</legend>
            <ul id="isi-berita">

            </ul>
        </fieldset>
        <!--Workstation registered to you:<br>
        <?php
        //$i = 0;
        //foreach ($this->assetGlpi as $v){
        ?>
        Type: <?php //echo $this->assetGlpi [$i]['type'];?><br>
        ID: <?php //echo $this->assetGlpi [$i]['no'];?><br>
        Serial No: <?php //echo $this->assetGlpi [$i]['serialNo'];?><br>
        <br>
        <?php
        //$i++;
        //} ?>
        -->
    </div>
    <div style="float:left; margin-left:5px;" >
        <table id="one-column-emphasis" style="visibility:hidden;">
            <colgroup>
            <col class="oce-first">
            </colgroup>
            <tbody>
            

            </tbody>

        </table>
    </div>
    <div style="float:left; margin-left:5px;clear:left;" >
    <?php if ($this->docs > 0) { ?>
        <fieldset class="notif">You have <b><?php echo $this->docs; ?> documents</b><br>to Re-Submit into Workflow.&nbsp;<input type="submit" value="View" onCLick="window.open('/default/home/showoutstandingdocs','outstandingdocs','toolbar=0');"></input></fieldset>
    <?php } ?>
<!--    </div>-->
<!--    <br>-->
<!--    <div style="float:left; margin-left:5px;" >-->
        <?php if ($this->jumSiteTelat > 0) { ?>
        <fieldset class="notif"><b>Sites Information :</b>
            <ul>
                <li>
                    Total Sites in charge : <b><?=$this->jumSite?></b>
                </li>
                <li>
                    <a class="tooltip" href="#" >Total Sites that are behind schedule<span class="info">Please review the SCurve in Tab Panel Beside.</span></a> : <b><font color="#ff0000"><?=$this->jumSiteTelat?></font></b>
                </li>
            </ul>
        </fieldset>
            <?php } ?>
    </div>
    <div style="float:left; margin-left:5px;" >
    <div id="summary"></div>
    </div>
    <!--<br></br>-->
    <!--<div style="float:left; width:200px;" id="last-docs"></div>-->
</div>

<div id="berita-preview-tpl" style="display:none;">
    <div class="berita-data">
        <h3 class="berita-judul">{judul}</h3>
        <span class="berita-tgl">{tgl}</span>
<!--        <h4 class="berita-author">Author : {author:defaultValue("Unknown")}</h4>-->
        <h4 class="berita-author">News From : <b>{type}</b></h4>
    </div>
    <div class="berita-isi">{isi}</div>
    {attachment:this.getAttachment}
</div>