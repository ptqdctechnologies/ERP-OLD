<style type="text/css">
.trano .x-tree-node-icon {
	background-image:url(/images/icons/fam/page_attachment.gif);
}
.starter .x-tree-node-icon {
    background-image:url(/images/icons/fam/copy.gif);
}
.next .x-tree-node-icon {
    background-image:url(/images/icons/arrow-down.gif);
}
.ender .x-tree-node-icon {
    background-image:url(/images/icons/fam/page_tick.gif);
}
</style>
<script type="text/javascript">
//Ext.onReady(function(){
//
//	var proxy = new Ext.data.HttpProxy({
//	    url : '/default/home/getmydocumentinworkflow'
//	});
//
//	var reader = new Ext.data.JsonReader({
//        idProperty: 'id',
//        totalProperty: 'count',
//        root : 'posts'},
//         [
//			{name: 'id'},
//			{name: 'item_id'},
//			{name: 'type'},
//			{name: 'date', type: 'date',  dateFormat: 'd-m-Y H:i:s'},
//			{name: 'username'},
//			{name: 'mail'},
//			{name: 'comment'},
//			{name: 'approve'},
//			{name: 'invalid'},
//			{name: 'start'},
//			{name: 'end'}
//          ]
//		);
//
//	var store = new Ext.data.GroupingStore({
//        reader: reader,
//        proxy: proxy,
//        sortInfo:{field: 'id', direction: "ASC"},
//        groupField:'item_id'
//    });
//	store.load();
//
//    searchDocument = function(){
//        var docs = Ext.getCmp('document-text').getValue();
//    	store.proxy.setUrl('/default/home/getmydocumentinworkflow/id/' + docs);
//    	Ext.getCmp('user-grids').getStore().reload();
//    	Ext.getCmp('user-grids').getView().refresh();
//    };
//
//    searchDocumentType = function(){
//        var docs = Ext.getCmp('combo-type').getValue();
//    	store.proxy.setUrl('/default/home/getmydocumentinworkflow/type/' + docs);
//    	Ext.getCmp('user-grids').getStore().reload();
//    	Ext.getCmp('user-grids').getView().refresh();
//    };
//	var grid = new Ext.grid.GridPanel({
//        store: store,
//        id: 'user-grids',
//        stateful: false,
//        loadMask: true,
//        title: 'My Document In Workflow',
//        columns: [
//            {header: "Document ID", width: 100, sortable: true, dataIndex: 'item_id'},
//            {header: "", width: 60, dataIndex: 'start',renderer: function (v,p,r) {
//
//            	var stat = '';
//				if (r.data['invalid'] != undefined && r.data['invalid'] != '')
//					stat =  "<img src='/images/lov_cancel.gif'>";
//				else
//					stat =  "<img src='/images/lov_select.gif'>";
//
//            	if (v == 1)
//					return "<img src='/images/icons/fam/copy.gif'>" + stat;
//				else if (r.data['end'] == 0 && v == 0)
//					return "<img src='/images/icons/arrow-down.gif'>" + stat;
//				else if (r.data['end'] == 1 && v == 0)
//					return "<img src='/images/icons/fam/page_tick.gif'>" + stat;
//
//
//            }},
//            {header: "User Name", width: 100, sortable: true, dataIndex: 'username',renderer: function (v,p,r) {
//                if (r.data['mail'] != "" && r.data['mail'] != undefined)
//                    return '<a href="mailto:' + r.data['mail'] + '">' + v + '</a>';
//                else
//                    return v;
//            }},
//            {header: "Date", width: 80, sortable: true, dataIndex: 'date',renderer: Ext.util.Format.dateRenderer('d/m/Y H:i:s')},
//            {header: "Status", width: 100, sortable: true, dataIndex: 'approve'},
//            {header: "Comment", width: 200, sortable: true, dataIndex: 'comment'}
//       ],
//
//        view: new Ext.grid.GroupingView({
//            forceFit:true,
//        	hideGroupedColumn :true,
//        	startCollapsed: true,
//        	startGroup: new Ext.XTemplate(
//      			  '<div id="{groupId}" class="x-grid-group {cls}">',
//      			  '<div id="{groupId}-hd" class="x-grid-group-hd" style="{style}"><div class="x-grid-group-title">',
//      			  '{text}, Type : {[values.rs[0].get("type")]}',
//      			  '</div></div><div id="{groupId}-bd" class="x-grid-group-body">'
//      			)
////            groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
//            ,enableRowBody:true
//            ,getRowClass:function(record, rowIndex, p, store) {
//                p.body = record.get('invalid');
//                if (p.body)
//                    return 'x-grid3-row-with-body3';
//             }
//        }),
//        frame:true,
//        height: 400,
//        layout: 'fit',
//        renderTo: 'grids',
//        bbar: new Ext.PagingToolbar({
//            id: 'paging',
//            pageSize: 100,
//            store: store,
//            displayInfo: true,
//            displayMsg: 'Displaying data {0} - {1} of {2}',
//            emptyMsg: "No data to display"
//        }),
//        tbar: [
//				{
//					text: 'Document ID',
//					xtype:'label',
//				    style: 'margin-right: 5px'
//				},
//				{
//					xtype: 'textfield',
//					id: 'document-text'
//				},
//				{
//				    text: 'Search',
//				    iconCls: 'search-icon',
//				    handler: searchDocument,
//				    scope: this
//				},
//				'-',
//				{
//					text: 'Document Type',
//					xtype:'label',
//				    style: 'margin-right: 5px'
//				},
//				{
//					 id: 'combo-type',
//		             name: 'workflow_item_type_id',
//		             hiddenName : 'workflow_item_type_id',
//		             width: 100,
//		             xtype: 'combo',
//		             triggerAction: 'all',
//		             mode: 'remote',
//		             displayField: 'name',
//		             valueField: 'workflow_item_type_id',
//		             store: new Ext.data.JsonStore({
//		                 autoLoad: true,
//		                 url: '/admin/workflow/listworkflowitemtype',
//		                 root: 'posts',
//		                  fields:[
//		                      { name: "name"},{ name: "workflow_item_type_id"}
//		                  ]
//		             })
//	             },
//				{
//				    text: 'Search',
//				    iconCls: 'search-icon',
//				    handler: searchDocumentType,
//				    scope: this
//				}
//               ]
//    });
//
//});

Ext.onReady(function() {
    Ext.QuickTips.init();

    var tree = new Ext.ux.tree.TreeGrid({
        title: 'Documents in My Workflow',
//        layout: 'fit',
        width: 800,
        loadMask: true,
        renderTo: 'grids',
        enableDD: true,

        columns:[{
            header: 'Project',
            dataIndex: 'prj_kode',
            width: 200,
            tpl: new Ext.XTemplate(
                '<tpl if="isDocs == true && isPerson == false">','{trano}',
                '</tpl>',
                '<tpl if="isDocs == true && isPerson == true">',
                    '<tpl for="approve">',
                        '<tpl if="approve == true">',
                            '<img src="/images/lov_select.gif">',
                        '</tpl>',
                        '<tpl if="reject == true">',
                            '<img src="/images/lov_cancel.gif">',
                        '</tpl>',
                        '<tpl if="waiting == true">',
                            '<img src="/images/icons/fam/page_refresh.gif">',
                        '</tpl>',
                    '</tpl>',
                    '{username}',
                '</tpl>',
                '<tpl if="isDocs != true && isPerson == false">',
                    '{prj_kode}',
                '</tpl>'
            )
        },{
            header: 'Status',
            width: 150,
//            align: 'center',
//            sortType: 'asFloat'
            tpl: new Ext.XTemplate(
                '<tpl for="approve">',
                    '{msg}',
                 '</tpl>'
            )
        },{
            header: 'Date',
            width: 110,
            dataIndex: 'date'
        },{
            header: 'Comment',
            width: 300,
            dataIndex: 'comment',
            tpl : new Ext.XTemplate (
//                '<tpl if="comment.length &gt; 0">',
//                    '<img src="/images/icons/fam/page_find.gif">',
//                '</tpl>',
                '{comment}'
            )
        }],

        loader: new Ext.ux.tree.TreeGridLoader({
                dataUrl: '/default/home/getmydocumentinworkflow',
                requestMethod: "POST",
                id: 'src'
//                baseParams: {
//                    fromDate: "2010-01-01",
//                    toDate: "2010-01-01",
//                    dateField: "systemDate"
//                }
        })

    });
    tree.getLoader().on("beforeload", function(treeLoader, node) {
            treeLoader.baseParams = {
                "prj_kode" : node.attributes.prj_kode,
                "trano" : node.attributes.trano,
                "isDocs" : node.attributes.isDocs,
                "workflow_item_id" : node.attributes.workflow_item_id,
                "workflow_id" : node.attributes.workflow_id,
                "workflow_structure_id" : node.attributes.workflow_structure_id,
                "uid" : node.attributes.uid
            };
    });

});    

</script>

<div id="grids"></div>