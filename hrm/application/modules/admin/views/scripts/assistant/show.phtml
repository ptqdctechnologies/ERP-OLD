<script type="text/javascript">
var App = new Ext.App({});

// Create HttpProxy instance.  Notice new configuration parameter "api" here instead of load.  However, you can still use
// the "url" paramater -- All CRUD requests will be directed to your single url instead.
var proxy = new Ext.data.HttpProxy({
    api: {
        read : '/admin/userrole/listuser'
    }
});

var proxy2 = new Ext.data.HttpProxy({
    api: {
        read : '/admin/assistant/list',
        create : '/admin/assistant/add',
        update: '/admin/assistant/update',
        destroy: '/admin/assistant/delete'
    }
});

// Typical JsonReader.  Notice additional meta-data params for defining the core attributes of your json-response
var reader = new Ext.data.JsonReader({
    totalProperty: 'count',
    successProperty: 'success',
    idProperty: 'id',
    messageProperty: 'message',
    root: 'posts'  // <-- New "messageProperty" meta-data
}, [
    {name: 'id'},
    {name: 'name'},
    {name: 'uid'},
    {name: 'id_privilege'}
]);

var reader2 = new Ext.data.JsonReader({
    totalProperty: 'count',
    successProperty: 'success',
    idProperty: 'id',
    messageProperty: 'message',
    root: 'posts'  // <-- New "messageProperty" meta-data
}, [
    {name: 'id'},
    {name: 'uid_manager'},
    {name: 'display_name'},
    {name: 'active'}
]);

// The new DataWriter component.
var writer = new Ext.data.JsonWriter({
    encode: true,
    writeAllFields: true
});

// Typical Store collecting the Proxy, Reader and Writer together.
var store = new Ext.data.Store({
    id: 'user-store',
    proxy: proxy,
    reader: reader
});

var store2 = new Ext.data.Store({
    id: 'user-store2',
    proxy: proxy2,
    reader: reader2,
    writer: writer,  // <-- plug a DataWriter into the store just as you would a Reader
    autoSave: true // <-- false would delay executing create, update, destroy requests until specifically told to do so with some [save] buton.
});

// load the store immeditately
store.load();
store2.load();


// A new generic text field
var textField =  new Ext.form.TextField();

// Let's pretend we rendered our grid-columns with meta-data from our ORM framework.
var userColumns =  [
    new Ext.grid.RowNumberer(),
    {header: "Full Name", width: 140, sortable: true, dataIndex: 'name'},
    {header: "UID", width: 140, sortable: true, dataIndex: 'uid'},
    {header: "Privilege", width: 80, sortable: true, dataIndex: 'id_privilege',renderer : function(v, params, data){
    	var status;
    	if (v == 500)
    	{
    		status = 'Admin';
    	}
    	else if (v == '' || v == undefined)
    	{
    		status = 'User';
    	}
    	return status;
    }}
];

var userColumns2 =  [
                    new Ext.grid.RowNumberer(),
                    {header: "Manager Name", width: 140, sortable: true, dataIndex: 'display_name'},
                    {header: "Status", width: 40, sortable: true, dataIndex: 'active',renderer : function(v, params, data){
                        var status;
                        if (v == '1')
                        {
                            status = '<img src="/images/icons/fam/accept.png" />';
                        }
                        else if (v == '' || v == undefined || v == '0')
                        {
                            status = '<img src="/images/icons/fam/action_stop.gif" />';
                        }
                        return status;
                    }}
                ];

searchUserName = function(){
    var userName = Ext.getCmp('username-text').getValue();
    store.proxy.setApi('read','/admin/userrole/listuser/name/' + userName);
    Ext.getCmp('user-grids').getStore().reload();
};

refreshGridUser = function(){
    store.proxy.setApi('read','/admin/userrole/listuser');
    Ext.getCmp('user-grids').getStore().reload();
};



userForm = Ext.extend(Ext.form.FormPanel, {
    iconCls: 'silk-user',
    frame: true,
    style: 'margin-top: 10px',
    labelAlign: 'right',
    title: 'Attach Personal Assistant',
    width: 400,
    defaults: {
        anchor: '100%'
    }
,
    initComponent : function() {
        this.items = this.buildForm();
        this.buttons = this.buildUI();
        this.addEvents({
            create : true
        });
        userForm.superclass.initComponent.call(this);
    },
//
    buildForm : function() {
        return [
			{fieldLabel: 'User Full Name',id:'userfullname-text',name: 'fullname', xtype: 'textfield',readOnly: true},
			{fieldLabel: 'Manager Name',
             hiddenName : 'uid_manager',
             id: 'combo-manager',
             xtype: 'combo',
             triggerAction: 'all',
             forceSelection:true,
             pageSize:10,
             typeAhead: true,
             mode: 'remote',
             displayField: 'display_name',
             valueField: 'uid_manager',
             store: new Ext.data.JsonStore({
                 autoLoad: true,
                 url: '/admin/assistant/listmanager',
                 root: 'posts',
                  fields:[
                      { name: "display_name"},{ name: "uid_manager"}
                  ]
             })
            },
            {
                xtype: 'checkbox'
                ,id:'active'
                ,name : 'active'
                ,fieldLabel: 'Enabled'
                ,trueText: '1'
                ,falseText: '0'
            }
        ];
    },
//
//    /**
//     * buildUI
//     * @private
//     */
    buildUI: function(){
        return [{
            text: 'Save',
            iconCls: 'icon-save',
            handler: this.onUpdate,
            scope: this
        }, {
            text: 'Create',
            iconCls: 'silk-user-add',
            handler: this.onCreate,
            scope: this
        }, {
            text: 'Reset',
            handler: function(btn, ev){
                this.getForm().reset();
            },
            scope: this
        }];
    },
    loadRecord : function(rec) {
        this.record = rec;
        this.getForm().loadRecord(rec);
    },
    onUpdate : function(btn, ev) {
        if (this.record == null) {
            return;
        }
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid.");
            return false;
        }
        this.getForm().updateRecord(this.record);
    },
    onCreate : function(btn, ev) {
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid");
            return false;
        }
        this.fireEvent('create', this, this.getForm().getValues());
        this.getForm().reset();
    },
    onReset : function(btn, ev) {
        this.fireEvent('update', this, this.getForm().getValues());
        this.getForm().reset();
    }
});

/**
 * App.user.Grid
 * A typical EditorGridPanel extension.
 */
userGrid = Ext.extend(Ext.grid.EditorGridPanel, {
	id:'user-grids',
    iconCls: 'silk-grid',
    frame: true,
    height: 450,
    width: 300,
    style: 'margin-top: 10px',
    trackMouseOver: true,

    initComponent : function() {
		this.viewConfig = {
            forceFit: true
        };

        this.tbar = this.buildTopToolbar();
        userGrid.superclass.initComponent.call(this);
    },

    /**
     * buildTopToolbar
     */
    buildTopToolbar : function() {
        return [
                {
					text: 'User Name',
					xtype:'label',
				    style: 'margin-right: 5px'
                },
                {
					xtype: 'textfield',
					id: 'username-text'
                },
                {
                    text: 'Search',
                    iconCls: 'silk-table-refresh',
                    handler: searchUserName,
                    scope: this
                },
                '-',
                {
                    text: 'Refresh',
                    iconCls: 'silk-table-refresh',
                    handler: refreshGridUser,
                    scope: this
                }
                ];
    }

});

userGrid2 = Ext.extend(Ext.grid.EditorGridPanel, {
	id:'user-grids2',
    iconCls: 'silk-grid',
    frame: true,
    height: 250,
    width: 400,
    style: 'margin-top: 10px',
    trackMouseOver: true,

    initComponent : function() {
        this.viewConfig = {
            forceFit: true
        };
        this.relayEvents(this.store, ['destroy', 'save', 'update']);
        this.tbar = this.buildTopToolbar();
        userGrid2.superclass.initComponent.call(this);
    },

    /**
     * buildTopToolbar
     */
    buildTopToolbar : function() {
        return [{
		            text: 'Delete',
		            iconCls: 'silk-delete',
		            handler: this.onDelete,
		            scope: this
		        }
                ];
    },

    onDelete : function(btn, ev) {
        var index = this.getSelectionModel().getSelectedCell();
        if (!index) {
            return false;
        }
        var rec = this.store.getAt(index[0]);
        this.store.remove(rec);

        Ext.getCmp('combo-manager').reset();
    }
});

Ext.onReady(function() {
    Ext.QuickTips.init();
    var userForms = new userForm({
        renderTo: 'user-form',
        listeners: {
            create : function(fpanel, data) {
                var rec = new userGrids2.store.recordType(data);
                userGrids2.store.insert(0, rec);
            }
        }
    });




    var userGrids = new userGrid({
        renderTo: 'user-grid',
        store: store,
        columns : userColumns,
        width: 400,
        listeners: {
        	rowclick: function(g, index, ev) {
                var rec = g.store.getAt(index);
                Ext.getCmp('userfullname-text').setValue(rec.data.name);
                store2.proxy.setApi('read','/admin/assistant/listassistant/id/' + rec.data.uid);
                store2.proxy.setApi('create','/admin/assistant/add/id/' + rec.data.uid);
                store2.proxy.setApi('update','/admin/assistant/update/id/' + rec.data.uid);
                store2.proxy.setApi('destroy','/admin/assistant/delete/id/' + rec.data.uid);
                Ext.getCmp('user-grids2').getStore().reload();
                Ext.getCmp('combo-manager').reset();
            }
        }
    });

    var userGrids2 = new userGrid2({
        renderTo: 'user-grid2',
        store: store2,
        columns : userColumns2,
        listeners: {
            rowclick: function(g, index, ev) {
                var rec = g.store.getAt(index);
                userForms.loadRecord(rec);
            },
            destroy : function() {
                userForms.getForm().reset();
            }
        }
    });


});
</script>

 <div id="user-grid" style="float:left"></div>

 <div style="float:left;margin-left:10px;">
 <div id="user-form"></div>
 <div id="user-grid2"></div>
 </div>

