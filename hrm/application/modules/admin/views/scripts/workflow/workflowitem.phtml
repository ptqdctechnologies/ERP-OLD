<script type="text/javascript">
var App = new Ext.App({});

// Create HttpProxy instance.  Notice new configuration parameter "api" here instead of load.  However, you can still use
// the "url" paramater -- All CRUD requests will be directed to your single url instead.
var proxy = new Ext.data.HttpProxy({
    api: {
        read : '/admin/workflow/listworkflowitem',
        create : '/admin/workflow/add',
        update: '/admin/workflow/updateworkflowitem',
        destroy: '/admin/workflow/deleteworkflowitem'
    }
});

// Typical JsonReader.  Notice additional meta-data params for defining the core attributes of your json-response
var reader = new Ext.data.JsonReader({
    totalProperty: 'count',
    successProperty: 'success',
    idProperty: 'workflow_item_id',
    messageProperty: 'message',
    root: 'posts'  // <-- New "messageProperty" meta-data
}, [
    {name: 'workflow_item_id'},
    {name: 'workflow_item_type_id'},
    {name: 'name', allowBlank: false},
    {name: 'description'},
    {name: 'workflow_item_type_name'},
    {name: 'prj_kode'},
    {name: 'sit_kode'}
]);

// The new DataWriter component.
var writer = new Ext.data.JsonWriter({
    encode: true,
    writeAllFields: true
});

// Typical Store collecting the Proxy, Reader and Writer together.
var store = new Ext.data.Store({
    id: 'user',
    proxy: proxy,
    reader: reader,
    writer: writer,  // <-- plug a DataWriter into the store just as you would a Reader
    autoSave: true // <-- false would delay executing create, update, destroy requests until specifically told to do so with some [save] buton.
});

// load the store immeditately
store.load();


// A new generic text field
var textField =  new Ext.form.TextField();

// Let's pretend we rendered our grid-columns with meta-data from our ORM framework.
var userColumns =  [
    new Ext.grid.RowNumberer(),
    {header: "Name", width: 140, sortable: true, dataIndex: 'name'},
    {header: "Workflow Type", width: 140, sortable: true, dataIndex: 'workflow_item_type_name'},
    {header: "Project Code", width: 80, sortable: true, dataIndex: 'prj_kode'},
    {header: "Site Code", width: 80, sortable: true, dataIndex: 'sit_kode'}
];

//** Number **//
Ext.apply(Ext.form.VTypes, {
	'numeric': function(){
		
			/*****************************************************************
			DESCRIPTION: Validates that a string contains only valid numbers.
			PARAMETERS:
			   strValue - String to be tested for validity
			RETURNS:
			   True if valid, otherwise false.
			******************************************************************/
			  var objRegExp  =  /(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/;
			  return function(strValue){
				  //check for numeric characters
				  return objRegExp.test(strValue);
			  };
	}(),
	'numericText': 'Only numbers are allowed'
});

var projectPopUphandler = function() {

    var aForm =  new Ext.Window({
    id: 'a-form-panel-pjr_kode_button',
    layout: 'absolute',
    minWidth: 300,
    minHeight: 200,
    width: 400,
    height: 400,
    items : [
        {
        x: 10,
        y: 12,
        xtype: 'label',
        text: 'Project Code:'
        },
         new txtboks(80,10,80,'project_code',searchPrjKode),
         {
        x: 170,
        y: 12,
        xtype: 'label',
        text: 'Project Name:'
        },
        new txtboks(240,10,80,'project_name',searchPrjName),
         new SampleGrid('project_list')
    ]

  });
  aForm.title = 'Choose Project';
  aForm.show();
 };

 <?php echo $this->action('index','textfield',null); ?> 
searchPrjKode = function(field,e){
     newUrl = '/default/project/listByParams/name/Prj_Kode/data/' + field.getValue();    prox = Pk+'_proxy';
     gri = Pk+'_grid';
     proxies = Ext.getCmp(gri).getStore();
     proxies.proxy = new Ext.data.HttpProxy({
         url: newUrl
          });
     Ext.getCmp(gri).getStore().reload();

 }
 searchPrjName = function(field,e){
     newUrl = '/default/project/listByParams/name/Prj_Nama/data/' + field.getValue();    prox = Pk+'_proxy';
     gri = Pk+'_grid';
     proxies = Ext.getCmp(gri).getStore();
     proxies.proxy = new Ext.data.HttpProxy({
         url: newUrl
          });
     Ext.getCmp(gri).getStore().reload();

 }


 SampleGrid = function(gridType,yAxis,param){
	    //View column header from grid/columnHeaader
	    var yAxis = yAxis;
	    if (gridType == 'project_list')
	    {
	        <?php echo $this->action('columnHeader','grid',null,array("type" => "project_list")); ?>

	        urlJson = CFG_CLIENT_SERVER_NAME +'<?php echo $this->action('getUrlJson','grid',null,array("type" => "project_list")); ?>';
	        data =  [<?php echo $this->action('mappingField','grid',null,array("type" => "project_list")); ?>];
	        primaryKey = '<?php echo $this->action('getPrimaryKey','grid',null,array("type" => "project")); ?>';
	        Pk = primaryKey;
	        widthGrid = 380;
	        heightGrid = 250;
	    }
	    else if (gridType == 'site_list')
	    {
	        <?php echo $this->action('columnHeader','grid',null,array("type" => "site_list")); ?>
	        if ( Ext.getCmp('prj_kode_text').getValue() == '')
	            {urlJson = CFG_CLIENT_SERVER_NAME +'<?php echo $this->action('getUrlJson','grid',null,array("type" => "site_list")); ?>';}
	        else
	            {urlJson = CFG_CLIENT_SERVER_NAME +'<?php echo $this->action('getUrlJson','grid',null,array("type" => "site_list_param",'noParam' => '1','columnName'=>'prj_kode')); ?>' + Ext.getCmp('prj_kode_text').getValue();}
	        data =  [<?php echo $this->action('mappingField','grid',null,array("type" => "site_list")); ?>];
	        primaryKey = '<?php echo $this->action('getPrimaryKey','grid',null,array("type" => "site")); ?>';
	        Pk = primaryKey;
	        widthGrid = 380;
	        heightGrid = 250;
	    }
	    var stores = new Ext.data.Store({
	        proxy:new Ext.data.HttpProxy({
	        url: urlJson
	         }),
	            reader: new Ext.data.JsonReader({
	        root: 'posts',
	        totalProperty: 'count'
	    },data)
	        });

	if (yAxis == undefined)
	    yAxis=100;
	    SampleGrid.superclass.constructor.call(this, {
	        store: stores,
	        columns: columns,
	        x:0,
	        y:yAxis,
	        id:primaryKey+'_grid',
	        loadMask: true,
	        bbar:[ new Ext.PagingToolbar({
	            pageSize: 100,
	            store: stores,
	            displayInfo: true,
	            displayMsg: 'Displaying data {0} - {1} of {2}',
	            emptyMsg: "No data to display"
	        })],
	        height:heightGrid,
	        width:widthGrid,
	        listeners: {
	                    'rowdblclick': function(g, rowIndex, e){
	                            closeForm = false;
	                            isDblClick = true;
	                            if (gridType == 'project_list')
	                            {
	                                objectName = 'Prj_Kode';
	                                txtBoxChange = 'prj_kode_text';
	                                closeForm = true;
	                                formId = 'a-form-panel-pjr_kode_button';
	                                var prjKode = g.getStore().getAt(rowIndex).get(objectName);
	                               newUrl = '/procurement/procurement/listByParams/name/prj_kode/data/' + prjKode;
	                                prox = 'trano_proxy';
	                                gri = 'trano_grid';
	                                var record = g.getStore().getAt(rowIndex).get(objectName);
	                                Ext.getCmp('prj_kode_text').setValue(record);
	                            }
	                            else if (gridType == 'site_list')
	                            {
	                                objectName = 'sit_kode';
	                                txtBoxChange = 'sit_kode_text';
	                                closeForm = true;
	                                formId = 'a-form-panel-site_kode_button';
	                                var prjNama = g.getStore().getAt(rowIndex).get('sit_nama');
	                                var prjKode = g.getStore().getAt(rowIndex).get('prj_kode');
	                                var sitKode = g.getStore().getAt(rowIndex).get(objectName);
	                                newUrl = '/procurement/procurement/listByParams/name/sit_kode/joinToPod/true/data/' + sitKode + '/Prj_Kode/' + prjKode;
	                                prox = 'trano_proxy';
	                                gri = 'trano_grid';
	                                var record = g.getStore().getAt(rowIndex).get(objectName);
	                                Ext.getCmp('sit_kode_text').setValue(record);
	                            }
	                            if (closeForm)
	                                {
	                                    Ext.getCmp(formId).close();
	                                }
	                            window.setTimeout(function(){
	                                    isDblClick = false;
	                            }, 0);
	                    }
	            }
	    });
	    stores.load();

	}
	Ext.extend(SampleGrid, Ext.grid.GridPanel);

//
//userForm2 = Ext.extend(Ext.form.FormPanel, {
//    renderTo: 'user-form2',
//    iconCls: 'silk-user',
//    frame: true,
//    labelAlign: 'right',
//    title: 'Choose Project Code',
//    width: 400,
//    defaults: {
//        anchor: '100%'
//    },
//    initComponent : function() {
//        this.items = this.buildForm();
//        this.buttons = this.buildUI();
//        userForm.superclass.initComponent.call(this);
//    },
//    buildForm : function() {
//        return [
//            {fieldLabel: 'Project Code',xtype : 'textfield',id : 'prj_kode_text',readOnly: true,name: 'prj_kode'}
//        ];
//    },
//
//    buildUI: function(){
//        return [{
//            text: 'Choose',
//            iconCls: 'silk-user-add',
//            handler: this.chooseProject,
//            scope: this
//        }];
//    },
//    loadRecord : function(rec) {
//        this.record = rec;
//        this.getForm().loadRecord(rec);
//    },
//    chooseProject : function(){
//    	projectPopUphandler();
//    }
//});
//    var sm = new Ext.grid.CheckboxSelectionModel();
//    var storePrj =  new Ext.data.Store({
//            proxy:new Ext.data.HttpProxy({
//	            url: '/default/project/list'
//	         }),
//            reader: new Ext.data.JsonReader({
//                root: 'posts',
//                totalProperty: 'count'
//	        },[
//                {name: 'Prj_Kode'},
//                {name: 'Prj_Nama'}
//            ])
//        });
//    storePrj.load();
//    var gridprj = new Ext.grid.GridPanel({
//        id:'prj-grid',
//        store:storePrj,
//        cm: new Ext.grid.ColumnModel([
//            sm,
//            {header: "Project Code",width: 30, sortable: true, dataIndex: 'Prj_Kode'},
//            {header: "Project Name",sortable: true, dataIndex: 'Prj_Nama'}
//        ]),
//        sm: sm,
//
//        viewConfig: {
//            forceFit:true
//        },
//        width:250,
//        height:200,
//        frame:true
//    });


userForm = Ext.extend(Ext.form.FormPanel, {
    renderTo: 'user-form',
    iconCls: 'silk-user',
    frame: true,
    style: 'margin-top: 10px',
    labelAlign: 'right',
    title: 'Add Workflow -- All Fields are Required',
    width: 400,
    defaults: {
        anchor: '100%'
    }
,
    initComponent : function() {
        this.items = this.buildForm();
        this.buttons = this.buildUI();
        this.addEvents({
            create : true
        });
        userForm.superclass.initComponent.call(this);
    },
//
    buildForm : function() {
        return [
            {fieldLabel: 'Name',name: 'name', xtype: 'textfield'},    
            {fieldLabel: 'Description', name: 'description',xtype : 'textarea'},
//            gridprj,
            {xtype:'trigger', name:'prj_kode',id: 'prj_kode_text',fieldLabel: 'Project Code', triggerClass: 'search-button',
            	allowBlank: true,
				onTriggerClick: function( ){
				projectPopUphandler();
				}
			},
//            {xtype:'trigger', name:'sit_kode',id: 'sit_kode_text',fieldLabel: 'Site Code', hidden: true,  triggerClass: 'search-button',
//				allowBlank: true,
//				onTriggerClick: function( ){
//				sitePopUpHandler();
//				}
//			},
            {fieldLabel: 'Workflow Type', 
             name: 'workflow_item_type_id',
             hiddenName : 'workflow_item_type_id',
             xtype: 'combo',
             triggerAction: 'all',
             mode: 'remote',
             displayField: 'name',
             valueField: 'workflow_item_type_id',
             store: new Ext.data.JsonStore({
                 autoLoad: true,
                 url: '/admin/workflow/listworkflowitemtype',
                 root: 'posts',
                  fields:[
                      { name: "name"},{ name: "workflow_item_type_id"}
                  ]
             })
             }
        ];
    },
//
//    /**
//     * buildUI
//     * @private
//     */
    buildUI: function(){
        return [{
            text: 'Save',
            iconCls: 'icon-save',
            handler: this.onUpdate,
            scope: this
        }, {
            text: 'Create',
            iconCls: 'silk-user-add',
            handler: this.onCreate,
            scope: this
        }, {
            text: 'Reset',
            handler: function(btn, ev){
                this.getForm().reset();
            },
            scope: this
        }];
    },
    loadRecord : function(rec) {
        this.record = rec;
        this.getForm().loadRecord(rec);
    },
    onUpdate : function(btn, ev) {
        if (this.record == null) {
            return;
        }
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid.");
            return false;
        }
        this.getForm().updateRecord(this.record);
    },
    onCreate : function(btn, ev) {
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid");
            return false;
        }
        prjKode =  Ext.getCmp('prj_kode_text').getValue();
        if (prjKode == undefined || prjKode == '')
        {
        	App.setAlert(false, "Project Code is not Selected");
            return false;
        }
        store.proxy.setApi('create','/admin/workflow/addworkflowitem/prj_kode/' + prjKode);
        this.fireEvent('create', this, this.getForm().getValues());
        this.getForm().reset();
    },
    onReset : function(btn, ev) {
        this.fireEvent('update', this, this.getForm().getValues());
        this.getForm().reset();
    }
});



Ext.onReady(function() {
    Ext.QuickTips.init();
    // create user.Form instance (@see UserForm.js)
    var userForms = new userForm({
        renderTo: 'user-form',
        listeners: {
            create : function(fpanel, data) {   // <-- custom "create" event defined in App.user.Form class
                var rec = new userGrids.store.recordType(data);
                userGrids.store.insert(0, rec);
            }
        }
    });
//
//    var userForms2 = new userForm2({
//    	renderTo: 'user-form2'
//    });



/**
 * App.user.Grid
 * A typical EditorGridPanel extension.
 */
userGrid = Ext.extend(Ext.grid.EditorGridPanel, {
    renderTo: 'user-grid',
    iconCls: 'silk-grid',
    frame: true,
    height: 500,
    width: 700,
    style: 'margin-top: 10px',

    initComponent : function() {

        // typical viewConfig
        this.viewConfig = {
            forceFit: true
        };
        // relay the Store's CRUD events into this grid so these events can be conveniently listened-to in our application-code.
        this.relayEvents(this.store, ['destroy','save','update']);

        // build toolbars and buttons.
        this.tbar = this.buildTopToolbar();

        // super
        userGrid.superclass.initComponent.call(this);
    },

    /**
     * buildTopToolbar
     */
    buildTopToolbar : function() {

        var combodata = [
                ['Name',1],
                ['Workflow Type',2],
                ['Project Code',3]
            ];

        var combostore = new Ext.data.ArrayStore({
            fields: ['a', 'b'],
            data : combodata
        });

        var combo = new Ext.form.ComboBox({
            store: combostore,
            displayField:'a',
            valueField: 'b',
            typeAhead: true,
            mode: 'local',
            triggerAction: 'all',
            selectOnFocus:true,
            name:'option',
            width:100,
            style: 'margin-left: 5px',
            value:1,
            id:'option'
        });

        return [{
            text: 'Delete',
            iconCls: 'silk-delete',
            handler: this.onDelete,
            scope: this
        }, '-',{
            xtype:'tbtext',
            text:'Search by'
        },combo,{
            xtype:'textfield',
            style:'margin-left:10px',
            id:'search',
            enableKeyEvents: true,
            listeners:{
                'keyup' : function(txttext,event){
                    var txttext = txttext.getValue();
                    if (txttext != "" && txttext.toString().length >= 2 ){
                        var option = Ext.getCmp('option').getValue();
                        var search = Ext.getCmp('search').getValue();
                        store.proxy.setUrl('/admin/workflow/listworkflowitem/search/' + search + '/option/' + option);
                        store.reload();
                        userGrids.getView().refresh();
                    }
                }
            }
        }];
    },

    /**
     * onSave
     */
    onSave : function(btn, ev) {
        this.store.save();
    },

    /**
     * onDelete
     */
    onDelete : function(btn, ev) {
        var index = this.getSelectionModel().getSelectedCell();
        if (!index) {
            return false;
        }
        var rec = this.store.getAt(index[0]);
        this.store.remove(rec);
    }
});

    
//     create user.Grid instance (@see UserGrid.js)
    var userGrids = new userGrid({
        renderTo: 'user-grid',
        store: store,
        columns : userColumns,
        bbar:[ new Ext.PagingToolbar({
	            pageSize: 100,
	            store: store,
	            displayInfo: true,
	            displayMsg: 'Displaying data {0} - {1} of {2}',
	            emptyMsg: "No data to display"
	        })],
        listeners: {
            rowclick: function(g, index, ev) {
                var rec = g.store.getAt(index);
                userForms.loadRecord(rec);
            },
            destroy : function() {
                userForms.getForm().reset();
            }
        }
    });

});
</script>

 <div id="user-form"></div>
 <div id="user-grid"></div>
