<script>
    window.messageMode  =1;

       window.startup= function()   //called by Hosting page when domready is detected
       {
           console.log(App.gantt.taskStore);
//            sendMessage('Emir Cocot!');
          window.addEventListener
              ? window.addEventListener("message", function(e, a, b){
                      //if ( e.origin !== "http://demos.theactivegroup.com" ) return;
                        console.log(e);
                    },
                false)
                : window.attachEvent('onmessage', function(event){
                   console.log(event.origin);
                });
            /*
          *  Set up the MIF listener
          */
//          window.onhostmessage && onhostmessage (logit, window, false, 'ACK' );
//
//             (timer = setInterval ( function(){
//
//             var notice = 'Frame for '+window.hostMIF.ownerCt.id + ' Is alive' ;
//             if(window.messageMode ==1){
//                //using MIF.sendMessage with 'heartbeat' tag.
//               sendMessage('sendMessage: ' + notice , 'heartbeat');
//            } else {
//
//                //Using parent.postMessage allowing any origin
//                parent.postMessage( 'postMessage: ' + notice , '*' );
//            }
//
//          },5000)) && logit('Bound');


        };

</script>
<script type="text/javascript">

    //Temporary solution for TreeStore.sync() with Callback
    //Fixed at ExtJS 4.1
    
    Ext.data.AbstractStore.override({
      sync: function (config) {
        config = config || {};

        var defaults = { callback: Ext.emptyFn, scope: this };
        //added by bherly
        var defaults2 = { callbackFail: Ext.emptyFn, scope: this };

        config = Ext.apply(defaults, config);
        config = Ext.apply(defaults2, config);

        var me        = this,
            options   = {},
            toCreate  = me.getNewRecords(),
            toUpdate  = me.getUpdatedRecords(),
            toDestroy = me.getRemovedRecords(),
            needsSync = false;

        if (toCreate.length > 0) {
          options.create = toCreate;
          needsSync = true;
        }

        if (toUpdate.length > 0) {
          options.update = toUpdate;
          needsSync = true;
        }

        if (toDestroy.length > 0) {
          options.destroy = toDestroy;
          needsSync = true;
        }

        if (needsSync && me.fireEvent('beforesync', options) !== false) {
          var batch = me.proxy.batch(options, me.getBatchListeners());
          batch.on('complete', Ext.bind(config.callback, config.scope, [this, options]), this, {single:true});
            //added by bherly
          batch.on('exception', Ext.bind(config.callbackFail, config.scope, [this, options]), this, {single:true});
        }
      }
    });
    // End of override...
    
    Ext.define("MyApp.contextMenu", {
    extend : "Gnt.plugin.TaskContextMenu",
    activateMenu: function (c, b) {
        b.stopEvent();
		this.rec = c;

        //yg boleh tampil :P
        var allowed = [
            this.texts.deleteDependency
        ];
        var a = this.query("[requiresTask]");
		Ext.each(a, function (d) {
			d.setDisabled(!c);
        });
        var z = this.query("[text]");
		Ext.each(z, function (d) {
            if (allowed.indexOf(d.text) < 0)
            {
                d.hide();
//                d.setDisabled(true);
            }
		});
        this.showAt(b.getXY())
    }
    });

    Ext.define("MyApp.DemoGanttPanel", {
    extend : "Gnt.panel.Gantt",
    requires : [
        "MyApp.contextMenu",
//        'Gnt.plugin.TaskContextMenu',
        'Gnt.column.StartDate',
        'Gnt.column.EndDate',
        'Gnt.column.Duration',
        'Gnt.column.PercentDone',
        'Gnt.column.ResourceAssignment',
        'Sch.plugin.TreeCellEditing',
        'Sch.plugin.Pan'
    ],
    rightLabelField : 'Responsible',
    highlightWeekends : true,
    cascadeChanges : true,
    showTodayLine : true,
    loadMask : true,
    stripeRows : true,
    enableProgressBarResize : true,

    initComponent : function() {
        var contextMenu = Ext.create("MyApp.contextMenu");
//    contextMenu.on({"itemcontextmenu": function(b, a, d, c, f){
//
//    },scope : this});
        Ext.apply(this, {
            leftLabelField : {
                dataIndex : 'Name'
//                editor : { xtype : 'textfield' }
            },

            // Add some extra functionality
            plugins : [
                contextMenu,
                Ext.create("Sch.plugin.Pan"),
                Ext.create('Sch.plugin.TreeCellEditing', { clicksToEdit: 1 })
            ],

            // Define an HTML template for the tooltip
            tooltipTpl : new Ext.XTemplate(
                '<h4 class="tipHeader">{Name}</h4>',
                '<table class="taskTip">',
                    '<tr><td>Start:</td> <td align="right">{[Ext.Date.format(values.StartDate, "y-m-d")]}</td></tr>',
                    '<tr><td>End:</td> <td align="right">{[Ext.Date.format(Ext.Date.add(values.EndDate, Ext.Date.MILLI, -1), "y-m-d")]}</td></tr>',
                    '<tr><td>Progress:</td><td align="right">{PercentDone}%</td></tr>',
                '</table>'
            ).compile(),

            // Define the static columns
            columns : [
                {
                    xtype : 'treecolumn',
                    header: 'Tasks',
                    sortable: true,
                    dataIndex: 'Name',
                    width: 200
                    //Disable cell editing
//                    field: {
//                        allowBlank: false
//                    }
                },
                {
                    xtype : 'startdatecolumn'
                },
                {
                    xtype : 'durationcolumn'
                }
//                {
//                    xtype : 'percentdonecolumn',
//                    width : 50
//                }
            ],

             // Define the buttons that are available for user interaction
            tbar : [{
                xtype: 'buttongroup',
                title: 'Navigation',
                columns: 2,
                defaults: {
                    scale: 'large'
                },
                items: [{
                    iconCls : 'icon-prev',
                    scope : this,
                    handler : function() {
                        this.shiftPrevious();
                    }
                },
                {
                    iconCls : 'icon-next',
                    scope : this,
                    handler : function() {
                        this.shiftNext();
                    }
                }]
            }
//            {
//                xtype: 'button',
//                text: 'save',
//                scope: this,
//                handler: function() {
//                    this.getTaskStore().sync();
//                }
//            }
//            {
//                xtype: 'buttongroup',
//                title: 'View tools',
//                columns: 2,
//                defaults: {
//                    scale: 'small'
//                },
//                items: [
//                    {
//                        text : 'Collapse all',
//                        iconCls : 'icon-collapseall',
//                        scope : this,
//                        handler : function() {
//                            this.collapseAll();
//                        }
//                    },
//                    {
//                        text : 'Zoom to fit',
//                        iconCls : 'zoomfit',
//                        handler : function() {
//                            this.zoomToFit();
//                        },
//                        scope : this
//                    },
//                    {
//                        text : 'Expand all',
//                        iconCls : 'icon-expandall',
//                        scope : this,
//                        handler : function() {
//                            this.expandAll();
//                        }
//                    }
//                ]
//            },
//            {
//                xtype: 'buttongroup',
//                title: 'View resolution',
//                columns: 2,
//                defaults: {
//                    scale: 'large'
//                },
//                items: [{
//                        text: '10 weeks',
//                        scope : this,
//                        handler : function() {
//                            this.switchViewPreset('weekAndDayLetter');
//                        }
//                    },
//                    {
//                        text: '1 year',
//                        scope : this,
//                        handler : function() {
//                            this.switchViewPreset('monthAndYear');
//                        }
//                    }
//                ]},
//                '->',
//                {
//                    xtype: 'buttongroup',
//                    title: 'Try some features...',
//                    columns : 2,
//                    items: [
//                    {
//                        text : 'Highlight critical chain',
//                        iconCls : 'togglebutton',
//                        scope : this,
//                        enableToggle : true,
//                        handler : function(btn) {
//                            var v = this.getSchedulingView();
//                            if (btn.pressed) {
//                                v.highlightCriticalPaths(true);
//                            } else {
//                                v.unhighlightCriticalPaths(true);
//                            }
//                        }
//                    },
//                    {
//                        iconCls : 'action',
//                        text : 'Highlight tasks longer than 7 days',
//                        scope : this,
//                        handler : function(btn) {
//                            this.taskStore.getRootNode().cascadeBy(function(task) {
//                                if (Sch.util.Date.getDurationInDays(task.get('StartDate'), task.get('EndDate')) > 7) {
//                                    var el = this.getSchedulingView().getElementFromEventRecord(task);
//                                    el && el.frame('lime');
//                                }
//                            }, this);
//                        }
//                    },
//                    {
//                        iconCls : 'togglebutton',
//                        text : 'Filter: Tasks with progress < 30%',
//                        scope : this,
//                        enableToggle : true,
//                        toggleGroup : 'filter',
//                        handler : function(btn) {
//                            if (btn.pressed) {
//                                this.taskStore.filter(function(task) {
//                                    return task.get('PercentDone') < 30;
//                                });
//                            } else {
//                                this.taskStore.clearFilter();
//                            }
//                        }
//                    },
//                    {
//                        iconCls : 'action',
//                        text : 'Scroll to last task',
//                        scope : this,
//
//                        handler : function(btn) {
//                            var latestEndDate = new Date(0),
//                                latest;
//                            this.taskStore.getRootNode().cascadeBy(function(task) {
//                                if (task.get('EndDate') >= latestEndDate) {
//                                    latestEndDate = task.get('EndDate');
//                                    latest = task;
//                                }
//                            });
//                            this.getSchedulingView().scrollEventIntoView(latest, true);
//                        }
//                    },
//                    {
//                        iconCls : 'togglebutton',
//                        text : 'Cascade changes',
//                        scope : this,
//                        enableToggle : true,
//                        handler : function(btn) {
//                            this.setCascadeChanges(btn.pressed);
//                        }
//                    },
//                    {
//                        xtype : 'textfield',
//                        emptyText : 'Search for task...',
//                        scope : this,
//                        width:150,
//                        enableKeyEvents : true,
//                        listeners : {
//                            keyup : {
//                                fn : function(field) {
//                                    var value   = field.getValue();
//
//                                    if (value) {
//                                        this.taskStore.filter('Name', field.getValue(), true, false);
//                                    } else {
//                                        this.taskStore.clearFilter()
//                                    }
//                                },
//                                scope : this
//                            }
//                        }
//                    }]
//                }
            ]
        });

        this.callParent(arguments);
    }
});
</script>
<script type="text/javascript">
    Ext.ns('App');
//Ext.Loader.setConfig({enabled: true, disableCaching : false });
//Ext.Loader.setPath('Gnt', '../../js/Gnt');
//Ext.Loader.setPath('Sch', '../../../ExtScheduler2.x/js/Sch');
//Ext.Loader.setPath('MyApp', '.');

    Ext.require([
        'MyApp.DemoGanttPanel'
    ]);

    var gantt;
    Ext.onReady(function() {
        Ext.QuickTips.init();

        App.Gantt.init();
//        App.Gantt.getTask();
        
    });


    App.Gantt = {
        // Initialize application
        init : function(serverCfg) {
            gantt = this.createGantt();

            var vp = Ext.create("Ext.Viewport", {
                layout  : 'border',
                items   : [
                    {
                        region      : 'north',
                        contentEl   : 'north'
                    },
                    gantt
                ]
            });
        },

        createGantt : function() {
            var taskStore = Ext.create("Gnt.data.TaskStore", {
                sorters : 'StartDate',
                autoLoad: true,
                proxy: {
                    type: 'ajax',
                    api: {
                        read: '/extjs4/gantt/read/type/task/prjKode/<?=$this->prjKode?>/sitKode/<?=$this->sitKode?>',
                        update: '/extjs4/gantt/updatetask/prjKode/<?=$this->prjKode?>/sitKode/<?=$this->sitKode?>'
                    },
//                    data: [{"Name":"Planning for Q05006 - 004","BaselineStartDate":"2011-10-13","BaselineEndDate":"2011-12-17","StartDate":"2011-10-13","EndDate":"2011-12-17","Id":1,"Priority":1,"Responsible":"","PercentDone":100,"expanded":true,"children":[{"Name":"1026 - Material for Common RF Work","BaselineStartDate":"2011-10-13","BaselineEndDate":"2011-11-17","StartDate":"2011-10-13","EndDate":"2011-11-17","ParentId":1,"Id":100,"Priority":1,"Responsible":"","PercentDone":0,"leaf":true},{"Name":"1027 - Material for RF","BaselineStartDate":"2011-10-13","BaselineEndDate":"2011-11-12","StartDate":"2011-10-13","EndDate":"2011-11-12","ParentId":1,"Id":101,"Priority":1,"Responsible":"","PercentDone":0,"leaf":true}
//                    ,{"Name":"asdf","BaselineStartDate":"2011-10-13","BaselineEndDate":"2011-11-12","StartDate":"2011-10-13","EndDate":"2011-11-12","ParentId":1,"Id":102,"Priority":1,"Responsible":"","PercentDone":0,"leaf":true}
//                    ,{"Name":"sss","BaselineStartDate":"2011-10-13","BaselineEndDate":"2011-11-12","StartDate":"2011-10-13","EndDate":"2011-11-12","ParentId":1,"Id":103,"Priority":1,"Responsible":"","PercentDone":0,"leaf":true}]}],
                    reader: {
                        type: 'json'
                    },
                    writer: {
                        type: 'json',
                        writeAllFields: true,
                        allowSingle: false
                    }
                }
            });

            var dependencyStore = Ext.create("Ext.data.Store", {
                autoLoad: true,
                model : 'Gnt.model.Dependency',
                proxy: {
                    type: 'ajax',
                    api: {
                        read: '/extjs4/gantt/read/type/depend/prjKode/<?=$this->prjKode?>/sitKode/<?=$this->sitKode?>',
                        create: '/extjs4/gantt/createdepend/prjKode/<?=$this->prjKode?>/sitKode/<?=$this->sitKode?>'
                    },
                    reader: {
                        type: 'json'
                    },
                    writer: {
                        type: 'json',
                        writeAllFields: true,
                        allowSingle: false
                    }
                }
            });

            dependencyStore.on({
                add: function(s, records, index, options) {
                    var jumRec = s.count();
                    var newId = parseFloat(jumRec);

                    records[0].data['Id'] = newId;
                }
            });

            var g = Ext.create("MyApp.DemoGanttPanel", {
                region          : 'center',
                selModel        : new Ext.selection.TreeModel({ ignoreRightMouseSelection : false }),
                taskStore       : taskStore,
                dependencyStore : dependencyStore,

                multiSelect     : true,
//                snapToIncrement : true,    // Uncomment this line to get snapping behavior for resizing/dragging.

                startDate       : new Date(<?=date('Y')?>,<?=(floatval(date('m')) - 1)?>,<?=intval(date('d'))?>),
                endDate         : Sch.util.Date.add(new Date(<?=date('Y')?>,<?=(floatval(date('m')) - 1)?>,<?=intval(date('d'))?>), Sch.util.Date.WEEK, 20),
//                startDate       : new Date(2010,0,4),
//                endDate         : Sch.util.Date.add(new Date(2010,0,4), Sch.util.Date.WEEK, 20),

                viewPreset      : 'weekAndMonth'//'weekAndDayLetter'
            });

            g.on({
                dependencydblclick : function(ga, rec) {
//                    var from    = taskStore.getNodeById(rec.get('From')).get('Name'),
//                        to      = taskStore.getNodeById(rec.get('To')).get('Name');
//
//                    Ext.Msg.alert('Information', Ext.String.format('You clicked the link between "{0}" and "{1}"', from, to));
                },
                scope : this
            });

            return g;
        },

        getTask: function() {

            if (gantt.getDependencyStore().count() == 0)
            {
                sendMessage('dependnotexist');
                return false;
            }

            gantt.getDependencyStore().sync({
              callback: function(){
                  //jika berhasil masuk ke memcache
                    sendMessage('dependtrue');
              },
              callbackFail: function(){
                  //jika gagal masuk ke memcache
                sendMessage('dependfalse');
              },
              scope:    this
            });
            gantt.getTaskStore().sync({
              callback: function(){
                  //jika berhasil masuk ke memcache
                    sendMessage('tasktrue');
              },
              callbackFail: function(){
                  //jika gagal masuk ke memcache
                sendMessage('taskfalse');
              },
              scope:    this
            });
        }
    };


window.startup2= function()   //called by Hosting page when domready is detected
        {
            try
            {
                App.Gantt.getTask();
            }
            catch(err)
            {
                sendMessage(err.description);
            }
        };
//    window.startup3= function()   //called by Hosting page when domready is detected
//    {
//           sendMessage('asdf');
//    };
</script>
    <div id="north">
    </div>