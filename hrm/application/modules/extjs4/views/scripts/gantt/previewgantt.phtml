<script type="text/javascript">

    //Temporary solution for TreeStore.sync() with Callback
    //Fixed at ExtJS 4.1

    Ext.define("MyApp.contextMenu", {
    extend : "Gnt.plugin.TaskContextMenu",
    activateMenu: function (c, b) {
        b.stopEvent();
		this.rec = c;

        //yg boleh tampil :P
        var allowed = [
//            this.texts.deleteDependency
        ];
        var a = this.query("[requiresTask]");
		Ext.each(a, function (d) {
			d.setDisabled(!c);
        });
        var z = this.query("[text]");
		Ext.each(z, function (d) {
            if (allowed.indexOf(d.text) < 0)
            {
                d.hide();
//                d.setDisabled(true);
            }
		});
        this.showAt(b.getXY())
    }
    });

    Ext.define("MyApp.DemoGanttPanel", {
    extend : "Gnt.panel.Gantt",
    requires : [
        "MyApp.contextMenu",
//        'Gnt.plugin.TaskContextMenu',
        'Gnt.column.StartDate',
        'Gnt.column.EndDate',
        'Gnt.column.Duration',
        'Gnt.column.PercentDone',
        'Gnt.column.ResourceAssignment',
        'Sch.plugin.TreeCellEditing',
        'Sch.plugin.Pan'
    ],
    rightLabelField : 'Responsible',
    highlightWeekends : true,
    cascadeChanges : true,
    showTodayLine : true,
    loadMask : true,
    stripeRows : true,
    enableProgressBarResize : true,

    initComponent : function() {
        var contextMenu = Ext.create("MyApp.contextMenu");
//    contextMenu.on({"itemcontextmenu": function(b, a, d, c, f){
//
//    },scope : this});
        Ext.apply(this, {
            leftLabelField : {
                dataIndex : 'Name'
//                editor : { xtype : 'textfield' }
            },

            // Add some extra functionality
            plugins : [
                contextMenu,
                Ext.create("Sch.plugin.Pan"),
                Ext.create('Sch.plugin.TreeCellEditing', { clicksToEdit: 1 })
            ],

            // Define an HTML template for the tooltip
            tooltipTpl : new Ext.XTemplate(
                '<h4 class="tipHeader">{Name}</h4>',
                '<table class="taskTip">',
                    '<tr><td>Start:</td> <td align="right">{[Ext.Date.format(values.StartDate, "y-m-d")]}</td></tr>',
                    '<tr><td>End:</td> <td align="right">{[Ext.Date.format(Ext.Date.add(values.EndDate, Ext.Date.MILLI, -1), "y-m-d")]}</td></tr>',
                    '<tr><td>Progress:</td><td align="right">{PercentDone}%</td></tr>',
                '</table>'
            ).compile(),

            // Define the static columns
            columns : [
                {
                    xtype : 'treecolumn',
                    header: 'Tasks',
                    sortable: true,
                    dataIndex: 'Name',
                    width: 200
                    //Disable cell editing
//                    field: {
//                        allowBlank: false
//                    }
                },
                {
                    xtype : 'startdatecolumn'
                },
                {
                    xtype : 'durationcolumn'
                }
//                {
//                    xtype : 'percentdonecolumn',
//                    width : 50
//                }
            ],

             // Define the buttons that are available for user interaction
            tbar : [{
                xtype: 'buttongroup',
                title: 'Navigation',
                columns: 2,
                defaults: {
                    scale: 'large'
                },
                items: [{
                    iconCls : 'icon-prev',
                    scope : this,
                    handler : function() {
                        this.shiftPrevious();
                    }
                },
                {
                    iconCls : 'icon-next',
                    scope : this,
                    handler : function() {
                        this.shiftNext();
                    }
                }]
            },
//            {
//                xtype: 'button',
//                text: 'save',
//                scope: this,
//                handler: function() {
//                    this.getTaskStore().sync();
//                }
//            }
            {
                xtype: 'buttongroup',
                title: 'View tools',
                columns: 2,
                defaults: {
                    scale: 'small'
                },
                items: [
                    {
                        text : 'Collapse all',
                        iconCls : 'icon-collapseall',
                        scope : this,
                        handler : function() {
                            this.collapseAll();
                        }
                    },
                    {
                        text : 'Zoom to fit',
                        iconCls : 'zoomfit',
                        handler : function() {
                            this.zoomToFit();
                        },
                        scope : this
                    },
                    {
                        text : 'Expand all',
                        iconCls : 'icon-expandall',
                        scope : this,
                        handler : function() {
                            this.expandAll();
                        }
                    }
                ]
            },
            {
                xtype: 'buttongroup',
                title: 'View resolution',
                columns: 2,
                defaults: {
                    scale: 'large'
                },
                items: [{
                        text: '10 weeks',
                        scope : this,
                        handler : function() {
                            this.switchViewPreset('weekAndDayLetter');
                        }
                    },
                    {
                        text: '1 year',
                        scope : this,
                        handler : function() {
                            this.switchViewPreset('monthAndYear');
                        }
                    }
                ]}
            ]
        });

        this.callParent(arguments);
    }
});
</script>
<script type="text/javascript">
    Ext.ns('App');

    Ext.require([
        'MyApp.DemoGanttPanel'
    ]);

    var gantt;
    Ext.onReady(function() {
        Ext.QuickTips.init();

        App.Gantt.init();

    });


    App.Gantt = {
        // Initialize application
        init : function(serverCfg) {
            gantt = this.createGantt();

            var vp = Ext.create("Ext.Viewport", {
                layout  : 'border',
                items   : [
                    {
                        region      : 'north',
                        contentEl   : 'north'
                    },
                    gantt
                ]
            });
        },

        createGantt : function() {
            var taskStore = Ext.create("Gnt.data.TaskStore", {
                sorters : 'StartDate',
                autoLoad: true,
                proxy: {
                    type: 'memory',
                    reader: {
                        type: 'json'
                    },
                    data: <?=$this->jsonTask?>
                }
            });

            var dependencyStore = Ext.create("Ext.data.Store", {
                autoLoad: true,
                model : 'Gnt.model.Dependency',
                proxy: {
                    type: 'memory',
                    reader: {
                        type: 'json'
                    },
                    data: <?=$this->jsonDepend?>
                }
            });

            var g = Ext.create("MyApp.DemoGanttPanel", {
                region          : 'center',
                selModel        : new Ext.selection.TreeModel({ ignoreRightMouseSelection : false }),
                taskStore       : taskStore,
                dependencyStore : dependencyStore,

                readOnly        : true,
                multiSelect     : true,
                weekendsAreWorkdays: true,
//                snapToIncrement : true,    // Uncomment this line to get snapping behavior for resizing/dragging.

                startDate       : new Date(<?=date('Y',strtotime('-1 days', strtotime($this->startDate)))?>,<?=(floatval(date('m',strtotime('-1 days',strtotime($this->startDate)))) - 1)?>,<?=intval(date('d',strtotime('-1 days',strtotime($this->startDate))))?>),
                endDate         : Sch.util.Date.add(new Date(<?=date('Y',strtotime($this->startDate))?>,<?=(floatval(date('m',strtotime($this->startDate)) - 1))?>,<?=intval(date('d',strtotime($this->startDate)))?>), Sch.util.Date.WEEK, 20),
//                startDate       : new Date(2010,0,4),
//                endDate         : Sch.util.Date.add(new Date(2010,0,4), Sch.util.Date.WEEK, 20),

                viewPreset      : 'weekAndDayLetter'
            });

            return g;
        }
    };

</script>
    <div id="north">
    </div>