<script type="text/javascript">


    function getExchangeRate()
    {
        Ext.Ajax.request({
            url: '/default/valuta/getexchangerate',
            method:'POST',
            success: function(result, request){
                    var returnData = Ext.util.JSON.decode(result.responseText);
                    if(returnData.success) {
                        Ext.getCmp('rate_text').setValue(returnData.rate);
                    }
                }
                ,failure:function( action){
            if(action.failureType == 'server'){
            obj = Ext.util.JSON.decode(action.response.responseText);
            Ext.Msg.alert('Error!', obj.errors.reason);
            }
            }
        });
    }

    var totDebit = 0;
    var totCredit = 0;

    Ext.onReady(function(){

        var bankData = '';
        var coas = Ext.util.JSON.decode('<?=$this->coa?>');
        Ext.QuickTips.init();

        Ext.apply(Ext.form.VTypes,{

        numericText: "Only numbers are allowed.",
        numericMask: /[0-9]/,
        numericRe: /(^-?dd*.d*$)|(^-?dd*$)|(^-?.dd*$)/,
        numeric: function(v) {
            return function() { return this.numericRe.test(v)} ;
	    }

        });

        var proxy = new Ext.data.HttpProxy({
           url : 'asdf'
        });

        var paidliststore = new Ext.data.Store ({
            id:'store-paidlist',
            proxy:proxy,
            reader: new Ext.data.JsonReader ({
                root:'data'
            },[
                {name:'trano',type:'String'},
                {name:'tgl',type:'String'},
                {name:'username',type:'String'},
                {name:'statusppn',type:'String'},
                {name:'val_kode',type:'String'},
                {name:'total',type:'int'},
                {name:'tipe',type:'String'}
            ])

        })

        var itemstore = new Ext.data.Store ({

            id:'store-item',
            proxy:proxy,
            reader: new Ext.data.JsonReader ({
                root:'data',
                totalProperty:'total'
            },[
                {
                    name:'nama_brg',
                    type:'String'
                },{
                    name:'val_kode',
                    type:'String'
                },{
                    name:'total',
                    type:'int'
                }
            ])
        })




        var paidlistgrid = new Ext.grid.GridPanel ({

            store:paidliststore,
            id:'paidlist-grid',
            height:124,
            columns:[
            new Ext.grid.RowNumberer(),
            {
                header:'Trano',
                dataIndex:'trano',
                align:'center',
                width:120
            },{
                header:'Date',
                dataIndex:'tgl',
                align:'center',
                width:100
            },{
                header:'User',
                dataIndex:'username',
                align:'center',
                width:60
            },{
                header:'PPN',
                dataIndex:'statusppn',
                align:'center',
                width:40
            },{
                header:'Valuta',
                dataIndex:'val_kode',
                align:'center',
                width:80
            },{
                header:'Total',
                dataIndex:'total',
                align:'center',
                width:100,
                renderer: function(v){
                    return v ? Ext.util.Format.number(v, '0,0') : '';
                }
            }]

        })

        var editor = new Ext.ux.grid.RowEditor({
            saveText: 'Update',
            clicksToEdit: 1,
            listeners: {
                'canceledit': function(ed,close){
                    ed.record.cancelEdit();
                },
                'stopedit': function(ed,fields,rec) {
                    if (rec.data['debit'] == 0 && rec.data['credit'] == 0)
                    {
                        Ext.each(fields, function (t, index){
                            if (t.id == 'credit' || t.id == 'debit')
                            {
                                t.markInvalid('Debit or Credit field must be greater than 0!');
                            }
                        });

                        return false;
                    }

                },
                'afteredit': function(ed,obj,rec,index){
                    var recs = store_jurnal.getAt(index);
                    var coaKode = Ext.getCmp('coa_kode_text').getValue();
                    if (coaKode != '')
                        recs.data['coa_kode'] = coaKode;

                    ed.record.commit();
                    hitungTotal();
//                    var total = parseFloat(recs.data['total']);
//                    var totalPayment = parseFloat(recs.data['total_payment']);
//
//                    if (totalPayment > total)
//                    {
//                        Ext.Msg.alert('Error','Total Payment is greater than Total Voucher');
//                        return false;
//                    }
//                    ed.record.commit(); //Commit changes into store
//
//                    var tot = 0;
//                    store_payment.each(function(stores){
//                        tot += parseFloat(stores.data['total_payment']);
//                    });
//
//                    Ext.getCmp('pay-value').setValue(tot);

                },
                'filtercell' : function(rowEditor, fields, record){
                    if (record.get('tipe') == 'AR')
                    {
                        Ext.each(fields, function (t, index){
                            if (t.id != 'debit' && t.id != 'credit')
                            {
                                t.disable();
                            }
                        });
                    }
                    else
                    {
                        Ext.each(fields, function (t, index){
                            t.enable();
                        });
                    }
                },
                'canceledit' : function(roweditor, forced){
                    if(forced){
                        var record = store_jurnal.getAt(0);
                        if(record.get('coa_kode') == '' || (record.get('debit') == 0 && record.get('credit') == 0)){
                            store_jurnal.remove(record);
                            grid_jurnal.getView().refresh();
                        }
                    }
                }
            }
        });

        var rowactions = new Ext.ux.grid.RowActions({
            actions:[
                {
                    iconCls:'icon-edit',
                    qtip:'Edit',
                    id: 'edit',
                    callback: function (grid,record,action,row,col)
                    {
                        editor.startEditing(row,false);
                    }
                },
                {
                    iconCls:'icon-delete',
                    qtip:'Delete',
                    callback: function (grid,record,action,row,col)
                    {
                        Ext.MessageBox.confirm('Confirm', 'This action will delete this item, Proceed?',
                            function(btn)
                            {
                                if (btn == 'yes')
                                {
                                    if (record && record.get('tipe') != 'AR')
                                    {
                                        store_jurnal.remove(record);
                                        grid_jurnal.getView().refresh();
                                        hitungTotal();
                                    }
                                }
                            }
                        );
                    }
                }
            ]
            ,index: 'actions'
            ,header: ''
        });

        var record = new Ext.data.Record.create([
            {name:'coa_kode'},
            {name:'coa_nama'},
            {name:'debit'},
            {name:'credit'},
            {name:'val_kode'}
        ])

        var store_jurnal = new Ext.data.Store ({
            id:'store-jurnal',
            reader:new Ext.data.JsonReader({
                root:'data',
                totalProperty:'total',
                fields:record
            })
        })

        var grid_jurnal = new Ext.grid.GridPanel ({
            store:store_jurnal,
            border: false,
            frame: false,
            height:200,
            id:'grid-jurnal',
            viewConfig:{
                forceFit:true
            },
            plugins: [editor, rowactions],
            columns:[
            new Ext.grid.RowNumberer(),
            rowactions,
//            {
//                header: '',
//                renderer: function (v,p,r)
//                {
//                    return '<a href="#"><img src="/images/g_rec_upd.png"></a>';
//                },
//                width: 30
//            },
            {
                header:'COA Code',
                dataIndex:'coa_kode',
                sortable:true,
                editor: {
                    xtype: 'coaselector',
                    id: 'coa-select',
                    Selectid: 'coa_kode_text',
                    Nameid: 'coa_nama_text',
                    showName: false,
                    editorInstance: editor,
                    SelectWidth: 100
                }
            },{
                header:'COA Name',
                dataIndex:'coa_nama',
                sortable:true,
                editor: {
                    xtype: 'textfield',
                    id: 'coa_nama_text',
                    readOnly: true
                }
            }
//            ,{
//                header:'Valuta',
//                dataIndex:'val_kode',
//                sortable:true,
//                align:'right'
//            }
            ,{
                header:'Debit',
                dataIndex:'debit',
                sortable:true,
                renderer: function(v){
                    return v ? Ext.util.Format.number(v, '0,0.00') : '';
                },
                align:'right',
                editor: {
                    xtype: 'numberfield',
                    allowBlank: false,
                    id:'debit',
                    minValue: 0,
                    enableKeyEvents: true,
                    listeners: {
                        'keyup': function (txttext,event)
                        {
                            var debit = parseFloat(txttext.getValue().toString().replace(/\$|\,/g,''));
                            if (debit > 0)
                            {
                                Ext.getCmp('credit').setValue(0);
                            }
                        }
                    }
                }
            },{
                header:'Credit',
                dataIndex:'credit',
                sortable:true,
                renderer: function(v){
                    return v ? Ext.util.Format.number(v, '0,0.00') : '';
                },
                align:'right',
                editor: {
                    xtype: 'numberfield',
                    allowBlank: false,
                    id:'credit',
                    minValue: 0,
                    enableKeyEvents: true,
                    listeners: {
                        'keyup': function (txttext,event)
                        {
                            var credit = parseFloat(txttext.getValue().toString().replace(/\$|\,/g,''));
                            if (credit > 0)
                            {
                                Ext.getCmp('debit').setValue(0);
                            }
                        }
                    }
                }
            }
          ],
            tbar: [
                {
                    iconCls: 'icon-add-new',
                    text: 'Add New Journal',
                    handler: function(){
                        var e = new record({
                            coa_kode: '',
                            coa_nama: '',
                            debit: 0,
                            credit: 0,
                            val_kode: 'IDR'
                        });
                        editor.stopEditing();
                        store_jurnal.insert(0, e);
                        grid_jurnal.getView().refresh();
                        grid_jurnal.getSelectionModel().selectRow(0);
                        editor.startEditing(0);
                    }
                }
            ],
            bbar: new Ext.Toolbar({
                id: 'total-bbar',
                style:"text-align:right",
                items: [{
                         xtype: 'label',
                         id: 'debittotal',
                        style:'color:red;font-weight:bold;margin-right:20px;font-size:12'
                        },
                        {
                         xtype: 'label',
                         id: 'credittotal',
                        style:'color:red;font-weight:bold;font-size:12;margin-right:10px'
                        }],
                layout: 'fit'
            })
        });

        function coaAR()
        {
            var total = parseFloat(Ext.getCmp('payment-value').getValue().toString().replace(/\$|\,/g,''));
            var val_kode = Ext.getCmp('option-paymentvaluta').getValue();
            var rateidr = parseFloat(Ext.getCmp('rate_text').getValue().toString().replace(/\$|\,/g,''));

            if (store_jurnal.getCount() > 0)
            {
                store_jurnal.each(function(stores){
                    if (stores.get('tipe') != '')
                        store_jurnal.remove(stores);
                });
            }

            if (total > 0)
            {
                Ext.Ajax.request({
                    url: '/finance/coa/getcoabanktype',
                    method:'POST',
                    params: {
                        type: Ext.getCmp('trano-type').getRawValue()
                    },
                    success: function(result, request){
                        var returnData = Ext.util.JSON.decode(result.responseText);
                        if(returnData.success) {

                            if (val_kode == 'IDR')
                            {
                                var coa = coas.coaARIDR.coa_kode, coa2 = '',
                                    coanama = coas.coaARIDR.coa_nama, coa2nama = '';

                                Ext.each(returnData.data.data,function(coaList){
                                    var e = new record({
                                        coa_kode: coaList.coa_kode,
                                        coa_nama: coaList.coa_nama,
                                        debit: 0,
                                        credit: total,
                                        tipe: 'AR'
                                    });
                                    store_jurnal.insert(0, e);
                                });
                            }
                            else
                            {    var coa = coas.coaARUSD.coa_kode, coa2 = coas.coaARUSDEx.coa_kode,
                                     coanama = coas.coaARUSD.coa_nama, coa2nama = coas.coaARUSDEx.coa_nama;

                                Ext.each(returnData.data.data,function(coaList){

                                    var totalEx = total;
                                    if (coaList.coa_nama.toString().search('Exchange') > 0)
                                    {
                                        totalEx = (total * rateidr) - total;
                                    }

                                    var e = new record({
                                        coa_kode: coaList.coa_kode,
                                        coa_nama: coaList.coa_nama,
                                        debit: 0,
                                        credit: totalEx,
                                        tipe: 'AR'
                                    });
                                    store_jurnal.insert(0, e);
                                });
                            }

                            var e = new record({
                                coa_kode: coa,
                                coa_nama: coanama,
                                debit: total,
                                credit: 0,
                                tipe: 'AR'
                            });
                            store_jurnal.insert(0, e);

                            if (coa2 != '')
                            {
                                var e = new record({
                                    coa_kode: coa,
                                    coa_nama: coanama,
                                    debit: (total * rateidr) - total,
                                    credit: 0,
                                    tipe: 'AR'
                                });
                                store_jurnal.insert(0, e);
                            }

                            grid_jurnal.getView().refresh();
                            hitungTotal();
                        }
                        else
                        {
                            Ext.Msg.alert('Error!', returnData.msg);
                            return false
                        }
                    },
                    failure:function( action){
                        if(action.failureType == 'server'){
                            obj = Ext.util.JSON.decode(action.response.responseText);
                            Ext.Msg.alert('Error!', obj.errors.reason);
                        }
                    }
                });

            }
            else
            {
                store_jurnal.removeAll();
            }
        }

        function hitungTotal(cekBalance)
        {
            totDebit = 0;
            totCredit = 0;

            store_jurnal.each(function(items){
                    totDebit += (parseFloat(items.data['debit']));
                    totCredit += (parseFloat(items.data['credit']));

            });

            if(cekBalance != undefined && cekBalance !== false)
            {
                return moneycomp(totDebit,'==',totCredit,2);
            }

            Ext.getCmp('debittotal').setText('Total Debit : ' + Ext.util.Format.number(totDebit, '0,0.00'));
            Ext.getCmp('credittotal').setText('Total Credit : ' + Ext.util.Format.number(totCredit, '0,0.00'));
        }

        function InvoiceBalance ()
        {
            var invoiceval = parseFloat(Ext.getCmp('invoice-value').getValue().toString().replace(/\$|\,/g,''));
            var invoicepaid = parseFloat(Ext.getCmp('invoice-paid').getValue().toString().replace(/\$|\,/g,''));
            var balance = invoiceval - invoicepaid;
            Ext.getCmp('invoice-balance').setValue(balance);
            Ext.getCmp('payment-value').setValue(balance);
            Ext.getCmp('g-total').setValue(balance);
        }

        function SetValueForm (trano)
        {
            Ext.Ajax.request ({
            url:'/finance/invoice/getformpayinvoice/trano/'+trano,
            method:'POST',
            success: function(result,request)
            {
                var returndata = Ext.util.JSON.decode(result.responseText);
                Ext.getCmp('trans-date').setValue(returndata.data.tgl);
                Ext.getCmp('user-input').setValue(returndata.data.username);
                Ext.getCmp('prj_kode').setValue(returndata.data.prj_kode);
                Ext.getCmp('prj_nama').setValue(returndata.data.prj_nama);
                Ext.getCmp('sit_kode').setValue(returndata.data.sit_kode);
                Ext.getCmp('sit_nama').setValue(returndata.data.sit_nama);
                Ext.getCmp('cus_kode').setValue(returndata.data.cus_kode);
                Ext.getCmp('cus_nama').setValue(returndata.data.cus_nama);
                Ext.getCmp('paymentterm').setValue(returndata.data.paymentterm);
                Ext.getCmp('invoice-value').setValue(returndata.data.total);
                Ext.getCmp('IDR-value').setValue(returndata.data.val_kode);
                Ext.getCmp('payment-value').setValue(returndata.data.total);
                Ext.getCmp('g-total').setValue(returndata.data.total);
//                Ext.getCmp('invoice-tax').setValue('');
                Ext.getCmp('IDR-paid').setValue(returndata.data.val_kode);
                Ext.getCmp('IDR-balance').setValue(returndata.data.val_kode);
                Ext.getCmp('invoice-paid').setValue(returndata.sumpaidlist);

                Ext.getCmp('option-paymentvaluta').setValue(returndata.data.val_kode);
                Ext.getCmp('option-paymentvaluta').setRawValue(returndata.data.val_kode);

                if (parseFloat(returndata.sumpaidlist) > 0)
                {
                    Ext.getCmp('paid-list').expand();
                }
                else
                {
                    Ext.getCmp('paid-list').collapse();
                }

                bankData = {
                    bnk_kode: returndata.data.bnk_kode,
                    bnk_nama: returndata.data.bnk_nama,
                    bnk_cabang: returndata.data.bnk_cabang,
                    bnk_norek: returndata.data.bnk_norek,
                    bnk_noreknama: returndata.data.bnk_noreknama,
                    bnk_alamat: returndata.data.bnk_alamat,
                    bnk_kota: returndata.data.bnk_kota,
                    coa_kode: returndata.data.coa_kode,
                    coa_nama: returndata.data.coa_nama,
                    paymentterm: returndata.data.paymentterm
                };
                InvoiceBalance();
                coaAR();
            },
            failure:function(action)
            {
                if (action.failureType == 'server')
                {
                    obj = Ext.util.JSON.decode(action.response.responseText);
                    Ext.Msg.alert(('Error!'),obj.errors.reason);
                }
            }
        })
    }

    function showInvoiceList ()
    {
        var combodata = [
                ['Trano','trano'],
                ['Project kode','prj_kode'],
                ['Project name','prj_nama'],
                ['Customer kode','cus_kode'],
                ['Site kode','sit_kode'],
                ['Site name','sit_nama']
            ];

        var combostore = new Ext.data.ArrayStore({
            fields: ['a', 'b'],
            data : combodata
        });
        var combo = new Ext.form.ComboBox({
            store: combostore,
            displayField:'a',
            valueField: 'b',
            typeAhead: true,
            mode: 'local',
            triggerAction: 'all',
            selectOnFocus:true,
            name:'option',
            width:100,
            style: 'margin-left: 5px',
            value:'trano',
            id:'option',
            forceSelection: true,
            editable: false

        });

        var storeinvoiceH = new Ext.data.Store ({
            id: 'storeinvoiceh',
            url:'/finance/invoice/getinvoice',
            autoLoad:true,
            reader: new Ext.data.JsonReader ({
                root:'data',
                totalProperty:'total',
                fields:[
                {
                    name:'trano',type:'String'
                },{
                    name:'cus_kode',type:'String'
                },{
                    name:'prj_kode',type:'String'
                },{
                    name:'prj_nama',type:'String'
                },{
                    name:'sit_kode',type:'String'
                },{
                    name:'sit_nama',type:'String'
                }
            ]
            })


        })

        var invoiceGrid = new Ext.grid.GridPanel ({

            store:storeinvoiceH,
            height:300,
            listeners:{
                'rowdblclick':function (gridaktif,rowIndex,e)
                {
                    isDbClick = true;
                    var invoice = gridaktif.getStore().getAt(rowIndex);
                    var trano = invoice.get('trano');
                    Ext.getCmp('invoice-number').setValue(trano);
                    SetValueForm (trano);

                    itemstore.proxy.setUrl('/finance/invoice/getviewinvoiceitemlist/trano/' + trano);
                    itemstore.reload();
                    Ext.getCmp('grid-item').getView().refresh();

                    paidliststore.proxy.setUrl('/finance/invoice/getpaidlist/trano/' + trano);
                    paidliststore.reload();
                    Ext.getCmp('paidlist-grid').getView().refresh();

                    invoiceshow.close();
                }
            },
            columns:[

                new Ext.grid.RowNumberer(),
                {
                    header:'Trano',
                    dataIndex:'trano',
                    sortable:true,
                    width:120,
                    align:'center'
                },{
                    header:'Customer Code',
                    dataIndex:'cus_kode',
                    sortable:true,
                    width:80,
                    align:'center'
                },{
                    header:'Project Code',
                    dataIndex:'prj_kode',
                    sortable:true,
                    width:120,
                    align:'center'
                },{
                    header:'Project Name',
                    dataIndex:'prj_nama',
                    sortable:true,
                    width:120,
                    align:'center'
                },{
                    header:'Site Code',
                    dataIndex:'sit_kode',
                    sortable:true,
                    width:120,
                    align:'center'
                },{
                    header:'Site Name',
                    dataIndex:'sit_nama',
                    sortable:true,
                    width:120,
                    align:'center'
                }
            ],tbar:[
                {
                    text:'Search By',
                    xtype:'label',
                    style:'margin-left:5px'
                },combo,{
                    xtype:'textfield',
                    id:'search',
                    style:'margin-left:10px',
                    enableKeyEvents:true,
                    listeners:{
                        'keyup' : function (txttext,event)
                        {
                            var txttext = txttext.getValue();
                            if (txttext != "" && txttext.toString().length >= 3)
                            {
                                var option = Ext.getCmp('option').getValue();
                                var search = Ext.getCmp('search').getValue();

                                storeinvoiceH.proxy.setUrl('/finance/invoice/getinvoice/search/' + search + '/option/' + option);
                                storeinvoiceH.reload();
                                invoiceGrid.getView().refresh();
                            }
                        }
                    }
                }
            ],bbar:new Ext.PagingToolbar ({
                id: 'paging',
                pageSize: 50,
                store: storeinvoiceH,
                displayInfo: true,
                displayMsg: 'Displaying data {0} - {1} of {2}',
                emptyMsg: "No data to display"
            })



        })

        var invoiceshow = new Ext.Window ({

            title:'Choose Invoice',
            id:'choose-invoice',
            layout:'absolute',
            minHeight: 200,
            stateful:false,
            modal: true,
            resizable: false,
            closeAction: 'close',
            width: 432,
            height: 330,
            loadMask:true,
            items:[
                invoiceGrid
            ]
        })

        invoiceshow.show();
    }

        var paymenttypedata = [
                ['CASH','CASH'],
                ['CHEQUE','CHEQUE'],
                ['GIRO','GIRO']
            ];

        var paymenttypestore = new Ext.data.ArrayStore({
            fields: ['a', 'b'],
            data : paymenttypedata
        });
        var paymenttypecombo = new Ext.form.ComboBox({
            store: paymenttypestore,
            displayField:'a',
            valueField: 'b',
            typeAhead: true,
            mode: 'local',
            triggerAction: 'all',
            selectOnFocus:true,
            name:'option',
            width:80,
//            style: 'margin-left: 5px',
            id:'option-paymenttype',
            fieldLabel:'Payment Type',
            emptyText:'Select a type ...',
            allowBlank:false,
            forceSelection: true,
            editable: false
        });

        var paymentvalutacombo = new Ext.form.ComboBox({
            store: new Ext.data.ArrayStore({
                fields: ['a', 'b'],
                data : [
                    ['IDR','IDR'],
                    ['USD','USD'],
                ]
            }),
            displayField:'a',
            valueField: 'b',
            typeAhead: true,
            mode: 'local',
            triggerAction: 'all',
            selectOnFocus:true,
            name:'option-valuta',
            width:56,
            id:'option-paymentvaluta',
            hideLabel: true,
            emptyText:'Select a type ...',
            allowBlank:false,
            forceSelection: true,
            editable: false,
            listeners: {
                select: { fn:
                function(c, row, index)
                {
                    Ext.getCmp('val1').setValue(row.data['a']);
                    Ext.getCmp('val2').setValue(row.data['a']);
                    Ext.getCmp('val3').setValue(row.data['a']);
                }
                }
            }
        });

        var itemgrid = new Ext.grid.GridPanel ({

            id:'grid-item',
            store:itemstore,
            height:195,
            columns:[

                new Ext.grid.RowNumberer(),
                {
                    header:'Description',
                    dataIndex:'nama_brg',
                    align:'center'
                },{
                    header:'Valuta',
                    dataIndex:'val_kode',
                    align:'center'
                },{
                    header:'Total',
                    dataIndex:'total',
                    align:'right',
                    renderer: function(v ,p, record){
                        return Ext.util.Format.number((parseFloat(v)), '0,0');
                        }
                }
            ]

        })

        var invoice_payment = new Ext.form.FieldSet ({
            title:'Payment Invoice',
            labelWidth:120,
            labelAlign:'left',
            id: 'fieldset-2',
            items:[
//                    new Ext.FormPanel ({
                    {
                        id:'invoice-payment',
                        items:[
                            {
                                layout:'column',
                                items:[
                                    {
                                        xtype: 'fieldset',
                                        style: 'padding: 10px;margin-right: 15px;margin-left:10px,margintop:10px;',
                                        items: [
                                            {
                                                columnWidth:0.5,
                                                items:[
                                                    {
                                                        layout:'column',
                                                        items:[
                                                            {
                                                                columnWidth:0.8,
                                                                layout:'form',
                                                                items:[
                                                                        new Ext.ux.customRendererField({
                                                                            priceDelemiter:',',
                                                                            xtype:'textfield',
                                                                            fieldLabel:'Invoice Value',
                                                                            anchor:'98%',
                                                                            id:'invoice-value',
                                                                            disabled:true,
                                                                            style:'text-align:right;font-weight: bold;color: black;'
                                                                        }),
                                                                        new Ext.ux.customRendererField ({
                                                                            xtype:'textfield',
                                                                            fieldLabel:'Invoice Already Paid',
                                                                            id:'invoice-paid',
                                                                            anchor:'98%',
                                                                            disabled:true,
                                                                            style:'text-align:right;font-weight: bold;color: black;',
                                                                            priceDelemiter:','
                                                                        })
                                                                ]
                                                            },{
                                                                columnWidth:0.2,
                                                                layout:'form',
                                                                items:[
                                                                    {
                                                                        xtype:'textfield',
                                                                        anchor:'50%',
                                                                        id:'IDR-value',
                                                                        hideLabel:true,
                                                                        disabled:true,
                                                                        style:'text-align:right;font-weight: bold;color: black;'
                                                                    },{
                                                                        xtype:'textfield',
                                                                        anchor:'50%',
                                                                        id:'IDR-paid',
                                                                        hideLabel:true,
                                                                        disabled:true,
                                                                        style:'text-align:right;font-weight: bold;color: black;'
                                                                    }
                                                                ]
                                                            }
                                                        ]

                                                    },{
                                                        xtype:'fieldset',
                                                        title:'Invoice Paid List',
                                                        id: 'paid-list',
                                                        width:350,
                                                        checkboxToggle:true,
                                                        collapsed:true,
                                                        items:[paidlistgrid]
                                                    },{
                                                        layout:'column',
                                                        items:[
                                                            {
                                                                columnWidth:0.8,
                                                                layout:'form',
                                                                items:[
                                                                        new Ext.ux.customRendererField ({
                                                                            xtype:'textfield',
                                                                            fieldLabel:'Invoice Balance',
                                                                            anchor:'98%',
                                                                            id:'invoice-balance',
                                                                            disabled:true,
                                                                            style:'text-align:right;font-weight: bold;color: red;',
                                                                            priceDelemiter:','
                                                                        })
                                                                ]
                                                            },{
                                                                columnWidth:0.2,
                                                                layout:'form',
                                                                items:[
                                                                    {
                                                                        xtype:'textfield',
                                                                        anchor:'50%',
                                                                        id:'IDR-balance',
                                                                        hideLabel:true,
                                                                        disabled:true,
                                                                        style:'text-align:right;font-weight: bold;color: black;'
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ,{
                                    columnWidth:0.5,
                                    layout:'form',
                                    labelWidth:120,
                                    items:[
<!--                                        {-->
<!--                                            xtype:'textfield',-->
<!--                                            fieldLabel:'User Payment',-->
<!--                                            anchor:'90%',-->
<!--                                            id:'user-payment',-->
<!--                                            readOnly:true,-->
<!--                                            value:'--><?php //echo $this->userPayment; ?><!--'-->
<!--                                        },-->
                                        {
                                            layout:'column',
                                            items:[
                                                {
                                                    columnWidth:0.5,
                                                    layout:'form',
                                                    items:[
                                                            new Ext.ux.customRendererField ({
                                                                xtype:'textfield',
                                                                fieldLabel:'Exchange Rate',
                                                                anchor:'98%',
                                                                id:'rate_text',
                                                                value:getExchangeRate(),
                                                                priceDelemiter:',',
                                                                style:'text-align:right',
                                                                enableKeyEvents:true,
                                                                listeners: {
                                                                    'keyup': function(text,e){
                                                                        coaAR();
                                                                    }
                                                                }
                                                            })
                                                    ]
                                                },{
                                                    columnWidth:0.5,
                                                    layout:'form',
                                                    items:[
                                                        {
                                                            xtype:'textfield',
                                                            hideLabel:true,
                                                            anchor:'22%',
                                                            value:'IDR',
                                                            disabled:true,
                                                            style:'text-align:right;font-weight: bold;color: black;'
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            layout:'column',
                                            items:[
                                                {
                                                    columnWidth:0.6,
                                                    layout:'form',
                                                    items:[
                                                        paymenttypecombo
                                                    ]
                                                },
                                                {
                                                    columnWidth:0.4,
                                                    layout:'form',
                                                    items:[
                                                        paymentvalutacombo
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            xtype:'textarea',
                                            fieldLabel:'Payment Notes',
                                            id:'payment-notes',
                                            anchor:'90%'
                                        }
//                                        ,{
//                                            xtype:'radiogroup',
//                                            fieldLabel:'Payment PPN/VAT',
//                                            id:'ppn-radio',
//                                            items:[
//                                                {
//                                                    boxLabel:'Yes',
//                                                    name:'ppn',
//                                                    inputValue:'YES'
//                                                },{
//                                                    boxLabel:'No',
//                                                    name:'ppn',
//                                                    inputValue:'NO',
//                                                    checked:true
//                                                }
//                                            ],
//                                            listeners:{
//                                                'change':function (t,ch)
//                                                {
//                                                    if (Ext.getCmp('invoice-number').getValue() == '')
//                                                    {
//                                                            Ext.MessageBox.show({
//                                                           title: 'Error',
//                                                           msg: 'Please Select Invoice Number First!',
//                                                           buttons: Ext.MessageBox.OK,
//                                                           icon: Ext.MessageBox.ERROR
//                                                           });
//                                                            return false;
//                                                    }
//                                                    if (ch.getGroupValue() == 'YES')
//                                                    {
//                                                        Ext.getCmp('invoice-tax').disable();
//                                                        var total = parseFloat(Ext.getCmp('payment-value').getValue().toString().replace(/\$|\,/g,''));
//                                                        var pajak  = 0.1 * total;
//                                                        var gtotal = total + pajak;
//                                                        Ext.getCmp('invoice-tax').setValue(pajak);
//                                                        Ext.getCmp('g-total').setValue(gtotal);
//                                                    }else
//                                                    {
//                                                        Ext.getCmp('invoice-tax').disable();
//                                                        Ext.getCmp('invoice-tax').setValue('');
//                                                        var gtotal = parseFloat(Ext.getCmp('payment-value').getValue().toString().replace(/\$|\,/g,''));
//                                                        Ext.getCmp('g-total').setValue(gtotal);
//                                                    }
//                                                }
//                                            }
//                                        }
                                        ,{
                                            layout:'column',
                                            items:[
                                                {
                                                    columnWidth:0.7,
                                                    layout:'form',
                                                    items:[
                                                            new Ext.ux.customRendererField ({
                                                                xtype:'textfield',
                                                                fieldLabel:'Payment Value',
                                                                anchor:'98%',
                                                                id:'payment-value',
                                                                vtype:'numeric',
                                                                priceDelemiter:',',
                                                                style:'text-align:right',
                                                                enableKeyEvents:true,listeners :
                                                                {
                                                                    'keyup' : function (t,e)
                                                                    {
//                                                                        if (Ext.getCmp('ppn-radio').getValue().getGroupValue() == 1)
//                                                                        {
//                                                                            Ext.getCmp('invoice-tax').disable();
//                                                                            var total = parseFloat(Ext.getCmp('payment-value').getValue().toString().replace(/\$|\,/g,''));
//                                                                            var pajak  = 0.1 * total;
//                                                                            var gtotal = total + pajak;
//                                                                            Ext.getCmp('invoice-tax').setValue(pajak);
//                                                                            Ext.getCmp('g-total').setValue(gtotal);
//                                                                        }else
//                                                                        {
//                                                                            Ext.getCmp('invoice-tax').disable();
//                                                                            Ext.getCmp('invoice-tax').setValue('');
                                                                            var gtotal = parseFloat(Ext.getCmp('payment-value').getValue().toString().replace(/\$|\,/g,''));
                                                                            Ext.getCmp('g-total').setValue(gtotal);
//                                                                        }

                                                                        coaAR();
                                                                    }
                                                                }
                                                            })
                                                    ]
                                                },{
                                                    columnWidth:0.3,
                                                    layout:'form',
                                                    items:[
                                                        {
                                                            xtype:'textfield',
                                                            id: 'val1',
                                                            hideLabel:true,
                                                            anchor:'35%',
                                                            disabled:true,
                                                            style:'text-align:right;font-weight: bold;color: black;'
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
//                                        ,{
//                                            layout:'column',
//                                            items:[
//                                                {
//                                                    columnWidth:0.7,
//                                                    layout:'form',
//                                                    items:[
//                                                        new Ext.ux.customRendererField ({
//                                                            xtype:'textfield',
//                                                            fieldLabel:'Payment Tax',
//                                                            anchor:'98%',
//                                                            disabled:true,
//                                                            priceDelemiter:',',
//                                                            style:'text-align:right;font-weight: bold;color: black;',
//                                                            id:'invoice-tax'
//
//                                                        })
//                                                    ]
//                                                },{
//                                                    columnWidth:0.3,
//                                                    layout:'form',
//                                                    items:[
//                                                        {
//                                                            xtype:'textfield',
//                                                            id: 'val2',
//                                                            hideLabel:true,
//                                                            anchor:'35%',
//                                                            disabled:true,
//                                                            style:'text-align:right;font-weight: bold;color: black;'
//                                                        }
//                                                    ]
//                                                }
//                                            ]
//                                        }
                                        ,{
                                            layout:'column',
                                            items:[
                                                {
                                                    columnWidth:0.7,
                                                    layout:'form',
                                                    items:[
                                                        new Ext.ux.customRendererField ({
                                                            xtype:'textfield',
                                                            fieldLabel:'Grand Total',
                                                            anchor:'98%',
                                                            readOnly:true,
                                                            id:'g-total',
                                                            style:'text-align:right',
                                                            priceDelemiter:','
                                                        })
                                                    ]
                                                },{
                                                    columnWidth:0.3,
                                                    layout:'form',
                                                    items:[
                                                        {
                                                            xtype:'textfield',
                                                            id: 'val3',
                                                            hideLabel:true,
                                                            anchor:'35%',
                                                            disabled:true,
                                                            style:'text-align:right;font-weight: bold;color: black;'
                                                        }
                                                    ]
                                                }
                                            ]
                                        }
                                ]
                        }
                    ]
                }
                        ]
//                    })
                }
            ]
        })

        var invoice_list = new Ext.form.FieldSet ({

            title:'Invoice Item List',
            style:'marginTop:52px',
            items:[
                itemgrid
            ]

        })

        var invoice_detail = new Ext.form.FieldSet ({

            title:'Invoice Transaction Detail',
            labelAlign:'left',
            width:390,
            labelWidth:100,
            layout:'form',
            id: 'fieldset-1',
            items:[
//                    new Ext.FormPanel ({
                {
                        id:'invoice-trans-detail',
                        items:[
                            {
                                layout:'column',
                                items:[

                                    {
                                        columnWidth:1,
                                        layout:'form',
                                        items:[
                                                {
                                                xtype:'textfield',
                                                fieldLabel:'Transaction Date',
                                                id:'trans-date',
                                                readOnly:true
                                            },{
                                                xtype:'textfield',
                                                fieldLabel:'User Input',
                                                id:'user-input',
                                                readOnly:true
                                            }
                                                ]
                                    }
                                ]
                            },
                            {
                                layout:'column',
                                items:[

                                    {
                                        columnWidth:.5,
                                        layout:'form',
                                        items:[

                                            {
                                                xtype:'textfield',
                                                fieldLabel: 'Project Code',
                                                id:'prj_kode',
                                                anchor:'95%',
                                                readOnly:true,
                                                name:'prj_kode'
                                            },{
                                                xtype:'textfield',
                                                fieldLabel: 'Site Code',
                                                anchor:'95%',
                                                id:'sit_kode',
                                                readOnly:true
                                            },{
                                                xtype:'textfield',
                                                fieldLabel:'Customer Code',
                                                id:'cus_kode',
                                                anchor:'95%',
                                                readOnly:true
                                            }
                                        ]
                                    },{
                                        columnWidth:.5,
                                        layout:'form',
                                        items:[
                                            {
                                                xtype:'textfield',
                                                hideLabel: true,
                                                anchor:'95%',
                                                id:'prj_nama',
                                                readOnly:true
                                            },{
                                                xtype:'textfield',
                                                hideLabel: true,
                                                anchor:'95%',
                                                id:'sit_nama',
                                                readOnly:true
                                            },{
                                                xtype:'textfield',
                                                hideLabel:true,
                                                anchor:'95%',
                                                id:'cus_nama',
                                                readOnly:true
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                layout:'column',
                                items:[

                                    {
                                        columnWidth:1,
                                        layout:'form',
                                        items:[
                                            {
                                                xtype:'textarea',
                                                fieldLabel:'Payment Term',
                                                id:'paymentterm',
                                                width:253,
                                                height:60,
                                                readOnly:true
                                            }
                                        ]
                                    }
                                ]

                            }
                        ]
//                    })
                }
            ]

        })


        var insert_payrem = new Ext.form.FormPanel ({

            title:'Insert Payment Invoice',
            renderTo:'payment_invoice',
            id:'payment-invoice',
            frame:true,
            width:800,
            items:[
                {
                    layout:'column',
                    items:[
                        {
                            columnWidth:0.5,
                            layout:'form',
                            labelWidth:140,
                            items:[{
                                fieldLabel : 'Transaction Type',
                                id : 'trano-type',
                                name: 'type',
                                xtype: 'combo',
                                width: 146,
                                allowBlank: false,
                                store: new Ext.data.Store({
                                    proxy: new Ext.data.HttpProxy({
                                        url: '/finance/coa/gettranotype'
                                    }),
                                    reader: new Ext.data.JsonReader({
                                        totalProperty: 'count',
                                        root: 'data'
                                    }, [{
                                            name: 'trano'
                                        }])
                                }),
                                valueField:'trano',
                                displayField:'trano',
                                typeAhead: true,
                                forceSelection: true,
                                editable: false,
                                mode: 'remote',
                                triggerAction: 'all',
                                selectOnFocus: true,
                                emptyText: 'Select a type ...',
                                listeners: {
                                    'select': function(c,row,index)
                                    {
                                        coaAR();
                                    }
                                }
                            },{
                                xtype:'trigger',
                                fieldLabel:'Invoice Number',
                                triggerClass: 'teropong',
                                allowBlank: false,
                                editable : false,
                                id:'invoice-number',
                                onTriggerClick: function ()
                                {
                                    showInvoiceList ();
                                }
                            },invoice_detail]
                        },{
                            columnWidth:0.5,
                            layout:'form',
                            items:[
                                invoice_list
                            ]
                        }
                    ]
                },invoice_payment
                ,{
                    xtype:'fieldset',
                    title:'Journal Preview',
                    items:[grid_jurnal]
                }
            ],
            buttons:[
                {
                    text:'Submit',
                    id:'invoice-payment-submit',
                    iconCls:'silk-add',
                    handler:function (btn,ev)
                    {
                        if (Ext.getCmp('trano-type').getValue()== '')
                        {
                           Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please select your transaction type',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                           });
                           return false;
                        }
                        if (Ext.getCmp('invoice-number').getValue() == '')
                        {
                           Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please select your Invoice number',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                           });
                           return false;
                        }
                        if (Ext.getCmp('option-paymenttype').getValue()== '')
                        {
                           Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please select your payment type',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                           });
                           return false;
                        }
                        if (parseFloat(Ext.getCmp('payment-value').getValue().toString().replace(/\$|\,/g,'')) > parseFloat(Ext.getCmp('invoice-balance').getValue().toString().replace(/\$|\,/g,'')))
                        {
                            Ext.MessageBox.show({
                            title: 'Error',
                            msg: 'Sorry payment value is greater than invoice balance !',
                            buttons: Ext.MessageBox.OK,
                            icon: Ext.MessageBox.ERROR
                            });
                            return false;
                        }
                        if (parseFloat(Ext.getCmp('payment-value').getValue().toString().replace(/\$|\,/g,'')) <= 0)
                        {
                            Ext.MessageBox.show({
                            title: 'Error',
                            msg: 'Sorry payment value must be grater then 0',
                            buttons: Ext.MessageBox.OK,
                            icon: Ext.MessageBox.ERROR
                            });
                            return false;
                        }

                        if (store_jurnal.getCount() == 0)
                        {
                            return false;
                        }
                        else
                        {
                            if(hitungTotal(true) === false)
                            {
                                Ext.MessageBox.show({
                                    title: 'Error',
                                    msg: 'Debit & Credit is not Balance yet!',
                                    buttons: Ext.MessageBox.OK,
                                    icon: Ext.MessageBox.ERROR
                                });
                                return false;
                            }
                        }

//                        var totalPayment = parseFloat(Ext.getCmp('payment-value').getValue().toString().replace(/\$|\,/g,''));
//                        if (!moneycomp(totalPayment,'==',totDebit))
//                        {
//                            Ext.MessageBox.show({
//                                title: 'Error',
//                                msg: 'Total Payment is different with Journal!',
//                                buttons: Ext.MessageBox.OK,
//                                icon: Ext.MessageBox.ERROR
//                            });
//                            return false;
//                        }

                        Ext.MessageBox.confirm('Confirm','Are you sure want this action ?',function(btn){

                            if (btn == 'yes')
                            {
                                var teks = Ext.getCmp('invoice-payment').findByType('textfield');
                                var jsonTransPayment = '',
                                    jsonJurnal = '';
                                Ext.each(teks, function (t, index){
                            			jsonTransPayment = jsonTransPayment + '"' + t.id + '"' + ":" + '"' + t.getValue().toString().replace(/\"|\'|\n|\t|\r/g,'') + '",';
                                    });
                                store_jurnal.each(function(store){
                                    var encode = Ext.util.JSON.encode(store.data);
                                    if (encode != undefined)
                                        jsonJurnal += encode + ',';
                                });
                                jsonJurnal = '[' + jsonJurnal.substring(0, jsonJurnal.length - 1) + ']';

                                jsonTransPayment = jsonTransPayment + '"prj_kode":' + '"' + Ext.getCmp('prj_kode').getValue() + '",';
                                jsonTransPayment = jsonTransPayment + '"prj_nama":' + '"' + Ext.getCmp('prj_nama').getValue() + '",';
                                jsonTransPayment = jsonTransPayment + '"sit_kode":' + '"' + Ext.getCmp('sit_kode').getValue() + '",';
                                jsonTransPayment = jsonTransPayment + '"sit_nama":' + '"' + Ext.getCmp('sit_nama').getValue() + '",';
                                jsonTransPayment = jsonTransPayment + '"cus_kode":' + '"' + Ext.getCmp('cus_kode').getValue() + '",';
                                jsonTransPayment = jsonTransPayment + '"val_kode":' + '"' + Ext.getCmp('IDR-value').getValue() + '",';
                                jsonTransPayment = jsonTransPayment + '"rateidr":' + '"' + Ext.getCmp('rate_text').getValue().toString().replace(/\$|\,/g,'') + '",';
//                                jsonTransPayment = jsonTransPayment + '"ppn":' + '"' + Ext.getCmp('ppn-radio').getValue().getRawValue() + '",';
                                jsonTransPayment = jsonTransPayment + '"option":' + '"' + Ext.getCmp('option-paymenttype').getRawValue() + '"';

                                var payment_encode = "{" + jsonTransPayment + "}";
                                var invoice_trano = Ext.getCmp('invoice-number').getValue();
                                var trano_type = Ext.getCmp('trano-type').getValue();

                                var params = {
                                    payment:payment_encode,
                                    bank: Ext.util.JSON.encode(bankData),
                                    jurnal: jsonJurnal
                                }

                                Ext.Ajax.request({
                                    url:'/finance/invoice/insertpaymentinvoice/inv_no/' + invoice_trano +  '/type_trano/' + trano_type,
                                    method:'POST',
                                    params:params,
                                    success:function(result){
                                        obj = Ext.util.JSON.decode(result.responseText);

                                        if (obj.success)
                                        {
                                            Ext.Msg.alert ('Message','Success, Data has been saved' + '<br><br>Your Transaction number is <b><font color="#ff0000">' + obj.number + '</font></b>' );
                                            myPanel = Ext.getCmp('abs-budget-panel');
                                            myPanel.body.load({
                                            url: '/finance/invoice/invoice',
                                            scripts : true
                                            });
                                        }else
                                        {
                                            Ext.Msg.alert('Error', obj.msg);
                                        }
                                    },
                                    failure:function( action){
                                    if(action.failureType == 'server'){
                                      obj = Ext.util.JSON.decode(action.response.responseText);
                                      Ext.Msg.alert('Error!', obj.errors.reason);
                                    }else{
                                      Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                                    }
                                    }

                                })
                            }

                        })
                    },
                    scope:this
                },{
                    text:'Reset',
                    handler: function (btn,ev)
                    {
                        Ext.getCmp('payment-invoice').getForm().reset();
                        itemstore.removeAll();
                        getExchangeRate();
                    },
                    scope:this
                },{
                    text:'Cancel',
                    handler:function(btn,ev) {
                        mypanel = Ext.getCmp('abs-budget-panel');
                        mypanel.body.load({
                            url:'/finance/invoice/invoice',
                            scripts:true
                        });
                    },
                    scope:this
                }
            ]


        })


    })



</script>

    <div id="payment_invoice"></div>
