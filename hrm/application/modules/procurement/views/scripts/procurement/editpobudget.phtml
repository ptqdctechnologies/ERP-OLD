<script type="text/javascript">
var t = 0;
var TEMPORARY = 0;
var pajak;
var grandtotal = 0;
var editFlag = 'N';

showAddPO = function(){
    myPanel = Ext.getCmp('abs-budget-panel');
    myPanel.body.load({
        url: '/procurement/procurement/addpo',
        scripts : true
    });
};

var oripr;
//custom summary renderer example
function totals(t, params, data){

	 return t;

}

Ext.ux.grid.GridSummary.Calculations = {
	    'jumlah': function(v, record, field){
	t = v + Ext.num(record.data[field], 0);
	        return t;
	    }
};

var summary = new Ext.ux.grid.GridSummary();


 var prlist = Ext.data.Record.create([{
  name: 'id',
    type: 'integer'
},{
    name: 'tgl_pr',
    type: 'date',
    dateFormat: 'Y-m-d'
},{
    name: 'urut',
    type: 'string'
},{
    name: 'trano',
    type: 'string'
},{
    name: 'prj_kode',
    type: 'string'
}, {
    name: 'prj_nama',
    type: 'string'
},{
    name: 'sit_kode',
    type: 'string'
},{
    name: 'sit_nama',
    type: 'string'
},{
    name: 'workid',
    type: 'string'
},{
    name: 'workname',
    type: 'string'
},{
    name: 'kode_brg',
    type: 'string'
},{
    name: 'nama_brg',
    type: 'string'
},{
    name: 'qty',
    type: 'string'
},{
    name: 'uom',
    type: 'string'
},{
    name: 'net_act',
    type: 'string'
},{
    name: 'price',
    type:'float'
},{
    name: 'hargaIDR',
    type: 'float'
},{
    name: 'hargaUSD',
    type: 'float'
},{
    name: 'totalIDR',
    type: 'float'
},{
    name: 'totalPrice',
    type: 'float'
},{
    name: 'totalPricePO',
    type: 'float'
},{
    name: 'totalUSD',
    type: 'float'
},{
    name: 'val_kode',
    type: 'string'
},{
    name: 'totalPO',
    type: 'float'
},
{
    name: 'totalRPI',
    type: 'float'
},{
    name: 'totalPriceRPI',
    type: 'float'
},{
    name: 'budgettype',
    type: 'string'
},{
    name: 'balancePO',
    type: 'string'
}]);


var polist = Ext.data.Record.create([ {
    name: 'id',
    type: 'integer'
},{
    name: 'tgl_po',
    type: 'date',
    dateFormat: 'Y-m-d'
},{
    name: 'status',
    type: 'string'
},{
    name: 'urut',
    type: 'string'
},{
    name: 'tgl_pr',
    type: 'date',
    dateFormat: 'Y-m-d'
},{
    name: 'trano',
    type: 'string'
},{
    name: 'prj_kode',
    type: 'string'
}, {
    name: 'prj_nama',
    type: 'string'
},{
    name: 'sit_kode',
    type: 'string'
},{
    name: 'sit_nama',
    type: 'string'
},{
    name: 'workid',
    type: 'string'
},{
    name: 'workname',
    type: 'string'
},{
    name: 'kode_brg',
    type: 'string'
},{
    name: 'nama_brg',
    type: 'string'
},{
    name: 'qty',
    type: 'string'
},{
    name: 'uom',
    type: 'string'
},{
    name: 'net_act',
    type: 'string'
},{
    name: 'price',
    type:'float'
},{
    name: 'hargaIDR',
    type: 'float'
},{
    name: 'hargaUSD',
    type: 'float'
},{
    name: 'totalIDR',
    type: 'float'
},{
    name: 'totalPrice',
    type: 'float'
},{
    name: 'totalPricePO',
    type: 'float'
},{
    name: 'totalPR',
    type: 'float'
},{
    name: 'pricePR',
    type:'float'
},{
    name: 'totalPricePR',
    type: 'float'
},{
    name: 'totalUSD',
    type: 'float'
},{
    name: 'val_kode',
    type: 'string'
},{
    name: 'currency',
    type: 'float'
},{
    name: 'totalPO',
    type: 'float'
},{
    name: 'totalRPI',
    type: 'float'
},{
    name: 'totalPriceRPI',
    type: 'float'
},{
    name: 'gtotal',
    type: 'float'
},{
    name: 'gtotals',
    type: 'float'
},{
    name: 'ppn',
    type: 'float'
},{
    name: 'balancePO',
    type: 'string'
},{
    name: 'sup_kode',
    type: 'string'
},{
    name: 'sup_nama',
    type: 'string'
},{
    name: 'po_number',
    type: 'string'
},{
    name: 'pr_number',
    type: 'string'
},{
    name: 'invoice',
    type: 'string'
},{
    name: 'tax',
    type: 'string'
},{
    name: 'tujuan',
    type: 'string'
},{
    name: 'ket',
    type: 'string'
},{
    name: 'tgl_kirim',
    type: 'date',
    dateFormat: 'Y-m-d'
},{
    name: 'po_term',
    type: 'string'
},{
    name: 'budgettype',
    type: 'string'
},{
    name: 'po_type',
    type: 'string'
},{
    name: 'qtySupp',
    type: 'float'
},{
    name: 'priceSupp',
    type: 'float'
},{
    name: 'totalPriceSupp',
    type: 'float'
}]);

var filelist = Ext.data.Record.create([ {
    name: 'id',
    type: 'integer'
},{
    name: 'filename',
    type: 'string'
},{
    name: 'savename',
    type: 'string'
},{
    name: 'status',
    type: 'string'
},{
    name: 'path',
    type: 'string'
}]);

var pricelist = Ext.data.Record.create([ {
    name: 'id',
    type: 'integer'
},{
    name: 'tgl',
    type: 'string'
},{
    name: 'prj_kode',
    type: 'string'
}, {
    name: 'prj_nama',
    type: 'string'
},{
    name: 'sit_kode',
    type: 'string'
},{
    name: 'sit_nama',
    type: 'string'
},{
    name: 'harga',
    type:'float'
},{
    name: 'val_kode',
    type: 'string'
},{
    name: 'sup_kode',
    type: 'string'
},{
    name: 'sup_nama',
    type: 'string'
},{
    name: 'petugas',
    type: 'string'
}]);


var expander = new Ext.ux.grid.RowExpander({
        tpl : new Ext.Template(
            '<div style="margin-left:50px;"><p><b>Project Name:</b> {prj_nama}</p><br>',
            '<p><b>Site Name:</b> {sit_nama}</p></div>'
        )
    });

var expander2 = new Ext.ux.grid.RowExpander({
        tpl : new Ext.Template(
            '<div style="margin-left:50px;"><p><b>Project Name:</b> {prj_nama}</p><br>',
            '<p><b>Site Name:</b> {sit_nama}</p></div>'
        )
    });

var storeFile = new Ext.data.Store({
    reader: new Ext.data.JsonReader({fields: filelist})
});

var storePR = new Ext.data.Store({
    reader: new Ext.data.JsonReader({fields: prlist})
});

var writer = new Ext.data.JsonWriter({
    encode: true,
    writeAllFields: false
});

var proxyPrice = new Ext.data.HttpProxy({
   url : '/default/home/getboq3summary'
});

var storePrice = new Ext.data.Store({
    proxy: proxyPrice,
    reader: new Ext.data.JsonReader({
    totalProperty: 'count',
    idProperty: 'pricelist',
    root: 'posts',
    fields: pricelist})
});

var proxy = new Ext.data.HttpProxy({
    api:{
    create: '/default/prd/list'
    }


});

var storePO = new Ext.data.Store({
    //id: 'po',
    proxy: proxy,
    writer: writer,
    reader: new Ext.data.JsonReader({
    totalProperty: 'count',
    idProperty: 'polist',
    root: 'posts',
    fields: polist})
});


 var datas = new Ext.data.SimpleStore({
        fields:['nilai', 'term']
                ,data:[
                       ['14','14'],
                       ['30','30'],
                       ['45','45']

                   ]

            });

 var dataori = new Ext.data.SimpleStore({
     fields:['nilai', 'ori']
             ,data:[
                    ['OPEX','OPEX'],
                    ['CAPEX','CAPEX'],

                ]

         });

 var datatype = new Ext.data.SimpleStore({
     fields:['nilai', 'type']
             ,data:[
                    ['Project','Project'],
                    ['Overhead','Overhead']

                ]

         });

 var userColumns = [
     new Ext.grid.RowNumberer(),
     expander,
      {header: "",width: 30, dataIndex: 'id',renderer: function (v,p,r) {
        if (!isMscWorkid(r.data['workid']) && !isServiceKdbrg(r.data['kode_brg']))
        {
	    	var qty = parseFloat(r.data['qty']);
            if (r.data['totalRPI'] != undefined || r.data['totalRPI'] == '')
                var rpi = parseFloat(r.data['totalRPI']);
            else
                var rpi = 0;
            if (r.data['totalPricePO'] >= r.data['totalPrice'])
	        {
                percent = 100;
            }
	        else
            {
	    	    var percent = (parseFloat(r.data['totalPO']) / (qty-rpi)) * 100;
            }
        }
        else
        {
            if (r.data['totalPriceRPI'] != undefined || r.data['totalPriceRPI'] == '')
                var totalRPI = parseFloat(r.data['totalPriceRPI']);
            else
                var totalRPI = 0;
            if (r.data['totalPricePO'] >= r.data['totalPrice'])
	        {
                percent = 100;
            }
	        else
            {
	    	    var percent = (parseFloat(r.data['totalPricePO']) / (parseFloat(r.data['totalPrice'])-totalRPI)) * 100;

            }
        }
    	if (percent < 100){
			return '<a href="#" onclick="addToPO();"><img src="/images/g_rec_add.png"></a>';
    	}
        else
    	{
    		p.attr ='ext:qtip="This item (' + r.data['kode_brg'] + ') must be created by PR"';
    		return '<img src="/images/icons/fam/page_tag_red.gif">';
//    		return '<a href="#" onclick="addToAFE(' + v + ');"><img src="/images/icons/fam/page_tag_red.gif"></a>';
    	}
    }},
    {header:'No Trans',width:80,sortable:true,dataIndex:'trano'},
    {header:'Date',width:80,sortable:true,dataIndex:'tgl_pr'},
    {header:'Project ID',width:60,sortable:true,dataIndex:'prj_kode'},
    {header:'Site Code',width:40,sortable:true,dataIndex:'sit_kode'},
    {header:'Work ID',width:60,sortable:true,dataIndex:'workid'},
    {header:'Work Name',width:90,sortable:true,dataIndex:'workname'},
    {header:'Product Id',width:65,sortable:true,dataIndex:'kode_brg'},
    {header:'Product Name',width:90,sortable:true,dataIndex:'nama_brg'},
    {header:'Valuta',width:50,sortable:true,dataIndex:'val_kode'},
    {header:'Qty',width:80,sortable:true,dataIndex:'qty',renderer:change,align:'right'},
     {header: "Available", width: 100, renderer: function(v,p,r) {
        var percent = 0;
        if (!isMscWorkid(r.data['workid']) && !isServiceKdbrg(r.data['kode_brg']))
        {
	        if (r.data['qty'] != 0 && r.data['totalPO'] != 0)
	        {
	            var qty = parseFloat(r.data['qty']);
                if (r.data['totalRPI'] != undefined || r.data['totalRPI'] != '')
                    var rpi = parseFloat(r.data['totalRPI']);
                else
                    var rpi = 0;
	        	percent = (r.data['totalPO'] / (qty-rpi)) * 100;
	        	if (percent > 100)
	            	percent = 100;
	        	percent = percent.toFixed(2);
				var warna = '#0a0';
	        	if (percent > 75)
	            	warna = '#FF3F7D';
	        	else if (percent > 50)
	            	warna = '#FFDA2F';
	        }
        }
        else
        {
        	if (r.data['totalPrice'] != 0 && r.data['totalPricePO'] != 0)
	        {
            	var total = parseFloat(r.data['totalPrice']);
            	var totalPO = parseFloat(r.data['totalPricePO']);
                if (r.data['totalPriceRPI'] != undefined || r.data['totalPriceRPI'] != '')
                    var totalRPI = parseFloat(r.data['totalPriceRPI']);
                else
                    var totalRPI = 0;
	        	percent = ( totalPO / (total-totalRPI)) * 100;
	        	if (percent > 100)
	            	percent = 100;
	        	percent = percent.toFixed(2);
				var warna = '#0a0';
	        	if (percent > 75)
	            	warna = '#FF3F7D';
	        	else if (percent > 50)
	            	warna = '#FFDA2F';
	        }
        }
		return '<div class="meter-wrap"><div class="meter-value" style="background-color: ' + warna + '; width: ' + percent + '%;"><div class="meter-text"><b>' + percent + '%</b></div></div></div>';
    }}
 ]

 var userColumns2 = [
     new Ext.grid.RowNumberer(),
     expander2,
     {header: "",width: 60, dataIndex: 'id',css:'text-align:center;',renderer: function (v,p,r) {
         if (!isMscWorkid(r.data['workid']) && !isServiceKdbrg(r.data['kode_brg']))
         {
             if(parseFloat(r.data['qty'].toString().replace(/\$|\,/g,'')) >= parseFloat(r.data['totalRPI'].toString().replace(/\$|\,/g,'')))
  		        return '<a href="#" onclick="editToPO();"><img src="/images/g_rec_upd.png"></a>&nbsp;<a href="#" onclick="delToPO();"><img src="/images/g_rec_del.png"></a>';
         }
         else
            if(parseFloat(r.data['totalPrice'].toString().replace(/\$|\,/g,'')) >= parseFloat(r.data['totalPriceRPI'].toString().replace(/\$|\,/g,'')))
                return '<a href="#" onclick="editToPO();"><img src="/images/g_rec_upd.png"></a>&nbsp;<a href="#" onclick="delToPO();"><img src="/images/g_rec_del.png"></a>';
      }},

    {header:'No Trans',width:80,sortable:true,dataIndex:'po_number'},
    {header:'Project ID',width:60,sortable:true,dataIndex:'prj_kode'},
    {header:'Site Code',width:40,sortable:true,dataIndex:'sit_kode'},
    {header:'Work ID',width:60,sortable:true,dataIndex:'workid'},
    {header:'Work Name',width:90,sortable:true,dataIndex:'workname'},
    {header:'Product Id',width:65,sortable:true,dataIndex:'kode_brg'},
    {header:'Product Name',width:90,sortable:true,dataIndex:'nama_brg'},
    {header:'Qty',width:80,sortable:true,dataIndex:'qty',renderer:change},
    {header:'Uom', width:55,sortable:true,dataIndex:'uom'},
    {header: "Price", width: 100, sortable: true,align:'right', dataIndex: 'price' },
//        renderer: function (v,p,r) {
//            //if (r.data['val_kode'] == 'IDR')
//                    return CommaFormatted(r.data['price']);
//           // else
//                   // return CommaFormatted(r.data['hargaUSD']);
//    }},
    {header: "Total", width: 120, sortable: true,align:'right', summaryType: 'jumlah', summaryRenderer: totals, dataIndex: 'totalPrice' }
//        			renderer: function (v,p,r) {
//
//                    return CommaFormatted(r.data['totalPrice']);
//             }},
 ]

 var userColumns3 = [
    new Ext.grid.RowNumberer(),
    {header:'Date', name: 'tgl', width:70,sortable:true,dataIndex:'tgl'},
    {header:'Project ID', name: 'prj_kode', width:80,sortable:true,dataIndex:'prj_kode'},
    {header:'Project Name', name: 'prj_nama', width:120,sortable:true,dataIndex:'prj_nama'},
    {header:'Site Code', name: 'sit_kode', width:50,sortable:true,dataIndex:'sit_kode'},
    {header:'Site Name', name: 'sit_nama', width:120,sortable:true,dataIndex:'sit_nama'},
    {header:'PIC', name: 'petugas', width:100,sortable:true,dataIndex:'petugas'},
    {header: "Price", name: 'harga', width: 100, sortable: true,align:'right', dataIndex: 'harga',
    renderer: function(v,p,r){
        return CommaFormatted(r.data['harga']);
    }
    },
    {header: "Currency", name: 'val_kode', width: 60, sortable: true, dataIndex: 'val_kode' },
    {header:'Supplier Code', name: 'sup_kode', width:80,sortable:true,dataIndex:'sup_kode'},
    {header:'Supplier Name', name: 'sup_nama', width:120,sortable:true,dataIndex:'sup_nama'},

 ]

<?php echo $this->action('popupgrid','grid'); ?>

function change(val)
    {
       return Ext.util.Format.number(val, '?0,000.0000?');
    }

function getNewID()
{

//
//	storePR.filterBy(function(record,id){
//		if (isMscWorkid(record.get('workid')))
//		{
//			return record.get('workid');
//		}
//	});

	var maxRecordPR = storePR.getCount();



//        storePO.filterBy(function(record,id){
//		if (isMscWorkid(record.get('workid')))
//		{
//			return record.get('workid');
//		}
//	});
        var maxRecordPO = storePO.getCount();

	var newID = maxRecordPR + maxRecordPO + 1;

//	storePR.clearFilter();
//	storePO.clearFilter();
	return newID;
}

function getPORecord(workid,kode_brg,isEdit)
{
	//Clear filter
	storePOclearFilter();
	storePO.filterBy(function(record,id){
		if (!isEdit)
		{
			if (record.get('workid') == workid.toString() && record.get('kode_brg') == kode_brg.toString())
			{
				return record.get('workid');
			}
		}
		else
		{
			if (record.get('workid') == workid.toString() && (record.get('status') != '' || record.get('status') != undefined))
			{
				return record.get('workid');
			}
		}
	});
	if (storePO.getCount() > 0)
	{
		var rec = storePO.getAt(0);
	}

	storePO.clearFilter();
	return rec;
}

function resetButton()
{
	Ext.getCmp('cancel-po').setText('Cancel Add');
//	Ext.getCmp('cancel-po').disable();
	Ext.getCmp('save-po').setText('Add to PR List(Cart)');
// 	Ext.getCmp('save-po').disable();
}

function clearPOForm()
{
    var teks = Ext.getCmp('po-form').findByType('textfield');
    Ext.each(teks, function (t, index){
			t.setValue('');
        });
    if (document.getElementById('qty') != undefined)
        document.getElementById('qty').innerHTML = '0';
    if (document.getElementById('in-po') != undefined)
        document.getElementById('in-po').innerHTML = '0';
    if (document.getElementById('tot-po') != undefined)
        document.getElementById('tot-po').innerHTML = '0';
    if (document.getElementById('price-pr') != undefined)
        document.getElementById('price-pr').innerHTML = '0';
    if (document.getElementById('price-po') != undefined)
        document.getElementById('price-po').innerHTML = '0';
    if (document.getElementById('balanceqty') != undefined)
        document.getElementById('balanceqty').innerHTML = '0';
    if (document.getElementById('rpi-qty') != undefined)
        document.getElementById('balance-po').innerHTML = '0';
    if (document.getElementById('rpi-qty') != undefined)
        document.getElementById('balance-price').innerHTML = '0';
    if (document.getElementById('rpi-qty') != undefined)
    	document.getElementById('rpi-qty').innerHTML = '0';
    if (document.getElementById('tot-price-pr') != undefined)
        document.getElementById('tot-price-pr').innerHTML = '0';
    if (document.getElementById('tot-price-po') != undefined)
        document.getElementById('tot-price-po').innerHTML = '0';
    if (document.getElementById('tot-balance-price') != undefined)
        document.getElementById('tot-balance-price').innerHTML = '0';
    //document.getElementById('balance-price-po').innerHTML = '0';
//	Ext.getCmp('kode_brg_text').disable();
	//Ext.getCmp('unit_price_text').disable();
}

function refreshForm()
{
	var tgl_sekarang = new Date();
    Ext.getCmp('val_kode_text').setValue('IDR');
	Ext.getCmp('curr_text').setValue('0');
//	Ext.getCmp('tgl_po_text').setValue(tgl_sekarang.format('Y-m-d'));

}

function getExchangeRate()
{
	Ext.Ajax.request({
	    url: '/default/valuta/getexchangerate',
	    method:'POST',
	    success: function(result, request){
		   		var returnData = Ext.util.JSON.decode(result.responseText);
				if(returnData.success) {
					Ext.getCmp('curr_text').setValue(CommaFormatted(returnData.rate));
				}
			}
			,failure:function( action){
		if(action.failureType == 'server'){
	    obj = Ext.util.JSON.decode(action.response.responseText);
	    Ext.Msg.alert('Error!', obj.errors.reason);
		}
		}
	});
}

function cekQty()
{
    var newQty = Ext.getCmp('po-qty').getValue();
    var satuan = Ext.getCmp('uom_text').getValue();

    var qtyPr = document.getElementById('qty').innerHTML;
//    document.getElementById('tot-po').innerHTML = newQty+''+satuan;
//    var qtyPo = Ext.getCmp('po-qty').getValue();
    var qtyRpi;
    if (document.getElementById('rpi-qty').innerHTML != undefined || document.getElementById('rpi-qty').innerHTML != '')
        qtyRpi = parseFloat(document.getElementById('rpi-qty').innerHTML);
    else
        qtyRpi = 0;



     newQty = parseFloat(newQty.toString().replace(/\$|\,/g,''));
     qtyPr = parseFloat(qtyPr.toString().replace(/\$|\,/g,''));
     qtyRpi = parseFloat(qtyRpi.toString().replace(/\$|\,/g,''));
//												var newBalance = newQty + qtyPo;

    if (newQty > (qtyPr-qtyRpi))
    {
//               Ext.getCmp('save-po').disable();
               Ext.MessageBox.show({
               title: 'Error',
               msg: 'Request Quantity is over the Budget!',
               buttons: Ext.MessageBox.OK,
               icon: Ext.MessageBox.ERROR
                                                    });
                                                         return false;
    }
    else
    {

        return true;
    }
}

function cekPrice()
{
    	var pricePr = document.getElementById('price-pr').innerHTML;
        var pricePo = Ext.getCmp('unit_price_text').getValue();
        var currency = Ext.getCmp('val_kode_text').getValue();

        document.getElementById('price-po').innerHTML =  CommaFormatted(pricePo.toString().replace(/\$|\,/g,''))+' '+currency;

        pricePo = parseFloat(pricePo.toString().replace(/\$|\,/g,''));
        pricePr = parseFloat(pricePr.toString().replace(/\$|\,/g,''));

        //var newPrice = parseFloat(pricePo) + parseFloat(newPrice);
        if (pricePo > pricePr)
        {
//            Ext.getCmp('save-po').disable();
            Ext.MessageBox.show({
                   title: 'Error',
                   msg: 'Request Price is over the Budget!',
                   buttons: Ext.MessageBox.OK,
                   icon: Ext.MessageBox.ERROR
               });
            return false;
        }
        else
        {

            return true;

        }
}

function cekTotal()
{
        var totpricepr = document.getElementById('tot-price-pr').innerHTML;
        var totpricepo = document.getElementById('tot-price-po').innerHTML;
        var newtotpri = Ext.getCmp('total_price_text').getValue();
        var currency = Ext.getCmp('val_kode_text').getValue();

//        document.getElementById('tot-price-po').innerHTML =  CommaFormatted(totpricepo.toString().replace(/\$|\,/g,''))+' '+currency;

        totpricepr = parseFloat(totpricepr.toString().replace(/\$|\,/g,''));
        totpricepo = parseFloat(totpricepo.toString().replace(/\$|\,/g,''));
        newtotpri = parseFloat(newtotpri.toString().replace(/\$|\,/g,''));
        var balancetot = totpricepr-totpricepo;

        if ( newtotpri > balancetot)
        {

//                   Ext.getCmp('save-po').disable();
                   Ext.MessageBox.show({
                   title: 'Error',
                   msg: 'Request is over the Budget!',
                   buttons: Ext.MessageBox.OK,
                   icon: Ext.MessageBox.ERROR
            });
             return false;
        }
        else
        {

            return true;
        }
}

function cekTotalSupp()
{
        var totpri = parseFloat(Ext.getCmp('total_price_text').getValue().toString().replace(/\$|\,/g,''));
        var totprisupp = parseFloat(Ext.getCmp('total_price_supp').getValue().toString().replace(/\$|\,/g,''));

    if(Ext.getCmp('posupp-qty').getValue() == '' )
    {
        Ext.MessageBox.show({
               title: 'Error',
               msg: 'Please Fill Qty Request For Supplier!',
               buttons: Ext.MessageBox.OK,
               icon: Ext.MessageBox.ERROR
            });
             return false;
    }

    if(Ext.getCmp('unit_price_supp').getValue() == '' )
    {
         Ext.MessageBox.show({
               title: 'Error',
               msg: 'Please Fill Unit Price For Supplier!',
               buttons: Ext.MessageBox.OK,
               icon: Ext.MessageBox.ERROR
            });
             return false;
    }

        if ( totprisupp > totpri)
        {
               Ext.MessageBox.show({
               title: 'Error',
               msg: 'Total For Supplier must be less or equal than Total Price!',
               buttons: Ext.MessageBox.OK,
               icon: Ext.MessageBox.ERROR
            });
             return false;
        }
        else
        {


            return true;
        }
}

function hitungTotal()
{
       if (Ext.getCmp('po-qty').getValue() != undefined && Ext.getCmp('unit_price_text').getValue() != undefined)
                                                    {
                                                        var a = parseFloat(Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,''));
                                                        var b = parseFloat(Ext.getCmp('unit_price_text').getValue().toString().replace(/\$|\,/g,''));
                                                        //Ext.getCmp('total_price_text').setValue( CommaFormatted((a*b).toFixed(2)));
                                                        Ext.getCmp('total_price_text').setValue(CommaFormatted(a*b));
    //													Ext.getCmp('save-po').enable();
                                                    }
}

function hitungTotalSupp()
{
       if (Ext.getCmp('posupp-qty').getValue() != undefined && Ext.getCmp('unit_price_supp').getValue() != undefined)
        {
            var a = parseFloat(Ext.getCmp('posupp-qty').getValue().toString().replace(/\$|\,/g,''));
            var b = parseFloat(Ext.getCmp('unit_price_supp').getValue().toString().replace(/\$|\,/g,''));
            //Ext.getCmp('total_price_text').setValue( CommaFormatted((a*b).toFixed(2)));
            Ext.getCmp('total_price_supp').setValue(CommaFormatted((a*b)));
        //													Ext.getCmp('save-po').enable();
        }
}

function addToPO()
{
	var recpr = Ext.getCmp('pr-detail-grid').getSelectionModel().getSelections();
	oripr = storePR.getAt(storePR.findExact('id', recpr[0].data['id']));
//        var rec = Ext.getCmp('pr-detail-grid').getSelectionModel().getSelections();
//        console.log(oripr);
	if (oripr != undefined)
	{
				Ext.getCmp('save-po').setText('Add to PO List(Cart)');
                Ext.getCmp('pr_no_text').setValue(oripr.data['trano']);
                Ext.getCmp('urut_text').setValue(oripr.data['urut']);
				Ext.getCmp('po-workid').setValue(oripr.data['workid']);
				Ext.getCmp('kode_brg_text').setValue(oripr.data['kode_brg']);
				Ext.getCmp('nama_brg_text').setValue(oripr.data['nama_brg']);
				Ext.getCmp('prj_kode_text2').setValue(oripr.data['prj_kode']);
				Ext.getCmp('prj_nama_text').setValue(oripr.data['prj_nama']);
                Ext.getCmp('sit_kode_text').setValue(oripr.data['sit_kode']);
                Ext.getCmp('sit_nama_text').setValue(oripr.data['sit_nama']);
				Ext.getCmp('kode_brg_text').disable();
                Ext.getCmp('unit_price_text').setValue('');
                Ext.getCmp('po-qty').setValue('');
                Ext.getCmp('net_act_text').setValue(oripr.data['net_act']);

                Ext.getCmp('unit_price_text').disable();
      	        Ext.getCmp('po-qty').disable();


                //Ext.getCmp('tgl_po_text').setValue(dateNow.format('Y-m-d'));
                //Ext.getCmp('total_price_text').setValue(rec[0].data['totalPricePo']);

                var valNew = Ext.getCmp('val_kode_text').getValue();

                Ext.getCmp('uom_text').setValue(oripr.data['uom']);
                Ext.getCmp('uom_supp').setValue(oripr.data['uom']);
				var piece = oripr.data['uom'];
				var valuta = oripr.data['val_kode'];

//				Ext.getCmp('save-po').disable();
				Ext.getCmp('po-grid').disable();
				Ext.getCmp('pr-detail-grid').disable();
				Ext.getCmp('cancel-po').setText('Cancel Add');
//				Ext.getCmp('cancel-po').enable();



                var totpri = oripr.data['totalPrice'];
                //var totpriPO = rec[0].data['totalPricePO'];


                var pricepr= oripr.data['price'];
                var productID = oripr.data['kode_brg'];
                Ext.getCmp('price-grids').getStore().proxy.setApi('read','/default/home/getpricehistory/kode_brg/' +productID);
                Ext.getCmp('price-grids').getStore().reload();
                //var pricepo = Ext.getCmp('unit_price_text').getValue();
                //var balancepri = pricepr - pricepo;


//                if (!isMscWorkid(rec[0].data['workid']) && valNew == valuta )
              	  if ( !isMscWorkid(oripr.data['workid']) && !isServiceKdbrg(oripr.data['kode_brg']))
		{


                  		Ext.getCmp('unit_price_text').enable();
          	       		Ext.getCmp('po-qty').enable();
                        Ext.getCmp('po-qty').setValue(CommaFormatted(oripr.data['qty']));
                        Ext.getCmp('unit_price_text').setValue(CommaFormatted(oripr.data['price']));
                        Ext.getCmp('unit_price_supp').setValue(CommaFormatted(oripr.data['price']));
                        Ext.getCmp('posupp-qty').setValue(CommaFormatted(oripr.data['qty']));

          	            if (valNew != valuta)
                  {
                	  Ext.MessageBox.show({
              	           title: 'Error Currency',
              	           msg: 'Currency Not Match!!',
              	           buttons: Ext.MessageBox.OK,
              	           icon: Ext.MessageBox.ERROR
              	       });

                	  clearPOForm();

                      Ext.getCmp('po-qty').setValue('');
                        Ext.getCmp('unit_price_text').setValue('');

                       Ext.getCmp('pr-detail-grid').enable();
                       Ext.getCmp('po-grid').enable();
                       Ext.getCmp('pr-detail-grid').getView().refresh();
                       Ext.getCmp('po-grid').getView().refresh();
//                       Ext.getCmp('save-po').disable();
//                      Ext.getCmp('cancel-po').disable();
                      return false;

                  }
                        var qty = parseFloat(oripr.data['qty']);
                        var totPO = parseFloat(oripr.data['totalPO']);
                        var rpiqty = parseFloat(oripr.data['totalRPI']);
                        var pricepo = Ext.getCmp('unit_price_text').getValue().toString().replace(/\$|\,/g,'');
                        var balanceqty = qty - totPO;

                        //totpri = totpri.toString();
                        //totpriPO = totpriPO.toString();
                        //balancepri = balancepri.toString();
                        var balancepri = parseFloat(pricepr)-parseFloat(pricepo);
                        pricepr = pricepr.toString();
                        //pricepo = pricepo.toString();

            document.getElementById('a-qty').innerHTML = '<table class="tablebox"><tr><td>RPI Qty :</td><td align="right"><b id="rpi-qty">' + CommaFormatted(rpiqty.toFixed(4)) + ' ' + piece + '</b></td></tr><tr><td>PR Qty :</td><td align="right"><b id="qty">' + CommaFormatted(qty.toFixed(4)) + ' ' + piece + '</b></td><td></td><td>PR Price :</td><td align="right"><b id="price-pr">' + CommaFormatted(pricepr) + ' ' + valuta + '</b></td></tr><tr><td>Already in PO Qty :</td><td align:"right"><b id="tot-po">' + CommaFormatted(totPO) + ' ' + piece + '</b></td><td></td><td>In PO price :</td><td align="right"><b id="price-po">'+CommaFormatted(pricepo)+' '+ valuta + '</b></td></tr><tr><td>Balance qty:</td><td align="right"><b id="balanceqty" style="color:#FF3F7D">' + CommaFormatted(balanceqty.toFixed(4)) + ' ' + piece + '</b></td><td></td><td>Balance Price:</td><td align="right"><b id="balance-price" style="color:#FF3F7D">'+CommaFormatted(balancepri)+' '+ valuta + '</b></td></tr><tr><td>New Balance qty :</td><td align="right"><b id="balance-po" style="color:#FF3F7D">0</b></td></tr></table>';


                             hitungTotal();hitungTotalSupp();

                }
		else
		{
             if (valNew != valuta)
                  {
                	  Ext.MessageBox.show({
              	           title: 'Error Currency',
              	           msg: 'Currency Not Match!!',
              	           buttons: Ext.MessageBox.OK,
              	           icon: Ext.MessageBox.ERROR
              	       });

                	  clearPOForm();
                       Ext.getCmp('pr-detail-grid').enable();
                       Ext.getCmp('po-grid').enable();
                       Ext.getCmp('pr-detail-grid').getView().refresh();
                       Ext.getCmp('po-grid').getView().refresh();
//                       Ext.getCmp('save-po').disable();
//                      Ext.getCmp('cancel-po').disable();
                      return false;

                  }

//                Ext.getCmp('kode_brg_text').setValue('');
//                Ext.getCmp('nama_brg_text').setValue('');
//                Ext.getCmp('kode_brg_text').enable();
                Ext.getCmp('unit_price_text').enable();
                Ext.getCmp('po-qty').enable();
                Ext.getCmp('unit_price_text').setValue(CommaFormatted(oripr.data['price']));
                Ext.getCmp('po-qty').setValue(CommaFormatted(oripr.data['qty']));
                Ext.getCmp('unit_price_supp').setValue(CommaFormatted(oripr.data['price']));
                Ext.getCmp('posupp-qty').setValue(CommaFormatted(oripr.data['qty']));
//				Ext.getCmp('total_price_text').enable();
				var totpriPO = oripr.data['totalPricePO'];
                var balanceTotPri = parseFloat(totpri) - parseFloat(totpriPO);
                document.getElementById('a-qty').innerHTML = '<table class="tablebox"><tr><td>PR Total Price :</td><td align="right"><b id="tot-price-pr">' + CommaFormatted(totpri) + ' ' + valuta + '</b></td></tr><tr><td>Already In PO :</td><td align="right"><b id="tot-price-po">'+CommaFormatted(totpriPO)+' '+ valuta + '</b></td></tr><tr></td><td>Balance Total Price:</td><td align="right"><b id="tot-balance-price" style="color:#FF3F7D">'+CommaFormatted(balanceTotPri)+' '+ valuta +'</b></td></tr></table>';

                hitungTotal();HitungTotalSupp();
                }

	}
	else
	{
		Ext.MessageBox.show({
	           title: 'Error',
	           msg: 'Error while fetching data...',
	           buttons: Ext.MessageBox.OK,
	           icon: Ext.MessageBox.ERROR
	       });
  		return false;
	}
}

function insertPOtoList()
{
	Ext.getCmp('save-list').enable();
    Ext.getCmp('cancel-list').enable();
//    var pr = storePR.getAt(storePR.find('id', idPr));
//    var recpr = Ext.getCmp('pr-detail-grid').getSelectionModel().getSelections();

    if (Ext.getCmp('price-grids').getStore().getCount() != 0)
    {
    Ext.getCmp('price-grids').getStore().removeAll();
    Ext.getCmp('po-grid').getView().refresh();
    }

    var recpr = Ext.getCmp('pr-detail-grid').getSelectionModel().getSelections();
    oripr = storePR.getAt(storePR.find('id', oripr.data['id']));

 if (!isMscWorkid(oripr.data['workid']) && !isServiceKdbrg(oripr.data['kode_brg']))
    var result = cekQty() && cekPrice() && cekTotalSupp();
 else
    var result = cekTotal() && cekTotalSupp();
if (result)
{

    if (oripr != undefined){


//            if (!isMscWorkid(recpr[0].data['workid']))
//    	if( !isMscWorkid(oripr.data['workid']) && Ext.getCmp('tgl_po_text').getValue() == '' && Ext.getCmp('tgl_kirim_text').getValue() == '')
    		if (!isMscWorkid(oripr.data['workid']) && !isServiceKdbrg(oripr.data['kode_brg']))
    			var oripo = storePO.getAt(storePO.find('id', oripr.data['id']));
    		else
            {
//                var tglpo = Ext.getCmp('tgl_po_text').getValue();
                var tgldeli = Ext.getCmp('tgl_kirim_text').getValue();

                if (tgldeli == '')
                {
    			Ext.MessageBox.show({
  		           title: 'Error',
  		           msg: 'Please Fill Date And Delivery Estimate Date',
  		           buttons: Ext.MessageBox.OK,
  		           icon: Ext.MessageBox.ERROR
                    });
                return false;
                }
//                if (Ext.getCmp('save-po').getText() == 'Add to PO List(Cart)')
//		    		var oripo = getPORecord(oripr.data['workid'],kode_brg,false);
//		    	else
//		    		var oripo = getPORecord(oripr.data['workid'],kode_brg,true);
                var oripo = storePO.getAt(storePO.find('id', oripr.data['id']));
            }

    		if (oripo != undefined)
    		{

    			if (isMscWorkid(oripr.data['workid']) && (oripo.data['status'] == undefined || oripo.data['status'] == ''))
    			{
    				Ext.MessageBox.show({
	    		           title: 'Error',
	    		           msg: 'Please use Edit for updating this Work ID!',
	    		           buttons: Ext.MessageBox.OK,
	    		           icon: Ext.MessageBox.ERROR
	    		       });
		            return false;
    			}
//    			var oldqty = parseFloat(oripo.data['qty']);
//    			var oldprice = parseFloat(oripo.data['price']);

    			if (oripo.data['status'] == 'edit')
    			{
                    var recpo = Ext.getCmp('po-grid').getSelectionModel().getSelections();
                    var oripo = storePO.getAt(storePO.findExact('id', recpo[0].data['id']));

                    var totalBaru = parseFloat(Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,'')) * parseFloat(Ext.getCmp('unit_price_text').getValue().toString().replace(/\$|\,/g,''));
                    var totalRPI = parseFloat(oripo.data['totalPriceRPI']);
                    if (totalBaru < totalRPI)
                    {
                        Ext.MessageBox.show({
                               title: 'Error',
                               msg: 'This item has been Requested For Invoice (RPI), Total RPI : <b>' + CommaFormatted(totalRPI) + ' ' + oripo.data['val_kode'] +  '</b>.<br />New PO Total Price should be greater than or equal <b>' + CommaFormatted(totalRPI) + ' ' + oripo.data['val_kode'] +  '</b> !',
                               buttons: Ext.MessageBox.OK,
                               icon: Ext.MessageBox.ERROR
                           });
                        return false;
                    }
    				if (!isMscWorkid(oripo.data['workid']) && !isServiceKdbrg(oripo.data['kode_brg']))
    				{
        	 			oripo.data['qty'] = Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,'');
	        	 		oripo.data['price'] = Ext.getCmp('unit_price_text').getValue().toString().replace(/\$|\,/g,'');
	        	 		oripo.data['totalPrice'] = Ext.getCmp('total_price_text').getValue().toString().replace(/\$|\,/g,'');

                        oripo.data['qtySupp'] = Ext.getCmp('posupp-qty').getValue().toString().replace(/\$|\,/g,'');
	        	 		oripo.data['priceSupp'] = Ext.getCmp('unit_price_supp').getValue().toString().replace(/\$|\,/g,'');
	        	 		oripo.data['totalPriceSupp'] = Ext.getCmp('total_price_supp').getValue().toString().replace(/\$|\,/g,'');

	        	 		oripo.data['net_act'] = Ext.getCmp('net_act_text').getValue();
	        	 		oripo.data['status'] = '';
                        var qty = Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,'');
                        oripr.data['totalPO'] = parseFloat(oripr.data['totalPO']) + parseFloat(qty);

    				}
    				else
    				{
                        oripo.data['qty'] = Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,'');
	        	 		oripo.data['price'] = Ext.getCmp('unit_price_text').getValue().toString().replace(/\$|\,/g,'');
    					oripo.data['totalPrice'] = Ext.getCmp('total_price_text').getValue().toString().replace(/\$|\,/g,'');

                        oripo.data['qtySupp'] = Ext.getCmp('posupp-qty').getValue().toString().replace(/\$|\,/g,'');
	        	 		oripo.data['priceSupp'] = Ext.getCmp('unit_price_supp').getValue().toString().replace(/\$|\,/g,'');
	        	 		oripo.data['totalPriceSupp'] = Ext.getCmp('total_price_supp').getValue().toString().replace(/\$|\,/g,'');
    					oripo.data['net_act'] = Ext.getCmp('net_act_text').getValue();
    					oripo.data['status'] = '';

                        var tot = Ext.getCmp('total_price_text').getValue().toString().replace(/\$|\,/g,'');
                        oripr.data['totalPricePO'] = parseFloat(oripr.data['totalPricePO']) + parseFloat(tot);
    				}
                    oripo.data['ket'] = Ext.getCmp('ket_detil_text').getValue();
    			}
    			else
    			{
        			var opri = oripo.data['price'].toString().replace(/\$|\,/g,'');
        			var epri = Ext.getCmp('unit_price_text').getValue().toString().replace(/\$|\,/g,'');

    				var oldqty = parseFloat(oripo.data['qty'].toString().replace(/\$|\,/g,''));
        			var oldpri = parseFloat(opri);

//        			var editpri = parseFloat(epri);
        			var editqty = parseFloat(Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,''));

        			var newqty = oldqty + editqty;
//        			var newpri = oldpri + editpri;
        			var newtot = newqty * oldpri;

        			oripo.data['qty'] = newqty;
        	 		oripo.data['price'] = epri.toString().replace(/\$|\,/g,'');
        	 		oripo.data['totalPrice'] = newtot.toString().replace(/\$|\,/g,'');

        	 		oripo.data['net_act'] = Ext.getCmp('net_act_text').getValue();
        	 		oripo.data['status'] = '';

    			}
    		}


    	else
    		{
           	 pajak = Ext.getCmp('tax').getValue();
             if (pajak == 1)
            	pajak = 'Y';
             else
            	 pajak = 'N';


             if (!isMscWorkid(oripr.data['workid']) && !isServiceKdbrg(oripr.data['kode_brg']) )
             {

                 var pri = Ext.getCmp('unit_price_text').getValue().toString().replace(/\$|\,/g,'');
                 var qty = Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,'');
                 var tot = Ext.getCmp('total_price_text').getValue().toString().replace(/\$|\,/g,'');
                 if (oripr.data['totalRPI'] == undefined || oripr.data['totalRPI'] == '')
                    var totalrpi = 0;
                 else
                    var totalrpi = oripr.data['totalRPI'];

                 if (oripr.data['totalPriceRPI'] == undefined || oripr.data['totalPriceRPI'] == '')
                    var totalpricerpi = 0;
                 else
                    var totalpricerpi = oripr.data['totalPriceRPI'];
                 oripr.data['totalPO'] = parseFloat(oripr.data['totalPO']) + parseFloat(qty);

             var d = new polist({
                urut: oripr.data['urut'],
                workid: oripr.data['workid'],
                workname: oripr.data['workname'],
                pr_number: oripr.data['trano'],
                prj_kode: oripr.data['prj_kode'],
                sit_kode: oripr.data['sit_kode'],
                prj_nama: oripr.data['prj_nama'],
                sit_nama: oripr.data['sit_nama'],
                kode_brg: oripr.data['kode_brg'],
                nama_brg: oripr.data['nama_brg'],
                qty: qty,
                uom: oripr.data['uom'],
                val_kode: oripr.data['val_kode'],
                currency: Ext.getCmp('curr_text').getValue().toString().replace(/\$|\,/g,''),
                price: pri,
//                tgl_po: Ext.getCmp('tgl_po_text').getValue(),
                tgl_pr: oripr.data['tgl_pr'],

                totalPR : oripr.data['qty'],
				pricePR : oripr.data['price'],
                totalPricePR : oripr.data['totalPrice'],
				totalPO : oripr.data['totalPO'],
                totalPricePO :  oripr.data['totalPricePO'],
                totalRPI : totalrpi,
                totalPriceRPI :  totalpricerpi,

                totalPrice: tot,
                id: oripr.data['id'],

                sup_kode:Ext.getCmp('sup_kode_text').getValue(),
                sup_nama:Ext.getCmp('sup_nama_text').getValue(),
//                po_number:Ext.getCmp('po_number_text').getValue(),

                invoiceto:Ext.getCmp('invoice_text').getValue(),

                tax:pajak,
                ket: Ext.getCmp('ket_text').getValue(),
                tujuan:Ext.getCmp('tujuan_text').getValue(),
                tgl_kirim:Ext.getCmp('tgl_kirim_text').getValue(),
                po_term:Ext.getCmp('po_term').getValue(),
//                po_origin:Ext.getCmp('po_origin_text').getValue(),
//                po_type:Ext.getCmp('po_type_text').getValue(),
                net_act:Ext.getCmp('net_act_text').getValue(),
                 po_number: Ext.getCmp('po_number_text').getValue(),

                qtySupp : Ext.getCmp('posupp-qty').getValue().toString().replace(/\$|\,/g,''),
                priceSupp : Ext.getCmp('unit_price_supp').getValue().toString().replace(/\$|\,/g,''),
                totalPriceSupp : Ext.getCmp('total_price_supp').getValue().toString().replace(/\$|\,/g,'')

                });


             }
            else{

                   var pri = Ext.getCmp('unit_price_text').getValue().toString().replace(/\$|\,/g,'');
                 var qty = Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,'');
                 var tot = Ext.getCmp('total_price_text').getValue().toString().replace(/\$|\,/g,'');

                 if (oripr.data['totalRPI'] == undefined || oripr.data['totalRPI'] == '')
                    var totalrpi = 0;
                 else
                    var totalrpi = oripr.data['totalRPI'];

                 if (oripr.data['totalPriceRPI'] == undefined || oripr.data['totalPriceRPI'] == '')
                    var totalpricerpi = 0;
                 else
                    var totalpricerpi = oripr.data['totalPriceRPI'];
                 oripr.data['totalPricePO'] = parseFloat(oripr.data['totalPricePO']) + parseFloat(tot);

                  var d = new polist({
                urut: oripr.data['urut'],
                workid: oripr.data['workid'],
                workname: oripr.data['workname'],
                pr_number: oripr.data['trano'],
                prj_kode: oripr.data['prj_kode'],
                sit_kode: oripr.data['sit_kode'],
                prj_nama: oripr.data['prj_nama'],
                sit_nama: oripr.data['sit_nama'],
                kode_brg: oripr.data['kode_brg'],
                nama_brg: oripr.data['nama_brg'],
                qty: qty,
                uom: oripr.data['uom'],
                val_kode: oripr.data['val_kode'],
                currency: Ext.getCmp('curr_text').getValue().toString().replace(/\$|\,/g,''),
                price: pri,
//                tgl_po: Ext.getCmp('tgl_po_text').getValue(),
                tgl_pr: oripr.data['tgl_pr'],

                totalPR : oripr.data['qty'],
				pricePR : oripr.data['price'],
                totalPricePR : oripr.data['totalPrice'],
				totalPO : oripr.data['totalPO'],
                totalPricePO :  oripr.data['totalPricePO'],
                totalRPI : totalrpi,
                totalPriceRPI :  totalpricerpi,

                totalPrice: tot,
                id: oripr.data['id'],

                sup_kode:Ext.getCmp('sup_kode_text').getValue(),
                sup_nama:Ext.getCmp('sup_nama_text').getValue(),
//                po_number:Ext.getCmp('po_number_text').getValue(),

                invoiceto:Ext.getCmp('invoice_text').getValue(),

                tax:pajak,
                ket: Ext.getCmp('ket_text').getValue(),
                tujuan:Ext.getCmp('tujuan_text').getValue(),
                tgl_kirim:Ext.getCmp('tgl_kirim_text').getValue(),
                po_term:Ext.getCmp('po_term').getValue(),
//                po_origin:Ext.getCmp('po_origin_text').getValue(),
//                po_type:Ext.getCmp('po_type_text').getValue(),
                net_act:Ext.getCmp('net_act_text').getValue(),
                po_number: Ext.getCmp('po_number_text').getValue(),

                qtySupp : Ext.getCmp('posupp-qty').getValue().toString().replace(/\$|\,/g,''),
                priceSupp : Ext.getCmp('unit_price_supp').getValue().toString().replace(/\$|\,/g,''),
                totalPriceSupp : Ext.getCmp('total_price_supp').getValue().toString().replace(/\$|\,/g,'')

                });

             }

//             TEMPORARY = TEMPORARY + parseFloat(tot);
//
//             if (pajak == 'Y')
//            	pajak = 0.1 * TEMPORARY;
//             else
//            	 pajak = 0;
//
//    	 	grandtotal = pajak + TEMPORARY;
            storePO.add(d);
//            console.log(d);
    		}
//            oripr = undefined;
//            oripo = undefined;
    		 var oripo = storePO.getAt(storePO.find('id', oripr.data['id']));

	   		 TEMPORARY = TEMPORARY + parseFloat(oripo.data['totalPrice']);

	         if (pajak == 'Y')
	        	pajak = 0.1 * TEMPORARY;
	         else
	        	 pajak = 0;

	 		grandtotal = pajak + TEMPORARY;

            Ext.getCmp('pr-detail-grid').enable();
            Ext.getCmp('po-grid').enable();
            Ext.getCmp('pr-detail-grid').getView().refresh();
            Ext.getCmp('po-grid').getView().refresh();
//            Ext.getCmp('save-po').disable();
//            Ext.getCmp('cancel-po').disable();
            clearPOForm();

            Ext.getCmp('gtotal-text').setText('Sub Total :'+TEMPORARY.toString());
    		Ext.getCmp('pajak-text').setText('Tax :'+pajak.toString());
    		Ext.getCmp('gtotals-text').setText('Grand Total :'+grandtotal.toString());

    		oripr = undefined;
    		oripo = undefined;

}
}
};


function delToPO()
{
	Ext.MessageBox.confirm('Confirm', 'Are you sure want to delete this?', function(btn){
		if (btn== 'yes')
		{
            var recpo = Ext.getCmp('po-grid').getSelectionModel().getSelections();
            var b = storePO.getAt(storePO.findExact('id', recpo[0].data['id']));
			if (!isMscWorkid(b.data['workid']) && !isServiceKdbrg(b.data['kode_brg']))
			{
				var recpr = Ext.getCmp('pr-detail-grid').getSelectionModel().getSelections();
				var a = storePR.getAt(storePR.findExact('id', recpo[0].data['id']));

				if (b != undefined)
				{
					var qtypo = parseFloat(b.data['qty']);
					var inPR = parseFloat(a.data['totalPR']);
                    var totalPricePO = parseFloat(b.data['totalPrice']);
                    var newtotalPricePO = parseFloat(a.data['totalPricePO']);
					a.data['totalPR'] = inPR - qtypo;
                    a.data['totalPricePO'] = newtotalPricePO - totalPricePO;
					storePO.remove(b);
					Ext.getCmp('pr-detail-grid').getView().refresh();
					Ext.getCmp('po-grid').getView().refresh();
				}
			}
            else {
                var recpr = Ext.getCmp('pr-detail-grid').getSelectionModel().getSelections();
				var a = storePR.getAt(storePR.findExact('id', recpo[0].data['id']));

                var totalPricePO = parseFloat(b.data['totalPrice']);
                var newtotalPricePO = parseFloat(a.data['totalPricePO']);
                a.data['totalPricePO'] = newtotalPricePO - totalPricePO;
                storePO.remove(b);
				Ext.getCmp('pr-detail-grid').getView().refresh();
				Ext.getCmp('po-grid').getView().refresh();
            }
//			var recpr = Ext.getCmp('pr-detail-grid').getSelectionModel().getSelections();
//			var a = storePR.getAt(storePR.find('id', idPr));

//			if (!isMscWorkid(a.data['workid']))
//			{
//				var qtypo = parseFloat(recpo[0].data['qty']);
//				var inPR = parseFloat(recpr[0].data['totalPO']);
//				recpr[0].data['totalPO'] = inPR - qtypo;
//				storePO.remove(a);
//			}

//			storePO.remove(a);
			clearPOForm();
			resetButton();
		}
	});
};

function editToPO()
{
    var recpo = Ext.getCmp('po-grid').getSelectionModel().getSelections();
	Ext.getCmp('save-po').setText('Update to PO List(Cart)');
//	var recpr = Ext.getCmp('pr-detail-grid').getSelectionModel().getSelections();
	var oripo = storePO.getAt(storePO.findExact('id', recpo[0].data['id']));
     oripr = storePR.getAt(storePR.findExact('id',oripo.data['id']));

		Ext.getCmp('pr-detail-grid').disable();
		Ext.getCmp('po-grid').disable();
		Ext.getCmp('cancel-po').setText('Cancel Edit');
		Ext.getCmp('cancel-po').enable();

		if (oripo != undefined && oripr != undefined)
		{
			oripo.data['status'] = 'edit';
			Ext.getCmp('pr_no_text').setValue(oripo.data['pr_number']);
			Ext.getCmp('urut_text').setValue(oripo.data['urut']);
			Ext.getCmp('po-workid').setValue(oripo.data['workid']);
			Ext.getCmp('kode_brg_text').setValue(oripo.data['kode_brg']);
			Ext.getCmp('nama_brg_text').setValue(oripo.data['nama_brg']);
			Ext.getCmp('prj_kode_text2').setValue(oripo.data['prj_kode']);
			Ext.getCmp('prj_nama_text').setValue(oripo.data['prj_nama']);
            Ext.getCmp('sit_kode_text').setValue(oripo.data['sit_kode']);
            Ext.getCmp('sit_nama_text').setValue(oripo.data['sit_nama']);
            Ext.getCmp('uom_text').setValue(oripo.data['uom']);
            Ext.getCmp('net_act_text').setValue(oripo.data['net_act']);
//            Ext.getCmp('total_price_text').setValue(oripo.data['totalPrice'])
            Ext.getCmp('po-qty').setValue(CommaFormatted(oripo.data['qty']));
            Ext.getCmp('unit_price_text').setValue(CommaFormatted(oripo.data['price']));

            Ext.getCmp('uom_supp').setValue(oripo.data['uom']);
            Ext.getCmp('posupp-qty').setValue(CommaFormatted(oripo.data['qtySupp']));
            Ext.getCmp('unit_price_supp').setValue(CommaFormatted(oripo.data['priceSupp']));

//            Ext.getCmp('save-po').disable();

            Ext.getCmp('unit_price_text').disable();
  	        Ext.getCmp('po-qty').disable();

//  	        var idPo = oripo.data['id']
             var qtypo = parseFloat(oripo.data['qty']);

            var productID = oripo.data['kode_brg'];
            Ext.getCmp('price-grids').getStore().proxy.setApi('read','/default/home/getpricehistory/kode_brg/' +productID);
            Ext.getCmp('price-grids').getStore().reload();

            if (!isMscWorkid(oripo.data['workid']) && !isServiceKdbrg(oripo.data['kode_brg']))
    		{
           	 				Ext.getCmp('unit_price_text').enable();
    	        			Ext.getCmp('po-qty').enable();


                            oripr.data['totalPO'] = oripr.data['totalPO'] - qtypo;
    	        			var piece = oripo.data['uom'];
    	        			var valuta = oripo.data['val_kode'];

                            var qty = parseFloat(oripo.data['totalPR']);
                            var totPO = parseFloat(oripr.data['totalPO']);

							var rpiqty = parseFloat(oripo.data['totalRPI']);
							if (rpiqty == undefined || rpiqty == '')
								rpiqty = 0;

                            var balanceqty = qty - totPO - rpiqty;

                            var pricepr= oripo.data['pricePR'].toString().replace(/\$|\,/g,'');
                            var pricepo= oripo.data['price'].toString().replace(/\$|\,/g,'');
                            var balancepri = parseFloat(pricepr)-parseFloat(pricepo);
                            var inpo = Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,'');

                            //totpri = totpri.toString();
                            //totpriPO = totpriPO.toString();
                            //balancepri = balancepri.toString();
                            pricepr = pricepr.toString();
                            //pricepo = pricepo.toString();

    			document.getElementById('a-qty').innerHTML = '<table class="tablebox"><tr><td>RPI Qty :</td><td align="right"><b id="rpi-qty">' + CommaFormatted(rpiqty.toFixed(4)) + ' ' + piece + '</b></td></tr><tr><td>PR Qty :</td><td align="right"><b id="qty">' + CommaFormatted(qty.toFixed(4)) + ' ' + piece + '</b></td><td></td><td>PR Price :</td><td align="right"><b id="price-pr">' + CommaFormatted(pricepr) + ' ' + valuta + '</b></td></tr><tr><td>Already in PO Qty :</td><td align:"right"><b id="tot-po">' + CommaFormatted(totPO) + ' ' + piece + '</b></td><td></td><td>In PO price :</td><td align="right"><b id="price-po">'+CommaFormatted(pricepo)+' '+ valuta + '</b></td></tr><tr><td>Balance qty:</td><td align="right"><b id="balanceqty" style="color:#FF3F7D">' + CommaFormatted(balanceqty.toFixed(4)) + ' ' + piece + '</b></td><td></td><td>Balance Price:</td><td align="right"><b id="balance-price" style="color:#FF3F7D">'+CommaFormatted(balancepri)+' '+ valuta + '</b></td></tr><tr><td>New Balance qty :</td><td align="right"><b id="balance-po" style="color:#FF3F7D">0</b></td></tr></table>';


                             hitungTotal();hitungTotalSupp();

                    }
    			else
    			{
                        Ext.getCmp('unit_price_text').enable();
                        Ext.getCmp('po-qty').enable();
                        var valuta = oripo.data['val_kode'];
//                        Ext.getCmp('total_price_text').enable();
                        var totpri = parseFloat(oripo.data['totalPricePR']);
                        oripr.data['totalPricePO'] = parseFloat(oripr.data['totalPricePO']) - parseFloat(oripo.data['totalPrice']);

                        var totpriPO = oripr.data['totalPricePO'];
                        var balanceTotPri = parseFloat(totpri) - parseFloat(totpriPO);
                        document.getElementById('a-qty').innerHTML = '<table class="tablebox"><tr><td>PR Total Price :</td><td align="right"><b id="tot-price-pr">' + CommaFormatted(totpri) + ' ' + valuta + '</b></td></tr><tr><td>Already In PO :</td><td align="right"><b id="tot-price-po">'+CommaFormatted(totpriPO)+' '+ valuta + '</b></td></tr><tr></td><td>Balance Total Price:</td><td align="right"><b id="tot-balance-price" style="color:#FF3F7D">'+CommaFormatted(balanceTotPri)+' '+ valuta +'</b></td></tr></table>';
//    					Ext.MessageBox.show({
//    		           title: 'Error',
//    		           msg: 'Valuta not match...',
//    		           buttons: Ext.MessageBox.OK,
//    		           icon: Ext.MessageBox.ERROR
//    		       });
                        hitungTotal();hitungTotalSupp();

    	                }

    	}
    	else
    	{
    		Ext.MessageBox.show({
    	           title: 'Error',
    	           msg: 'Error while fetching data...',
    	           buttons: Ext.MessageBox.OK,
    	           icon: Ext.MessageBox.ERROR
    	       });
      		return false;
    	}

}

function showPrFromPoList()
{

	var trano = Ext.getCmp('po_number_text').getValue();
	Ext.Ajax.request({
        results: 0,
        url: '/default/home/getprfrompo/data/'+trano,
        method:'POST',
        success: function(result, request){
           var returnData = Ext.util.JSON.decode(result.responseText);
			jumlah = returnData.count;
           Ext.each(returnData.posts, function(op) {

               var c = new prlist({
                   	trano : op['pr_number'],
                     tgl_pr : op['pr_tgl'],
                   	urut: op['pr_urut'],
               		prj_kode: op['prj_kode'],
                		prj_nama: op['prj_nama'],
                		sit_kode: op['sit_kode'],
                		sit_nama: op['sit_nama'],
                		workid: op['workid'],
     					workname: op['workname'],
                 		kode_brg: op['kode_brg'],
                 		nama_brg: op['nama_brg'],
        				qty: op['pr_qty'],
       				 	uom: op['uom'],
                     	price: op['pr_price'],
                     	totalPrice: op['pr_total'],
                        val_kode: Ext.getCmp('val_kode_text').getValue(),
                        totalPO: op['totalPO'],
                        totalPricePO: op['totalPricePO'],
                        balancePO: op['balancePO'],
                        totalRPI : op['totalRPI'],
                        totalPriceRPI : op['totalPriceRPI'],
                        net_act: op['myob'],
	            		id: op['id']

               });
               storePR.add(c);
//               console.log(c);
		}); Ext.getCmp('pr-detail-grid').getView().refresh();
	},
	failure:function( action){
      	if(action.failureType == 'server'){
            obj = Ext.util.JSON.decode(action.response.responseText);
            Ext.Msg.alert('Error!', obj.errors.reason);
        	}else{
            Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
        	}
        	}
	});
}

function showPrevPoList()
{
	var trano = Ext.getCmp('po_number_text').getValue();

	Ext.Ajax.request({
        results: 0,
        url: '/default/home/getprfrompo/data/'+trano,
        method:'POST',
        success: function(result, request){
           var returnData = Ext.util.JSON.decode(result.responseText);
           var pajak;

    	   var pajak = '<?php echo $this->statusppn; ?>';
//        	if (b != 0)
//        		pajak = 'Y';
//        	else
//        		pajak = 'N';

           Ext.each(returnData.posts, function(ret) {

               var d = new polist({
                   	po_number : ret['po_number'],
                   	pr_number : ret['pr_number'],
                     tgl_pr : ret['pr_tgl'],
                   	urut: ret['po_urut'],
               		prj_kode: ret['prj_kode'],
                		prj_nama: ret['prj_nama'],
                		sit_kode: ret['sit_kode'],
                		sit_nama:ret['sit_nama'],
                		workid: ret['workid'],
     					workname: ret['workname'],
                 		kode_brg: ret['kode_brg'],
                 		nama_brg: ret['nama_brg'],
        				qty: ret['po_qty'],
       				 	uom: ret['uom'],
                     	price: ret['po_price'].toString().replace(/\$|\,/g,''),
                     	totalPrice: ret['po_total'].toString().replace(/\$|\,/g,''),
                        val_kode: Ext.getCmp('val_kode_text').getValue(),
                        currency: Ext.getCmp('curr_text').getValue(),
                        totalRPI : ret['totalRPI'],
                        totalPriceRPI : ret['totalPriceRPI'],

                        totalPR : ret['pr_qty'],
        				pricePR : ret['pr_price'],
        				totalPO : ret['totalPO'],

        				sup_kode:Ext.getCmp('sup_kode_text').getValue(),
                        sup_nama:Ext.getCmp('sup_nama_text').getValue(),
                        tax:pajak,
                        ket: ret['po_ket'],
                        tujuan:Ext.getCmp('tujuan_text').getValue(),
                        tgl_kirim:Ext.getCmp('tgl_kirim_text').getValue(),
                        po_term:Ext.getCmp('po_term').getValue(),
//                        po_origin:Ext.getCmp('po_origin_text').getValue(),
//                        po_type:Ext.getCmp('po_type_text').getValue(),
                        net_act:ret['po_netact'],
                        invoiceto: ret['invoiceto'],
                        qtySupp:ret['qtysupp'],
                        priceSupp:ret['pricesupp'],
                        totalPriceSupp:ret['totalsupp'],
	            		id: ret['id']




               });
//               console.log(d);

//               var oripo = storePO.getAt(storePO.find('id', idPr));
               TEMPORARY = TEMPORARY + parseFloat(ret['po_total']);

	             if (pajak == 1)
	            	pajak = 0.1 * TEMPORARY;
	             else
	            	 pajak = 0;
        	 	grandtotal = pajak + TEMPORARY;

               storePO.add(d);
//               console.log(d);
		}); Ext.getCmp('po-grid').getView().refresh();

		Ext.getCmp('gtotal-text').setText('Sub Total :'+TEMPORARY.toString());
		Ext.getCmp('pajak-text').setText('Tax :'+pajak.toString());
		Ext.getCmp('gtotals-text').setText('Grand Total :'+grandtotal.toString());
	},
	failure:function( action){
      	if(action.failureType == 'server'){
            obj = Ext.util.JSON.decode(action.response.responseText);
            Ext.Msg.alert('Error!', obj.errors.reason);
        	}else{
            Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
        	}
        	}
	});
}

//function showPrList()
//{
//    var columns = [ {header:'Trano',width:100,sortable:true,dataIndex:'trano'},
//                    {header:'Project ID',width:100,sortable:true,dataIndex:'prj_kode'},
//                    {header:'Project Name',width:150,sortable:true,dataIndex:'prj_nama'},
//                    {header:'Site Code',width:100,sortable:true,dataIndex:'sit_kode'},
//                    {header:'Site Name',width:100,sortable:true,dataIndex:'sit_nama'},
//                ];
//
//    urlJson = CFG_CLIENT_SERVER_NAME +'/prh/list';
//    data =  [
//            {name: 'trano', mapping: 'trano'},
//            {name: 'prj_kode', mapping: 'prj_kode'},
//            {name: 'prj_nama', mapping: 'prj_nama'},
//            {name: 'sit_kode', mapping: 'sit_kode'},
//            {name: 'sit_nama', mapping: 'sit_nama'},
//            {name: 'prj_nama', mapping: 'prj_nama'},];
//    primaryKey = 'trano';
//    Pk = primaryKey;
//    widthGrid = 380;
//    heightGrid = 250;
//
//    var stores = new Ext.data.Store({
//        proxy:new Ext.data.HttpProxy({
//        url: urlJson
//         }),
//        reader: new Ext.data.JsonReader({
//        root: 'posts',
//        totalProperty: 'count'
//    },data)
//        });
//
//    yAxis=100;
//    grids = function()
//    {
//        grids.superclass.constructor.call(this, {
//        store: stores,
//        columns: columns,
//        x:0,
//        y:yAxis,
//        id:primaryKey+'_grid',
//        loadMask: true,
//        bbar:[ new Ext.PagingToolbar({
//            pageSize: 100,
//            store: stores,
//            displayInfo: true,
//            displayMsg: 'Displaying data {0} - {1} of {2}',
//            emptyMsg: "No data to display"
//        })],
//        height:heightGrid,
//        width:widthGrid,
//        listeners: {
//            'rowdblclick': function(g, rowIndex, e){
//                            closeForm = false;
//                            isDblClick = true;
//                            objectName = 'trano';
//                            txtBoxChange = 'trano_text';
//                            closeForm = true;
//                            formId = 'a-form-panel-trano_button';
//                            prox = 'trano_proxy';
//                            gri = 'trano_grid';
//                            var trano = g.getStore().getAt(rowIndex).get(objectName);
//
//
//                            //Ext.getCmp('PR-detail-grid').getStore().proxy.setUrl('/default/prd/listbyparams/name/trano/data/' + trano);
//                            //Ext.getCmp('PR-detail-grid').getStore().reload();
//                            Ext.Ajax.request({
//                                results: 0,
//                                url: '/default/home/getprsummary/data/'+trano,
//                                method:'POST',
//                                success: function(result, request){
//                                   var returnData = Ext.util.JSON.decode(result.responseText);
//
//                                   Ext.each(returnData.posts, function(op) {
//
//                                      var c = new prlist({
//                                          	trano : op['trano'],
//                                            tgl_pr : op['tgl'],
//                                          	urut: op['urut'],
//                                      		prj_kode: op['prj_kode'],
//                                       		prj_nama: op['prj_nama'],
//                                       		sit_kode: op['sit_kode'],
//                                       		sit_nama: op['sit_nama'],
//                                       		workid: op['workid'],
//           			     					workname: op['workname'],
//                                        	kode_brg: op['kode_brg'],
//                                        	nama_brg: op['nama_brg'],
//           		            				qty: op['qty'],
//                                                uom: op['uom'],
//                                                price: op['harga'],
////                                                hargaIDR : op['hargaIDR'],
////                                                hargaUSD : op['hargaUSD'],
////                                                totalIDR : op['totalIDR'],
////                                                totalUSD : op['totalUSD'],
//                                                totalPrice: op['jumlah'],
//                                                val_kode: op['val_kode'],
//                                                totalPO: op['totalPO'],
//                                                totalPricePO: op['totalPricePO'],
//                                                balancePO: op['balancePO'],
//                   		            	id: getNewID()
//
//                                      });
//                                      storePR.add(c);
////                                      console.log(c);
//
//                                   });
//                                   Ext.getCmp('pr-detail-grid').getView().refresh();
//                            }
//                            });
//
//                            window.setTimeout(function(){
//                                    isDblClick = false;
//                            }, 0);
//                    }
//            }
//    });
//    }
//    stores.load();
//
//    Ext.extend(grids, Ext.grid.GridPanel);
//    Ext.extend(txtboks,Ext.form.TextField);//PR
//    searchTrano = function(field,e){
//        newUrl = '/prh/listByParams/name/trano/data/' + field.getValue(); prox = Pk+'_proxy';
//        gri = Pk+'_grid';
//        proxies = Ext.getCmp(gri).getStore();
//        proxies.proxy = new Ext.data.HttpProxy( {
//            url: newUrl
//             });
//        Ext.getCmp(gri).getStore().reload();
//    }
//    searchPrj_kode = function(field,e){
//        newUrl = '/prh/listByParams/name/prj_kode/data/' + field.getValue(); prox = Pk+'_proxy';
//        gri = Pk+'_grid';
//        proxies = Ext.getCmp(gri).getStore();
//        proxies.proxy = new Ext.data.HttpProxy( {
//            url: newUrl
//             });
//        Ext.getCmp(gri).getStore().reload();
//}
//    searchSit_kode = function(field,e){
//        newUrl = '/prh/listByParams/name/sit_kode/data/' + field.getValue(); prox = Pk+'_proxy';
//        gri = Pk+'_grid';
//        proxies = Ext.getCmp(gri).getStore();
//        proxies.proxy = new Ext.data.HttpProxy( {
//            url: newUrl
//             });
//        Ext.getCmp(gri).getStore().reload();
//}
//
//    var aForm =  new Ext.Window({
//    id: 'a-form-panel-trano_button',
//    layout: 'absolute',
//    minWidth: 300,
//    minHeight: 200,
//    width: 400,
//    height: 400,
//    items : [
//        {
//        x: 6,
//        y: 12,
//        xtype: 'label',
//        text: 'No Trans'
//        },
//       new txtboks(80,10,80,'trans_no',searchTrano),
//       {
//           x : 6,
//           y: 52,
//           xtype: 'label',
//           text: 'Project Code'
//           },
//          new txtboks(80,50,80,'prj_kode',searchPrj_kode),
//       {
//             x: 165,
//             y: 52,
//        	xtype: 'label',
//            text: 'Site Code'
//              },
//             new txtboks(240,50,80,'sit_kode',searchSit_kode),
//         {
//        x: 384,
//        y: 12,
//        xtype: 'label',
//        text: ''
//        }
//        ,new grids('pr_list')
//    ]
//
//  });
//  aForm.title = 'Choose No Trans';
//  aForm.show();
//}


function showPrList()
{
    var columns = [ {header:'Trano',width:100,sortable:true,dataIndex:'trano'},
                    {header:'Origin of Budget',width:100,sortable:true,dataIndex:'budgettype'},
                    {header:'Project ID',width:70,sortable:true,dataIndex:'prj_kode'},
                    {header:'Project Name',width:150,sortable:true,dataIndex:'prj_nama'},
                    {header:'Site Code',width:55,sortable:true,dataIndex:'sit_kode'},
                    {header:'Site Name',width:100,sortable:true,dataIndex:'sit_nama'}
                ];

    urlJson = '/default/prh/list/type/O';
    data =  [
            {name: 'trano', mapping: 'trano'},
            {name: 'prj_kode', mapping: 'prj_kode'},
            {name: 'prj_nama', mapping: 'prj_nama'},
            {name: 'sit_kode', mapping: 'sit_kode'},
            {name: 'sit_nama', mapping: 'sit_nama'},
            {name: 'prj_nama', mapping: 'prj_nama'},
            {name: 'budgettype', mapping: 'budgettype'}];
    primaryKey = 'trano';
    Pk = primaryKey;
    widthGrid = 380;
    heightGrid = 250;

    var stores = new Ext.data.Store({
        proxy:new Ext.data.HttpProxy({
        url: urlJson
         }),
        reader: new Ext.data.JsonReader({
        root: 'posts',
        totalProperty: 'count'
    },data)
        });

    var storeType = new Ext.data.SimpleStore({
        fields:['nilai', 'type']
                ,data:[
                       ['Project','Project'],
                       ['OPEX','OPEX'],
                       ['CAPEX','CAPEX']

                   ]

            });

    var combobox = new Ext.form.ComboBox({
        	x : 90,
        	y : 90,
    		name:'selectBudgettype'
            ,store: storeType
                ,valueField:'nilai'
                ,displayField:'type'
                ,typeAhead: true,

                forceSelection: true,
                mode: 'local',
                triggerAction: 'all',
                selectOnFocus: true,
                emptyText: 'Select Type',
    			width: 100
                ,listeners : {
                    'select' : function (c,storeType, index){

                                var docs = c.getValue();
                                newUrl = '/prh/listByParams/name/budgettype/data/' + docs;
                                proxies = Ext.getCmp('pr_grid').getStore();
                                proxies.proxy = new Ext.data.HttpProxy( {
                                    url: newUrl
                                     });
                                Ext.getCmp('pr_grid').getStore().reload();
                                Ext.getCmp('pr_grid').getView().refresh();

							}
                        }
        });

    yAxis=120;
    grids = function()
    {
        grids.superclass.constructor.call(this, {
        store: stores,
        columns: columns,
        x:0,
        y:yAxis,
        id:'pr_grid',
        loadMask: true,
        bbar:[ new Ext.PagingToolbar({
            pageSize: 100,
            store: stores,
            displayInfo: true,
            displayMsg: 'Displaying data {0} - {1} of {2}',
            emptyMsg: "No data to display"
        })],
        height:heightGrid,
        width:widthGrid,
        listeners: {
            'rowdblclick': function(g, rowIndex, e){
                            closeForm = false;
                            isDblClick = true;
                            objectName = 'trano';
                            txtBoxChange = 'trano_text';
                            closeForm = true;
                            formId = 'a-form-panel-trano_button';
                            prox = 'trano_proxy';
                            gri = 'trano_grid';
                            var trano = g.getStore().getAt(rowIndex).get(objectName);
                            var rec = Ext.getCmp('pr_grid').getSelectionModel().getSelections();

                            if (Ext.getCmp('po_origin_text').getValue() != '')
                            {

                                if (Ext.getCmp('po_origin_text').getValue().toUpperCase() != rec[0].data['budgettype'].toUpperCase())
                                {
                                    Ext.MessageBox.show({
                                    title: 'Error',
                                    msg: 'Budget Type Is Not Match',
                                    buttons: Ext.MessageBox.OK,
                                    icon: Ext.MessageBox.ERROR
                                    });
                                    return false;
                                }
                            }
                            else
                                Ext.getCmp('po_origin_text').setValue(rec[0].data['budgettype']);


                            //Ext.getCmp('PR-detail-grid').getStore().proxy.setUrl('/default/prd/listbyparams/name/trano/data/' + trano);
                            //Ext.getCmp('PR-detail-grid').getStore().reload();
                            Ext.Ajax.request({
                                results: 0,
                                url: '/default/home/getprsummary/data/'+trano,
                                method:'POST',
                                success: function(result, request){
                                   var returnData = Ext.util.JSON.decode(result.responseText);

                                   Ext.each(returnData.posts, function(op) {

                                      var c = new prlist({
                                          	trano : op['trano'],
                                            tgl_pr : op['tgl'],
                                          	urut: op['urut'],
                                      		prj_kode: op['prj_kode'],
                                       		prj_nama: op['prj_nama'],
                                       		sit_kode: op['sit_kode'],
                                       		sit_nama: op['sit_nama'],
                                       		workid: op['workid'],
           			     					workname: op['workname'],
                                        	kode_brg: op['kode_brg'],
                                        	nama_brg: op['nama_brg'],
           		            				qty: op['qty'],
                                                uom: op['uom'],
                                                price: op['harga'],
//                                                hargaIDR : op['hargaIDR'],
//                                                hargaUSD : op['hargaUSD'],
//                                                totalIDR : op['totalIDR'],
//                                                totalUSD : op['totalUSD'],
                                                totalPrice: op['jumlah'],
                                                val_kode: op['val_kode'],
                                                totalPO: op['totalPO'],
                                                totalPricePO: op['totalPricePO'],
                                                balancePO: op['balancePO'],
                                                net_act: op['myob'],
                                            budgettype: op['budgettype'],
                   		            	id: getNewID()

                                      });
                                      storePR.add(c);
//                                      console.log(c);

                                   });
                                   Ext.getCmp('pr-detail-grid').getView().refresh();
                            }
                            });

                            window.setTimeout(function(){
                                    isDblClick = false;
                            }, 0);
                    }
            }
    });
    }
    stores.load();

    Ext.extend(grids, Ext.grid.GridPanel);
    Ext.extend(txtboks,Ext.form.TextField);//PR
    searchTrano = function(field,e){
        newUrl = '/prh/listByParams/type/O/name/trano/data/' + field.getValue(); prox = Pk+'_proxy';
        gri = 'pr_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy( {
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();
    }
    searchPrj_kode = function(field,e){
        newUrl = '/prh/listByParams/type/O/name/prj_kode/data/' + field.getValue(); prox = Pk+'_proxy';
        gri = 'pr_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy( {
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();
}
    searchSit_kode = function(field,e){
        newUrl = '/prh/listByParams/type/O/name/sit_kode/data/' + field.getValue(); prox = Pk+'_proxy';
        gri = 'pr_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy( {
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();
}

    var aForm =  new Ext.Window({
    id: 'a-form-panel-trano_button',
    layout: 'absolute',
    minWidth: 300,
    minHeight: 200,
    width: 400,
    height: 400,
    stateful: false,
    modal : true,
    resizeable : false,
    items : [
        {
        x: 6,
        y: 12,
        xtype: 'label',
        text: 'No Trans'
        },
       new txtboks(80,10,80,'trans_no',searchTrano),
       {
           x : 6,
           y: 52,
           xtype: 'label',
           text: 'Project Code'
           },
       new txtboks(80,50,80,'prj_kode',searchPrj_kode),
       {
             x: 165,
             y: 52,
        	xtype: 'label',
            text: 'Site Code'
              },
       new txtboks(240,50,80,'sit_kode',searchSit_kode),
       {
             x: 6,
             y: 92,
        	xtype: 'label',
            text: 'Origin Of Budget'
       },
       combobox
        ,new grids('pr_list')
    ]

  });
  aForm.title = 'Choose No Trans';
  aForm.show();

}
//
//function showPrList()
//{
//    var columns = [ {header:'Trano',width:100,sortable:true,dataIndex:'trano'},
//                    {header:'Project ID',width:100,sortable:true,dataIndex:'prj_kode'},
//                    {header:'Project Name',width:150,sortable:true,dataIndex:'prj_nama'},
//                    {header:'Site Code',width:100,sortable:true,dataIndex:'sit_kode'},
//                    {header:'Site Name',width:120,sortable:true,dataIndex:'sit_nama'},
//                    {header:'Origin Of Budget',width:90,sortable:true,dataIndex:'budgettype'}
//                ];
//
//    var store = new Ext.ux.data.PagingJsonStore({
//        idProperty: 'id',
//        totalProperty: 'count',
//        root : 'posts',
//        fields: [
//			{name: 'id'},
//			{name: 'trano'},
//			{name: 'prj_kode'},
//			{name: 'sit_kode'},
//			{name: 'prj_nama'},
//			{name: 'sit_nama'},
//            {name: 'budgettype'}
//          ],
//        autoLoad: {params: {start: 0, limit: 50}},
//        url: '/pool_pr.json'
//    });
//	store.load();
//
//    var storeType = new Ext.data.SimpleStore({
//        fields:['nilai', 'type']
//                ,data:[
//                       ['Project','Project'],
//                       ['OPEX','OPEX'],
//                       ['CAPEX','CAPEX']
//
//                   ]
//
//            });
//
//    var combobox = new Ext.form.ComboBox({
//        	x : 90,
//        	y : 90,
//    		name:'selectBudgettype'
//            ,store: storeType
//                ,valueField:'nilai'
//                ,displayField:'type'
//                ,typeAhead: true,
//
//                forceSelection: true,
//                mode: 'local',
//                triggerAction: 'all',
//                selectOnFocus: true,
//                emptyText: 'Select Type',
//    			width: 100
//                ,listeners : {
//                    'select' : function (c,storeType, index){
//
//                                var docs = c.getValue();
//                                store.clearFilter();
//                                store.filterBy(function(record,id){
//                                   reg = new RegExp(docs, "gi");
//                                    if(reg.test(record.data['budgettype']))
//                                    {
//                                        return true;
//                                    }
//                                });
//                                Ext.getCmp('pr_grid').getStore().reload();
//                                Ext.getCmp('pr_grid').getView().refresh();
//
//							}
//                        }
//        });
//
//    yAxis=130;
//    grids = function()
//    {
//        grids.superclass.constructor.call(this, {
//        store: store,
//        columns: columns,
//        x:0,
//        y:yAxis,
//        id:'pr_grid',
//        loadMask: true,
//        bbar:[ new Ext.PagingToolbar({
//            pageSize: 50,
//            store: store,
//            displayInfo: true,
//            displayMsg: 'Displaying data {0} - {1} of {2}',
//            emptyMsg: "No data to display"
//        })],
//        width:380,
//        height:250,
//        listeners: {
//            'rowdblclick': function(g, rowIndex, e){
//                            closeForm = false;
//                            isDblClick = true;
//                            objectName = 'trano';
//                            txtBoxChange = 'trano_text';
//                            closeForm = true;
//                            formId = 'a-form-panel-trano_button';
//                            prox = 'trano_proxy';
//                            gri = 'trano_grid';
//                            var trano = g.getStore().getAt(rowIndex).get(objectName);
//                            var rec = Ext.getCmp('pr_grid').getSelectionModel().getSelections();
//
//                            if (Ext.getCmp('po_origin_text').getValue() != '')
//                            {
//
//                                if (Ext.getCmp('po_origin_text').getValue() != rec[0].data['budgettype'])
//                                {
//                                    Ext.MessageBox.show({
//                                    title: 'Error',
//                                    msg: 'Budget Type Is Not Match',
//                                    buttons: Ext.MessageBox.OK,
//                                    icon: Ext.MessageBox.ERROR
//                                    });
//                                    return false;
//                                }
//                            }
//                            else
//                                Ext.getCmp('po_origin_text').setValue(rec[0].data['budgettype']);
//
//
//                            //Ext.getCmp('PR-detail-grid').getStore().proxy.setUrl('/default/prd/listbyparams/name/trano/data/' + trano);
//                            //Ext.getCmp('PR-detail-grid').getStore().reload();
//
//                            Ext.Ajax.request({
//                                results: 0,
//                                url: '/default/home/getprsummary/data/'+trano,
//                                method:'POST',
//                                success: function(result, request){
//                                   var returnData = Ext.util.JSON.decode(result.responseText);
//
//                                   Ext.each(returnData.posts, function(op) {
//
//                                      var c = new prlist({
//                                       trano : op['trano'],
//                                            tgl_pr : op['tgl'],
//                                          	urut: op['urut'],
//                                      		prj_kode: op['prj_kode'],
//                                       		prj_nama: op['prj_nama'],
//                                       		sit_kode: op['sit_kode'],
//                                       		sit_nama: op['sit_nama'],
//                                       		workid: op['workid'],
//           			     					workname: op['workname'],
//                                        	kode_brg: op['kode_brg'],
//                                        	nama_brg: op['nama_brg'],
//           		            				qty: op['qty'],
//                                                uom: op['uom'],
//                                                price: op['harga'],
////                                                hargaIDR : op['hargaIDR'],
////                                                hargaUSD : op['hargaUSD'],
////                                                totalIDR : op['totalIDR'],
////                                                totalUSD : op['totalUSD'],
//                                                totalPrice: op['jumlah'],
//                                                val_kode: op['val_kode'],
//                                                totalPO: op['totalPO'],
//                                                totalPricePO: op['totalPricePO'],
//                                                balancePO: op['balancePO'],
//                                                 totalRPI : 0,
//                                                totalPriceRPI : 0,
//                                                net_act: op['myob'],
//                                            budgettype: op['budgettype'],
//                   		            	id: getNewID()
//
//                                   });
//                                   storePR.add(c);
////                                      console.log(c);
//
//                                   });
//                                   Ext.getCmp('pr-detail-grid').getView().refresh();
//                            }
//                            });
//
//                            window.setTimeout(function(){
//                                    isDblClick = false;
//                            }, 0);
//                    }
//            }
//    });
//        Ext.override(Ext.PagingToolbar, {
//            doRefresh: function(){
//                this.clearFilter();
//                delete this.store.lastParams;
//                this.doLoad(this.cursor);
//            }
//            });
//    }
//
//    Ext.extend(grids, Ext.grid.GridPanel);
//    Ext.extend(txtboks,Ext.form.TextField);//PR
//    searchTrano = function(field,e){
//
//        var docs = field.getValue();
//        store.clearFilter();
//        store.filterBy(function(record,id){
//           reg = new RegExp(docs, "gi");
//            if(reg.test(record.data['trano']))
//            {
//                return true;
//            }
//        });
//        Ext.getCmp('pr_grid').getStore().reload();
//        Ext.getCmp('pr_grid').getView().refresh();
//    }
//    searchPrj_kode = function(field,e){
//
//        var docs = field.getValue();
//        store.clearFilter();
//        store.filterBy(function(record,id){
//           reg = new RegExp(docs, "gi");
//            if(reg.test(record.data['prj_kode']))
//            {
//                return true;
//            }
//        });
//        Ext.getCmp('pr_grid').getStore().reload();
//        Ext.getCmp('pr_grid').getView().refresh();
//}
//    searchSit_nama = function(field,e){
//
//        var docs = field.getValue();
//        store.clearFilter();
//        store.filterBy(function(record,id){
//           reg = new RegExp(docs, "gi");
//            if(reg.test(record.data['sit_nama']))
//            {
//                return true;
//            }
//        });
//        Ext.getCmp('pr_grid').getStore().reload();
//        Ext.getCmp('pr_grid').getView().refresh();
//}
//
//    var aForm =  new Ext.Window({
//    id: 'a-form-panel-trano_button',
//    layout: 'absolute',
//    minWidth: 300,
//    minHeight: 200,
//    width: 400,
//    height: 450,
//    stateful: false,
//    modal : true,
//    resizeable : false,
//    items : [
//        {
//        x: 6,
//        y: 12,
//        xtype: 'label',
//        text: 'No Trans'
//        },
//       new txtboks(80,10,80,'trans_no',searchTrano),
//       {
//           x : 6,
//           y: 52,
//           xtype: 'label',
//           text: 'Project Code'
//       },
//       new txtboks(80,50,80,'prj_kode',searchPrj_kode),
//       {
//             x: 165,
//             y: 52,
//        	xtype: 'label',
//            text: 'Site Name'
//       },
//       new txtboks(240,50,80,'sit_nama',searchSit_nama),
//        {
//             x: 6,
//             y: 92,
//        	xtype: 'label',
//            text: 'Origin Of Budget'
//       },
//       combobox,
//         {
//        x: 384,
//        y: 12,
//        xtype: 'label',
//        text: ''
//        }
//        ,new grids('pr_list')
//    ]
//
//  });
//  aForm.title = 'Choose No Trans';
//  aForm.show();
//
//
//}

function deliveryTo()
{

	var proxy = new Ext.data.HttpProxy({
        url: CFG_CLIENT_SERVER_NAME +'/delivery/list'
    });

    var store = new Ext.data.Store({
        proxy: proxy,
        reader: new Ext.data.JsonReader({
            id: 'delivery',
            totalProperty: 'count',
            root: 'posts'
        }, [{
            name: 'gdg_nama'
        }, {
            name: 'alamat1'
        }])
    });

//	var datacombo = new Ext.data.SimpleStore({
//        fields:['nama', 'nilai']
//                ,data:[
//                       ['QDC warehouse','JL.Saharjo'],
//                       ['QDC Head Office','gedung Mega Plaza lt.5'],
//                       ['other site','site']
//                   ]
//            });

    var combobox = new Ext.form.ComboBox({
        	x : 90,
        	y : 10,
    		name:'selectAlamat'
            ,store: store
                ,valueField:'alamat1'
                ,displayField:'gdg_nama'
                ,typeAhead: true,

                forceSelection: true,
                mode: 'remote',
                triggerAction: 'all',
                selectOnFocus: true,
                emptyText: 'Select Address',
                //,value: 'QDC warehouse'
    			width: 200
                ,listeners : {
                    'select' : function (c,store, index){

        						var data = c.getValue();
//        						console.log(data);
        						Ext.getCmp('alamat_text').setValue(data);

//								if (index == '0')
//								{
//
//								var data = c.getValue();
//								Ext.getCmp('alamat_text').setValue(data);
//								Ext.getCmp('tujuan_text').setValue(Ext.getCmp('alamat_text').getValue());
//	            				}
//	            				if (index == '1')
//	            				{
//	                				var data = c.getValue();
//	                				Ext.getCmp('alamat_text').setValue(data);
//	                				Ext.getCmp('tujuan_text').setValue(Ext.getCmp('alamat_text').getValue());
//	            				}
//	            				else
//	            				{
//	                				Ext.getCmp('alamat_text').enable();
//	                				Ext.getCmp('tujuan_text').setValue(Ext.getCmp('alamat_text').getValue());
//	            				}
//
							}
                        }
        });
    var textarea = new Ext.form.TextArea({
		x: 90,
		y: 50,

		id : 'alamat_text',
		width :200,
		height : 100,
		disabled : true,
		grow : false
        });

    var okbutton = new Ext.Button({
		x: 200,
		y: 153,

		id: 'ok-button-deli',
		text: 'submit',
		handler: function(btn, ev){
    	Ext.getCmp('tujuan_text').setValue(Ext.getCmp('alamat_text').getValue());
    	Ext.getCmp('a-form-panel-delivery_button').close();
    	}
        });

    var cancel = new Ext.Button({
		x: 250,
		y: 153,

		id: 'cancel-button-deli',
		text: 'cancel',
		handler : function(btn, ev){
    	Ext.getCmp('tujuan_text').setValue('');
    	Ext.getCmp('a-form-panel-delivery_button').close();
    	}
        });

    var aForm =  new Ext.Window({
        id: 'a-form-panel-delivery_button',
        layout: 'absolute',
        minWidth: 200,
        minHeight: 200,
        width: 320,
        height: 210,
        stateful:false,
        modal: true,
        resizable: false,
        items : [
            {
            x: 6,
            y: 12,
            xtype: 'label',
            text: 'Select Address :'
            },
           combobox,
           {
               x: 6,
               y: 52,
               xtype: 'label',
               text: 'Detail'
               },
           textarea,
           okbutton,
           cancel
        ]
      });
    aForm.title = 'Choose Adresses';
    aForm.show();

}

function init()
{
	Ext.getCmp('po_number_text').setValue('<?php echo $this->trano; ?>');
//	Ext.getCmp('tgl_po_text').setValue('<?php echo $this->tgl; ?>');

	var a = '<?php echo $this->statusppn; ?>';

	if (a == 'Y')
		Ext.getCmp('tax').setValue(true);
	else
		Ext.getCmp('tax').setValue(false);

    var jsonFile = <?php echo $this->file ?>;

    storeFile.loadData(jsonFile);
    Ext.getCmp('files-grid').getView().refresh();
	showPrFromPoList();
	showPrevPoList();

//	getLastPO();
//	getExchangeRate();
//	refreshForm();


}

function getLastPO()
{
	Ext.Ajax.request({
        url: '/procurement/procurement/getlastpo',
        method:'POST',
        success: function(result, request){
        	   var returnData = Ext.util.JSON.decode(result.responseText);

				if (returnData.po != undefined && returnData.po != '')
				{
					Ext.getCmp('po_number_text').setValue('PO01-' + returnData.po);
				}
			}
		,
    	failure:function( action){
      	if(action.failureType == 'server'){
          obj = Ext.util.JSON.decode(action.response.responseText);
          Ext.Msg.alert('Error!', obj.errors.reason);
      	}
      	}
    });
};

function deleteFile()
{
    var rec = Ext.getCmp('files-grid').getSelectionModel().getSelections();
	theFile = storeFile.getAt(storeFile.findExact('id', rec[0].data['id']));

    if (theFile != undefined)
    {
        Ext.MessageBox.confirm('Confirm', 'Are you sure want to delete this file?', function(btn){
            if (btn== 'yes')
            {
//                if (theFile.data['status'] == 'new')
                    var params = {filename:theFile.data['savename']};
                    Ext.Ajax.request({
                        url: '/procurement/procurement/deletefile',
                        method:'POST',
                        success: function(result, request){
                            var returnData = Ext.util.JSON.decode(result.responseText);
                            if (returnData.success)
                            {
                                storeFile.remove(theFile);
                                Ext.getCmp('files-grid').getView().refresh();
                            }
                            else
                            {
                                Ext.Msg.alert('Error!', returnData.msg);
                                return false;
                            }
                        },
                        failure:function( action){
                        if(action.failureType == 'server'){
                          obj = Ext.util.JSON.decode(action.response.responseText);
                          Ext.Msg.alert('Error!', obj.errors.reason);
                        }else{
                          Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                        }
                        },
                        params: params
                    });
            }
	    });
    }
};

var textField =  new Ext.form.TextField();

userForm = new Ext.extend(Ext.form.FormPanel,{

     iconCls: 'silk-user',
     title: 'Edit Purchase Order (PO) Overhead',
     frame: true,
     width: 700,
     labelAlign: 'left',
     initComponent : function() {
        this.items = this.buildForm();
//        init();

        this.buttons = this.buildUI();

        this.addEvents({
            create : true
        });
        userForm.superclass.initComponent.call(this);
    }
    ,
     buildForm : function() {
        return [
         {
             layout : 'column',
             items:[
                 {
                     columnWidth:.4,
                     layout :'form',
                     items:[
                         {
                             fieldLabel : 'PO Number',
                             id: 'po_number_text',
                             name: 'po_number',
                             xtype : 'textfield',
                             disabled : true,

                             width:100

                         },
                             {
				    	        fieldLabel: 'Revision',
				    	        id: 'revision',
				    	        xtype:'textfield',
				        	    width: 100,
				        	    disabled: true,
				        	    value: '<?php echo $this->revisi; ?>'
					        },
                         {
                             fieldLabel : 'Project Code',
                             id:'prj_kode_text',
                             name: 'prj_kode',
                             xtype:"trigger",
                             triggerClass: 'teropong',
                             editable: false,
                             allowBlank: false,
                             width: 100,
                             value: '<?php echo $this->prjKode; ?>',
                            onTriggerClick:function ()
                            {
                             projectPopUphandler();
                            }

                         },
                         {
                             fieldLabel : 'Supplier Code',
                             id:'sup_kode_text',
                             name: 'sup_kode',
                             xtype:"trigger",
                             triggerClass: 'teropong',
                             editable: false,
                             allowBlank: true,
//                             disabled:true,
                             width: 100,
                             value: '<?php echo $this->sup_kode; ?>',
                            onTriggerClick:function ()
                            {
                             suplierPopUphandler();
                            }

                         },
                         {
                             fieldLabel : 'Supplier Name',
                             id:'sup_nama_text',
                             name:'sup_nama',
                             xtype: 'textfield',
                             disabled:true,
                             readOnly: true,
                             value: '<?php echo $this->sup_nama; ?>'
                         },
                         {
                             fieldLabel : 'Currency',
                             disabled:true,
                             id:'val_kode_text',
                             name: 'val_kode',
                             xtype:"trigger",
                             triggerClass: 'teropong',
                             editable: false,
                             allowBlank: false,
                             width: 100,
                             value: '<?php echo $this->val_kode; ?>' ,
                            onTriggerClick:function ()
                            {
//                              valutaPopUphandler();

                            }

                         },
                         {
                             fieldLabel : 'Exchange Rate',
                             id:'curr_text',
                             name:'currency',
                             xtype: 'textfield',
                             allowBlank: false,
                             style:"text-align:right",
                             width: 100,
                             disabled:true,
                             value: '<?php echo $this->rateidr; ?>'
                         },
                        {
                             fieldLabel : 'Origin Of Budget',
                             id:'po_origin_text',
                             name:'po-origin',
                             xtype:'textfield',
                             value: '<?php echo $this->oripo; ?>',
                             disabled: true,
                             width: 70

                         }
                     ]
                 },{
                     columnWidth:.5,
                     layout: 'form',
                     items :[
                         {
                             fieldLabel : 'Deliver To',
                             id:'tujuan_text',
                             name: 'tujuan',
                             xtype : 'trigger',
                             triggerClass: 'teropong',
                           		onTriggerClick:
                                     function ()
                                         {
                                           deliveryTo();
                                         },scope: this,
                                         value: "<?php echo $this->tujuan; ?>"

                         },
                         {
                             fieldLabel : 'Delivery date Estimate',
//                             disabled:true,
                             id:'tgl_kirim_text',
                             name:'tgl_kirim',
                             xtype: 'datefield',
                             allowBlank: false,
                             value: '<?php echo $this->tgl_kirim; ?>'
                         },
                         {
                             fieldLabel : 'Invoice To',
//                             disabled:true,
                             id:'invoice_text',
                             name:'invoice',
                             xtype:'textfield',
                             value: 'PT QDC Technologies'

                         },
//                         {
//                             fieldLabel : 'Payment Term',
////                             disabled:true,
//                             id:'po_term',
//                             name:'po-term',
//                             xtype:'combo',
//                             store: datas,
//                             valueField:'term',
//                             displayField:'nilai',
//                             typeAhead: true,
//                             mode: 'local',
//                             triggerAction: 'all',
//                             value: '<?php echo $this->paymentterm; ?>',
//                             selectOnFocus:true,
//                             forceSelection:false,
//                             width: 50
//
//                         },
                         {
                             fieldLabel : 'Payment Term',
//                             disabled:true,
                             id:'po_term',
                             name:'po-term',
                             xtype:'textfield',
                             value: '<?php echo $this->paymentterm; ?>'

                         },
                         {
                             xtype:'checkbox',
//                             disabled:true,
                             id:'tax',
                             name:'tax',
                             fieldLabel:'Tax',
                             trueText: '1',
 		            		 falseText: '0'
                         },
                         {
                             fieldLabel : 'Remark',
                             id:'ket_text',
                             name:'keterangan',
                             xtype:'textfield',
                             value: '<?php echo $this->ket; ?>'

                         },
                         {
                            fieldLabel: 'Internal Notes',
                            id: 'ketin_text',
                            xtype:'textarea',
                            value:'<?php echo $this->ketin; ?>',

                            width: 150,
                            height: 80
                        }
                     ]
                 }

             ]
         }
     ];
     },
      buildUI: function(){
        return [

        {
            text: 'Search PR',
//            disabled:true,
            icon:"/images/g_rec_src.png",
            handler: function(){ showPrList();}

        }, {
            text: 'Reset',
            disabled:true,
            handler: function(btn, ev){

        		this.getForm().reset();

                storePR.removeAll();
                init();
            },
            scope: this
        }];
    }
 });

userForm2 = new Ext.extend(Ext.form.FormPanel,{

    renderTo: 'user-form2',
    id: 'po-form',
    iconCls: 'silk-user',
    labelAlign: 'right',
    title: 'Detail Purchase Order (PO) Sales',
    frame: true,
    width: 750,
    labelAlign: 'left',
    style: 'margin-top: 10px',
    initComponent : function() {
        this.items = this.buildForm();
        this.buttons = this.buildUI();
        this.addEvents({
            create : true
        });
        userForm2.superclass.initComponent.call(this);
    }
    ,
    buildForm : function() {
        return [
            {
            layout:'column',
            items:[
                   {columnWidth:.320,
                    layout: 'form',
                	items: [{
                                fieldLabel : 'PR Number',
                                id : 'pr_no_text',
                                xtype: 'textfield',
                                disabled: true,
                                readOnly : true,
                                width : 100
                                },

                                {
                                fieldLabel : 'Project Code',
                                id : 'prj_kode_text2',
                                xtype: 'textfield',
                                disabled : true,
                                width : 70
                                },{
                                fieldLabel: 'Site Code',
                                id: 'sit_kode_text',
                                xtype:'textfield',
                                width: 100,
                                disabled:true
                                },
                	        {
                    	        fieldLabel: 'Work ID',
                    	        id: 'po-workid',
                    	        xtype:'textfield',
                                disabled: true,
                                width: 70
                	        },
                                {
                                 fieldLabel: 'Product ID',
                                 disabled: true,
                                 id:'kode_brg_text',
                                 name:'kode_brg',
                                 xtype:'textfield',
                                 width: 100
                                },
                            {
								            layout:'column',
								            items:[
								                   {
									                columnWidth:.7,
								                    layout: 'form',
								                	items: [{
															     fieldLabel: 'Qty Request',
                                                                    xtype:'textfield',
                                                                    id: 'po-qty',
                                                                    allowBlank : false,
                                                                    width: 55,
                                                                    style:"text-align:right",
                                                                    enableKeyEvents: true,
                                                                    listeners:{
                                                                        'blur': function(t) {
                                                                            if (!isNaN(t.getValue()))
                                                                            {
                                                                                t.setValue(CommaFormatted(t.getValue()));
                                                                            }
                                                                        },
                                                                        'focus': function(t) {
                                                                            if (t.getValue().search(",")>0)
                                                                               t.setValue(t.getValue().toString().replace(/\$|\,/g,''));
                                                                        },
                                                                        'keyup' : function (t,e) {
                                                                            if (!isNaN(t.getValue()))
                                                                            {


                                                                                if (!isMscWorkid(Ext.getCmp('po-workid').getValue()) && !isServiceKdbrg(Ext.getCmp('kode_brg_text').getValue()))
                                                                                {
                                                                                    var newQty = Ext.getCmp('po-qty').getValue();
                                                                                    var satuan = Ext.getCmp('uom_text').getValue();
                                                                                    var balance = document.getElementById('balanceqty').innerHTML;
                                                                                    var qtyPo = document.getElementById('tot-po').innerHTML;
//                                                                                    document.getElementById('in-po').innerHTML =  CommaFormatted(Ext.getCmp('po-qty').getValue().toString().replace(/\$|\,/g,''))+' '+satuan;

                                                                                     newQty = parseFloat(newQty.toString().replace(/\$|\,/g,''));
        //                                                                             qtyPr = parseFloat(qtyPr.toString().replace(/\$|\,/g,''));
                                                                                      balance = parseFloat(balance.toString().replace(/\$|\,/g,''));
                                                                                     qtyPo = parseFloat(qtyPo.toString().replace(/\$|\,/g,''));


                                                                                    temp = balance - newQty;
                                                                                    document.getElementById('balance-po').innerHTML = CommaFormatted(temp.toFixed(4))+''+satuan;
                                                                                     hitungTotal();
                                                                                }else
                                                                                    hitungTotal();

                                                                            }
                                                                        }
                                                                    }
													    	}
											    			]
								                   },
								                   {
										                columnWidth:.3,
									                    layout: 'form',
									                	items: [{
//                                                                                                        fieldLabel: 'UoM',
                                                                    id: 'uom_text',
                                                                    xtype:'textfield',
                                                                    disabled: true,
                                                                    hideLabel: true,
                                                                    width: 31
														    	}
												    			]
									                   }
												]
							    		},
//                                {
//                                fieldLabel: 'Qty Request',
//                                xtype:'textfield',
//                                id: 'po-qty',
//                                allowBlank : false,
//                                width: 100,
//                                style:"text-align:right",
//                                enableKeyEvents: true,
//                                listeners:{
//                                    'blur': function(t) {
//		                           		if (!isNaN(t.getValue()))
//										{
//		                           			t.setValue(t.getValue());
//										}
//		        	        		},
//		        	        		'focus': function(t) {
//			        	        		if (t.getValue().search(",")>0)
//                                        t.setValue(t.getValue().toString().replace(/\$|\,/g,''));
//		        	        		},
//		        	        		'keyup' : function (t,e) {
//										if (!isNaN(t.getValue()))
//										{
////											var newQty = parseFloat(t.getValue());
//
//											if (Ext.getCmp('total_price_text').disabled)
//											{
//
//												if (cekQty() && cekPrice())
//                                                {
//                                                     hitungTotal();
//                                                    Ext.getCmp('save-po').enable();
//
//                                                }
//
//											} else
//											{
//                                                if (Ext.getCmp('po-qty').getValue() != undefined && Ext.getCmp('unit_price_text').getValue() != undefined)
//  												Ext.getCmp('save-po').enable();
//                                                else
//                                              	  Ext.getCmp('save-po').disable();
//                                            }
//
//										}
//                       				}
//                                }
//
//                                },
                                 {
                                fieldLabel:'Unit Price',
                                id:'unit_price_text',
                                name: 'price',
                                allowBlank: false,
                                xtype: 'textfield',
                                style:"text-align:right",
                                width: 100,
                                enableKeyEvents: true,
                                listeners: {
                                    'blur': function(t) {
		                           		if (!isNaN(t.getValue()))
										{
		                           			t.setValue(CommaFormatted(t.getValue()));
										}
		        	        		},
		        	        		'focus': function(t) {
			        	        		if (t.getValue().search(",")>0)
											t.setValue(t.getValue().toString().replace(/\$|\,/g,''));
		        	        		},
		        	        		'keyup' : function (t,e) {
										if (!isNaN(t.getValue()))
										{
											//var newPrice = parseFloat(t.getValue());

                                              if (!isMscWorkid(Ext.getCmp('po-workid').getValue()) && !isServiceKdbrg(Ext.getCmp('kode_brg_text').getValue()))
												{


                                                    var pricePr = document.getElementById('price-pr').innerHTML;
                                                    var pricePo = Ext.getCmp('unit_price_text').getValue();
                                                    var currency = Ext.getCmp('val_kode_text').getValue();
                                                    document.getElementById('price-po').innerHTML =  CommaFormatted(pricePo.toString().replace(/\$|\,/g,''))+' '+currency;

                                                    pricePo = parseFloat(pricePo.toString().replace(/\$|\,/g,''));
                                                    pricePr = parseFloat(pricePr.toString().replace(/\$|\,/g,''));
                                                    var tempPrice = pricePr - pricePo;
                                                    document.getElementById('balance-price').innerHTML = CommaFormatted(tempPrice.toFixed(2))+' '+currency;
                                                    hitungTotal();
//                                                    Ext.getCmp('save-po').enable();
												}
                                           else
                                              hitungTotal();
                                           }
                                                 }
                                    }
                                },{
                    	        fieldLabel: 'Total Price',
                    	        id: 'total_price_text',
                    	        xtype:'textfield',
                    	        style:"text-align:right",
                                disabled: true,
                                width: 100,
                                enableKeyEvents: true,
                                listeners:{
                                    'blur': function(t) {
		                           		if (!isNaN(t.getValue()))
										{
		                           			t.setValue(CommaFormatted(t.getValue()));
										}
		        	        		},
		        	        		'focus': function(t) {
			        	        		if (t.getValue().search(",")>0)
                                        t.setValue(t.getValue().toString().replace(/\$|\,/g,''));
		        	        		},
									'keyup' : function (t,e) {
										if (!isNaN(t.getValue()))
										{
//											var totpricepo = parseFloat(t.getValue());

											if (Ext.getCmp('total_price_text').disabled == false)
											{
												 var totpricepr = document.getElementById('tot-price-pr').innerHTML;

                                                var totpricepo = Ext.getCmp('total_price_text').getValue();
                                                var currency = Ext.getCmp('val_kode_text').getValue();

                                                document.getElementById('tot-price-po').innerHTML =  CommaFormatted(totpricepo.toString().replace(/\$|\,/g,''))+' '+currency;

                                                totpricepr = parseFloat(totpricepr.toString().replace(/\$|\,/g,''));
                                                totpricepo = parseFloat(totpricepo.toString().replace(/\$|\,/g,''));

                                                 temptot = totpricepr - totpricepo;
                                                document.getElementById('tot-balance-price').innerHTML = CommaFormatted(temptot.toFixed(4))+''+currency;

										}}
                       				}
                                }
                                }

                                ]
                   },
                   {    columnWidth:.49,
                       labelWidth: 150,
                       layout: 'form',
                   	items: [ {
                                    fieldLabel: 'No',
                                    id: 'urut_text',
                                    xtype:'textfield',
                                    width: 35,
                                    disabled:true
                                 },{
                                    fieldLabel: 'Project name',
                                    id: 'prj_nama_text',
                                    xtype:'textfield',
                                    width: 200,
                                    disabled:true
                                 }, {
                                    fieldLabel: 'Site name',
                                    id: 'sit_nama_text',
                                    xtype:'textfield',
                                    width: 200,
                                    disabled:true
                                 },
                                 {
                                     fieldLabel: 'Net Act',
                                     id: 'net_act_text',
                                     disabled:true,
                                     xtype:'textfield',
                                     width: 200

                                  },
                                {
                                    fieldLabel:'Product Name',
                                    id:'nama_brg_text',
                                    name: 'nama_brg',
                                    allowBlank: false,
                                    xtype: 'textfield',
                                    width: 200,
                                    disabled:true
                                },
                           {
								            layout:'column',

								            items:[
								                   {
									                columnWidth:.6,
								                    layout: 'form',
								                	items: [{
															     fieldLabel: 'Qty Request For Supplier',
                                                                    xtype:'textfield',
                                                                    id: 'posupp-qty',
                                                                    allowBlank : false,
                                                                    width: 55,
                                                                    style:"text-align:right",
                                                                    enableKeyEvents: true,
                                                                    listeners:{
                                                                        'blur': function(t) {
                                                                            if (!isNaN(t.getValue()))
                                                                            {
                                                                                t.setValue(CommaFormatted(t.getValue()));
                                                                            }
                                                                        },
                                                                        'focus': function(t) {
                                                                            if (t.getValue().search(",")>0)
                                                                               t.setValue(t.getValue().toString().replace(/\$|\,/g,''));
                                                                        },
                                                                        'keyup' : function (t,e) {
                                                                            if (!isNaN(t.getValue()))
                                                                            {
                                                                             hitungTotalSupp();

                                                                            }
                                                                        }
                                                                    }
													    	}
											    			]
								                   },
								                   {
										                columnWidth:.3,
									                    layout: 'form',
									                	items: [{
//                                                                                                        fieldLabel: 'UoM',
                                                                    id: 'uom_supp',
                                                                    xtype:'textfield',
                                                                    disabled: true,
                                                                    hideLabel: true,
                                                                    width: 31
														    	}
												    			]
									                   }
												]
							    		},

                                 {
                                fieldLabel:'Unit Price For Supplier',
                                id:'unit_price_supp',
                                name: 'price',
                                allowBlank: false,
                                xtype: 'textfield',
                                style:"text-align:right",
                                width: 100,
                                enableKeyEvents: true,
                                listeners: {
                                    'blur': function(t) {
		                           		if (!isNaN(t.getValue()))
										{
		                           			t.setValue(CommaFormatted(t.getValue()));
										}
		        	        		},
		        	        		'focus': function(t) {
			        	        		if (t.getValue().search(",")>0)
											t.setValue(t.getValue().toString().replace(/\$|\,/g,''));
		        	        		},
									'keyup' : function (t,e) {
										if (!isNaN(t.getValue()))
										{

                                                hitungTotalSupp();
                                        }
                                    }
                                }

                                },
                                {
                    	        fieldLabel: 'Total Price For Supplier',
                    	        id: 'total_price_supp',
                    	        xtype:'textfield',
                                align:'right',
                                disabled: true,
                                style:"text-align:right",
                                width: 100,
                                enableKeyEvents: true,
                                listeners:{
                                    'blur': function(t) {
		                           		if (!isNaN(t.getValue()))
										{
		                           			t.setValue(CommaFormatted(t.getValue()));
										}
		        	        		},
		        	        		'focus': function(t) {
			        	        		if (t.getValue().search(",")>0)
                                        t.setValue(t.getValue().toString().replace(/\$|\,/g,''));
		        	        		}

                                    }}

				              ]
                   }
                   ]
            }



     ];
     },
      buildUI: function(){
        return [

        {
             text: 'Add to PO List',

             id: 'save-po',
             iconCls: 'icon-add',
             handler: function(){
                 //var rec = Ext.getCmp('pr-detail-grid').getSelectionModel().getSelections();
                 //insertPOtoList(rec[0].data['id']);
                 insertPOtoList();
             }

        },{
             text: 'Cancel',
             disabled:true,
             id: 'cancel-po',
             iconCls: 'icon-cancel',
             handler: function(){

                    if (Ext.getCmp('cancel-po').text == 'Cancel Edit')
				         {
					        if (oripr != undefined)
					        {
				        	 	var a = storePO.getAt(storePO.find('id', oripr.data['id']));
				        	 	var b = storePR.getAt(storePR.find('id', oripr.data['id']));
			         			if (a != undefined)
			         			{
									b.data['totalPO'] = parseFloat(b.data['totalPO']) + parseFloat(a.data['qty']);
									a.data['status'] == '';
			         			}
					        }
				         }
                    clearPOForm();

                    if(Ext.getCmp('price-grids').getStore().getCount() != 0)
                    {
                    Ext.getCmp('price-grids').getStore().removeAll();
                    Ext.getCmp('po-grid').getView().refresh();
                    }

                    Ext.getCmp('pr-detail-grid').enable();
                    Ext.getCmp('po-grid').enable();
                    Ext.getCmp('pr-detail-grid').getView().refresh();
                    Ext.getCmp('po-grid').getView().refresh();
//                    Ext.getCmp('save-po').disable();
//                    Ext.getCmp('cancel-po').disable();

                     oripr = undefined;
			        oripo = undefined;
             }, scope: this
       }
   ];
    }
 });


 userGrid = Ext.extend(Ext.grid.GridPanel, {
    id:'pr-detail-grid',
    title:'PR Detail (Sales)',
    iconCls: 'silk-grid',
    frame: true,
    height: 250,
    style: 'margin-top: 10px',
    trackMouseOver: true,

    initComponent : function() {
        userGrid.superclass.initComponent.call(this);
    }

});

priceGrid = Ext.extend(Ext.grid.GridPanel, {
    id:'price-grids',
    title:'Price History',
    iconCls: 'silk-grid',
    frame: true,
    height: 190,
    style: 'margin-top: 10px',
    trackMouseOver: true,

    initComponent : function() {
        userGrid.superclass.initComponent.call(this);
    }
});

userGrid2 = Ext.extend(Ext.grid.GridPanel, {

    iconCls: 'silk-grid',
    id: 'po-grid',
    frame: true,
    height: 250,
    title: 'PO Shopping Cart (Sales)',
    style: 'margin-top: 10px',
    initComponent : function() {

        this.buttons = this.buildUI();

        userGrid.superclass.initComponent.call(this);
    },

    buildUI : function() {
    //    return [
    //       {
    //       text: 'Save',
    //       iconCls: 'icon-save',
           //handler: this.onSave,
    //       scope: this
     //       }
             // ];
    },

    onSave : function(btn, ev) {
       //this.store.save();
        var json = '';
    	this.store.each(function(store){
    	json += Ext.util.JSON.encode(store.data) + ',';
    	});
    	json = json.substring(0, json.length - 1);
    	params = {posts:[json]};
    	Ext.Ajax.request({
            url: '/procurement/procurement/insertpo',
            method:'POST',
            success: function(resp){
    		Ext.Msg.alert('Success', 'Data has been saved!');
    		//isEdited = false;
            },
        	failure:function( action){
          	if(action.failureType == 'server'){
              obj = Ext.util.JSON.decode(action.response.responseText);
              Ext.Msg.alert('Error!', obj.errors.reason);
          	}else{
              Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
          	}
          	},
            params: params
        });
    }
});

Ext.onReady(function() {
    Ext.QuickTips.init();


var userForms = new userForm({
    renderTo : 'user-form'
});


var userGrids = new userGrid({
    renderTo: 'user-grid',
    store: storePR,
    columns : userColumns,
    width: 700,
    plugins: expander,
    bbar: new Ext.PagingToolbar({
    id: 'paging',
    pageSize: 100,
    store: storePR,
    displayInfo: true,
    displayMsg: 'Displaying data {0} - {1} of {2}',
    emptyMsg: "No data to display"
    })
});

var priceGrids = new priceGrid({
    renderTo: 'price-grid',
    store: storePrice,
    columns : userColumns3,
    width: 750

});

var userForms2 = new userForm2({
    renderTo: 'user-form2'
});

var userGrids2 = new userGrid2({
    renderTo:'user-grid2',
    store: storePO,
    columns:userColumns2,
    width:750,
    plugins: [expander2],
//    view : new Ext.grid.GridView({
//        	forceFit: false,
//        	listeners : {
//    	rowsinserted : function(grid){
//
//
//
//    				itung = itung+1;
//    				if (itung == jumlah)
//        				isDone = '1';
//
//					if (t != undefined){
//
//
//
//						if (isDone == '1')
//						{
//							var myBar = Ext.getCmp('po-grid').getBottomToolbar();
//							console.log(myBar);
//							if (myBar != undefined)
//								myBar.destroy();
//
//						}
//
//				}}
//			}
//        }),

    bbar: ['->',{
             xtype: 'button',
	         text: 'Save PO List(Cart)',
             id : 'save-list',
	         iconCls: 'icon-save',
	         handler: function()
	         {
                var json = '';
                var fileJson = '';
                var parameter = '';
                Ext.getCmp('po-grid').getStore().each(function(store){

                json += Ext.util.JSON.encode(store.data) + ',';
                });
            	json = '[' + json.substring(0, json.length - 1) + ']'; //JSON format fix

                storeFile.each(function(store){
                fileJson += Ext.util.JSON.encode(store.data) + ',';
                });
            	fileJson = '[' + fileJson.substring(0, fileJson.length - 1) + ']'; //JSON format fix

//                console.log(json);
                var pajak2 = Ext.getCmp('tax').getValue();
                if (pajak2 == 1)
            	    pajak2 = 'Y';
                else
            	    pajak2 = 'N';

                var p = storePO.getAt(0);
            	//Get add. Data
            	var prjKode = Ext.getCmp('prj_kode_text').getValue();
            	var sitKode = p.data['sit_kode'];
            	var prjNama = p.data['prj_nama'];
            	var sitNama = p.data['sit_nama'];
            	var supkode = Ext.getCmp('sup_kode_text').getValue();
            	var supnama = Ext.getCmp('sup_nama_text').getValue();
            	var noPO = Ext.getCmp('po_number_text').getValue();
//            	var tglPO = p.data['tgl_po'];
//            	var tglkirim = p.data['tgl_kirim'];
                var tgl = new Date(Ext.getCmp('tgl_kirim_text').getValue());
                var tglkirim = tgl.format('Y-m-d');
				var tujuan = Ext.getCmp('tujuan_text').getValue();
                 var payterm = Ext.getCmp('po_term').getValue().toString().replace(/\"|\'|\n|\t|\r/g,'');
//				var typepo = p.data['po_type'];
				var invoiceto = Ext.getCmp('invoice_text').getValue();
                 var budgettype = Ext.getCmp('po_origin_text').getValue();
                 var ket = Ext.getCmp('ket_text').getValue().toString().replace(/\"|\'|\n|\t|\r/g,'');
                 var ketin = Ext.getCmp('ketin_text').getValue().toString().replace(/\"|\'|\n|\t|\r/g,'');
                 var valKode = Ext.getCmp('val_kode_text').getValue();
                 var rev = Ext.getCmp('revision').getValue();
                 var trano = Ext.getCmp('po_number_text').getValue();
                 var tax = pajak2;
                 var rateidr = Ext.getCmp('curr_text').getValue().toString().replace(/\$|\,/g,'');

            	parameter = '[{"trano":"' + trano + '","prj_kode":"' + prjKode + '","prj_nama":"' + prjNama + '","tgldeliesti":"' + tglkirim + '", "sit_kode":"' + sitKode + '", "sit_nama":"' + sitNama + '","trano":"' + noPO + '","sup_kode":"' + supkode + '","sup_nama":"' + supnama + '","tgldeliesti":"' + tglkirim + '","tujuan":"' + tujuan + '" ,"payterm":"' + payterm + '", "invoiceto":"' + invoiceto + '", "budgettype":"' + budgettype + '", "rev":"' + rev + '", "tax":"' + tax + '", "ket":"' + ket + '", "ketin":"' + ketin + '", "val_kode":"' + valKode + '", "rateidr":"' + rateidr + '" }]';
            	params = {posts:json, etc:parameter, file:fileJson};
            	myPanel = Ext.getCmp('abs-budget-panel'); //Load the panel
        	    myPanel.body.load({
        	        url: '/procurement/procurement/apppobudget/from/edit', //the url
        	        scripts : true,
        	        params: params //our params goes here
                });
	         },
	         scope: this
        	}
                ,
                {
                xtype: 'button',
	         text: 'Cancel PO List(Cart)',
                    id : 'cancel-list',
	         iconCls: 'icon-cancel',
	         handler:showAddPO
	         ,
	         scope: this
        	}
      ]
    });

var tb1 = new Ext.Toolbar({
    id: 'gtotal-bbar',
    style:"text-align:right",
	renderTo : userGrids2.bbar,
	items: [
	        {
		     xtype: 'label',
			 id: 'gtotal-text'


	        }
		],
	layout: 'fit'
});

var tb2 = new Ext.Toolbar({
	id: 'pajak-bbar',
	style:"text-align:right",
	renderTo : userGrids2.bbar,
	items: [
		{
			     xtype: 'label',

				 id: 'pajak-text'

		        }
		],
		layout: 'fit'
	});

var tb3 = new Ext.Toolbar({
	id: 'gtotals-bbar',
	style:"text-align:right",
	renderTo : userGrids2.bbar,
	items: [
			{
			     xtype: 'label',

				 id: 'gtotals-text'

		        }
			],
			layout: 'fit'
		});
var fileColumns = [
                    new Ext.grid.RowNumberer(),
                    {header: "File Name",width: 130, dataIndex: 'filename'},
                    {header:'',width:40,sortable:true,css:'text-align:center;', renderer: function (v,p,r){
                        return '<a href="#" onclick="window.open(\'/default/file/download/path/files/filename/' + r.data['savename'] + '\',\'mywin\',\'left=20,top=20,width=100,height=20,toolbar=0,resizable=0\');"><img src="/images/icons/fam/page_find.gif"></a>&nbsp;<a href="#" onclick="deleteFile();"><img src="/images/g_rec_del.png"></a>';
                    }}
                ];

var fileUploads = new Ext.FormPanel({
    renderTo: 'form_file',
    fileUpload: true,
    autoHeight: true,
    frame: true,
    style: 'margin-top: 10px',
    width: 700,
//     bodyStyle: 'padding: 10px 10px 10px 10px;',
//     labelWidth: 50,
     defaults: {
         anchor: '95%',
         allowBlank: false,
         msgTarget: 'side'
     },
     items:[
             {
                layout : 'column',
                items:[
                        {
                             columnWidth:.46,
                             layout :'form',
                             items:[
                                {
                                    xtype: 'fileuploadfield',
                                    id: 'po-file',
                                    emptyText: 'Select a File',
                                    fieldLabel: 'Attach File',
                                    allowBlank: false,
                                    name: 'file-path',
                                    buttonText: '',
                                    buttonCfg: {
                                        iconCls: 'upload-icon'
                                    }
                                },
                                 {
                                    xtype: 'button',
                                    text: 'Upload',
                                    style: 'float: right',
                                    handler: function(){
                                        if(fileUploads.getForm().isValid()){
                                            form_action=1;
                                            fileUploads.getForm().submit({
                                                url: '/procurement/procurement/uploadfile/type/POO',
                                                waitMsg: 'Uploading file...',
                                                success: function(form,action){
                                                    var returnData = action.result;
                                                    if( returnData.success) {
                                                        var c = new filelist({
                                                            id:parseFloat(storeFile.getCount() + 1),
                                                            filename: returnData.filename,
                                                            savename: returnData.savename,
                                                            path: returnData.path,
                                                            status: 'new'
                                                      });
                                                      storeFile.add(c);
                                                      Ext.getCmp('files-grid').getView().refresh();
                                                        Ext.getCmp('po-file').setValue('');
                                                    }
                                                    else
                                                    {
                                                        Ext.Msg.alert('Error', returnData.msg);
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                             ]
                        },
                        {
                             columnWidth:.5,
                             layout :'form',
                             items:[
                                new Ext.grid.GridPanel ({
                                    id:'files-grid',
                                    iconCls: 'silk-grid',
                                    height: 100,
                                    style: 'margin-left: 5px',
                                    store: storeFile,
                                    trackMouseOver: true,
                                    view : new Ext.grid.GridView({
                                        forceFit: true
                                    }),
                                    columns: fileColumns
                                })
                             ]
                        }
                ]
            }

     ],
    buttons: []
 });

init();

});



</script>

<div id="user-form"></div>
<div id="form_file"></div>
<div id="user-grid"></div>
<div id="separator">
<div id="user-form2" style="float:left"></div>
<div class="sidebox" style="float:left;width:38em;">
        <div class="boxhead"><h2>Available Qty</h2></div>
        <div class="boxbody" id="a-qty"></div>
</div>
</div>
<div id="price-grid" style="float:left"></div>
<div id="user-grid2" style="margin-top:10px;float:left;"></div>
