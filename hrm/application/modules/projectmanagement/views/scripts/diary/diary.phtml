<style type="text/css">
    .x-grid3-td-name b {
            font-family:tahoma, verdana;
            display:block;
            color:#333;
    }
    .x-grid3-td-name b i {
        font-weight:normal;
        font-style: normal;
        color:#000;
    }
    .x-grid3-td-name .personicon {
        padding-left:20px;
        background:transparent url(/images/engineer-icon.png) no-repeat 0 2px;
    }
    .x-grid3-td-name .x-grid3-cell-inner {
        white-space:normal;
    }

    .x-grid3-row-body p {
        margin:5px 20px 10px 25px !important;
        color:#555;
    }

    .post-date {
        font-weight:bold;
        color:#333;
    }

    .rolename {
        color:#333;
    }

    .x-grid3-td-aktifitas b {
            font-family:tahoma, verdana;
            display:block;
            color:#333;
    }
    .x-grid3-td-aktifitas b i {
        font-weight:normal;
        font-style: normal;
        color:#000;
    }
    .x-grid3-td-aktifitas .messageicon {
        padding-left:20px;
        background:transparent url(/images/post.gif) no-repeat 0 2px;
    }
    .x-grid3-td-aktifitas .x-grid3-cell-inner {
        white-space:normal;
    }

    .post-date {
        font-weight:bold;
        color:#333;
    }

    .rolename {
        color:#333;
    }
        
    /* Preview classes */

    .preview .x-panel-body {
        background:#fff;
        color:#222;
        font:normal 12px tahoma,verdana,arial,sans-serif;
    }

    .preview .x-panel-body p {
        line-height:18px;
        margin:8px 0;
    }

    .preview .x-panel-body ul {
        margin-left:18px;
    }

    .preview .x-panel-body ul li {
        display:list-item;
        list-style-image:none !important;
        list-style-position:outside !important;
        list-style-type:disc !important;
        margin-left:18px;
    }

    .preview .x-panel-body pre, #preview .x-panel-body code {
        background:#f1f1f1;
        display:block;
    }

    .preview .x-panel-body h4.post-author {
        font-weight:normal;
        color:#555;
        font-size:11px;
    }
    .preview .x-panel-body h3.post-files {
        font-weight:normal;
        font-size:11px;
        padding-left:20px;
        background:transparent url(/images/icons/fam/icon_attachment.gif) no-repeat 0 2px;
    }
    .preview .x-panel-body span.post-date {
        font-weight:normal;
        color:#555;
        float:right;
        font-size:11px;
    }
    .preview .x-panel-body div.post-data {
        background:#f1f2f4;
        padding:5px;
        border-bottom:1px solid #dadadb;
    }
    .preview .x-panel-body div.post-body-header {
        padding:10px;
        font-weight:bold;
        font-size: 11px;
        border-top:1px solid #dadadb;
    }
    .preview .x-panel-body div.post-body {
        padding:10px;
    }

    /* Image classes */

    .preview-image .x-panel-body {
        background:#fff;
        color:#222;
        font:normal 12px tahoma,verdana,arial,sans-serif;
    }

    .preview-image .x-panel-body p {
        line-height:18px;
        margin:8px 0;
    }

    .preview-image .x-panel-body ul {
        margin-left:18px;
    }

    .preview-image .x-panel-body ul li {
        display:list-item;
        list-style-image:none !important;
        list-style-position:outside !important;
        list-style-type:disc !important;
        margin-left:18px;
    }

    .preview-image .x-panel-body pre, #preview .x-panel-body code {
        background:#f1f1f1;
        display:block;
    }

    .preview-image .x-panel-body h4.image-desc {
        font-weight:normal;
        color:#555;
        font-size:11px;
    }

    .preview-image .x-panel-body div.image-body {
        padding:10px;
    }
</style>
<script type="text/javascript">
Ext.onReady(function(){

    var tplimage = Ext.Template.from('preview-image-tpl', {
        compiled:true,
//        getEXIF : function(v, all){
//            if (v !== "" && v != null)
//                return '<div class="post-body">' + Ext.util.Format.stripScripts(v || all.aktifitas) + '</div>';
//            else
//                return '';
//        },
        getImage: function(v, all){
            if (v !== "" && v != null)
            {
                return '<div class="image-body"><img src="' + "/docs/" + v + '" alt=""></img></div>';
            }
        }
    });
    var tpl = Ext.Template.from('preview-tpl', {
        compiled:true,
        getAktifitas : function(v, all){
            if (v !== "" && v != null)
                return '<div class="post-body">' + Ext.util.Format.stripScripts(v || all.aktifitas) + '</div>';
            else
                return '';
        },
        getAktifitasType : function(v, all){
            if (v !== "" && v != null)
                return '<div class="post-body-header">Activity Type: ' + Ext.util.Format.stripScripts(v || all.aktifitas_type) + '</div>';
            else
                return '';
        },
        getHambatan : function(v, all){
            if (v !== "" && v != null)
                return '<div class="post-body">' + Ext.util.Format.stripScripts(v || all.hambatan) + '</div>';
            else
                return '';
        },
        getHambatanType : function(v, all){
            if (v !== "" && v != null)
                return '<div class="post-body-header">Problem Type: ' + Ext.util.Format.stripScripts(v || all.hambatan_type) + '</div>';
            else
                return '';
        },
        getAttachment: function (v,all) {
            var imagePreview = '';
            if (all.isImage != 0 || all.isImage != false)
            {
//                imagePreview = "<a href=\"#\" onClick=\"showImage(" + all.id + ");\"><img src=\"/images/search-icon.png\"></a>";
                  imagePreview = '<a href="#" onclick="window.open(\'/default/file/preview/prj_kode/' + all.prj_kode + '/sit_kode/' + all.sit_kode + '/filename/' + all.savename + '\',\'mywin\',\'toolbar=0\');"><img src="/images/search-icon.png"></a>';
            }
            if (all.savename != '' || all.savename !== "")
                return '<a href="#" onclick="window.open(\'/default/file/download/type/diary/prj_kode/' + all.prj_kode + '/sit_kode/' + all.sit_kode + '/filename/' + all.savename + '\',\'mywin\',\'left=20,top=20,width=100,height=20,toolbar=0,resizable=0\');">' + all.filename + '</a>&nbsp' + imagePreview;
            else
                return '';
        }
    });

var proxy = new Ext.data.HttpProxy({
    url : '/admin/userrole/getmyteam/id/<?php echo $this->myId?>/prj_kode/<?php echo $this->prjKode?>'
});

var proxy2 = new Ext.data.HttpProxy({
    url : '/projectmanagement/diary/getmydiary/prj_kode/<?php echo $this->prjKode?>'
});


function showPreview(rec)
{
    var d = rec.data;
    var dForm =  new Ext.Window({
		    id: 'd-form-panel',
		    layout:'fit',
		    width: 500,
		    height: 330,
            minWidth: 300,
            minHeight: 250,
		    title: 'Read Diary',
		    stateful: false,
	        modal: true,
		    items: [
                    new Ext.Panel({
                        id: 'diary-preview',
                        cls:'preview single-preview',
                        html: tpl.apply(d),
                        closable:true,
                        autoScroll:true,
                        border:true
                    })
            ],
            buttons: [
                 {
                     text: 'Close',
                     id: 'close-diary-preview',
                     handler: function(btn, ev) {
                        dForm.close();
                     }
                }
            ]

    });

    dForm.show();
}



function showForm()
{
    var bForm =  new Ext.Window({
		    id: 'b-form-panel',
		    layout:'fit',
		    width: 600,
		    height: 280,
		    title: 'Post New Diary',
		    stateful: false,
	        modal: true,
	        resizable: false,
		    items: [
                    new Ext.form.FormPanel({
						frame: true,
						layout: 'form',
                        id: 'user-forms',
                        fileUpload: true,
                        labelAlign: 'right',
                        labelWidth: 80,
                        items: [
                            {
                                layout:'column',
                                items:[
                                       {columnWidth:.26,
                                        layout: 'form',
                                        items: [
                                                {
                                                     fieldLabel: 'Site Code',
                                                     id:'sit_kode_text2',
                                                     allowBlank: false,
                                                     xtype:"trigger",
                                                     editable: false,
                                                     triggerClass: 'teropong',
                                                     width: 50,
                                                     onTriggerClick:
                                                         function ()
                                                            {
                                                                showSite('<?php $this->prjKode; ?>');
                                                            }
                                                }
                                        ]
                                       },
                                        {columnWidth:.6,
                                        layout: 'form',
                                        items: [
                                                {hideLabel: true,id:'sit_nama_text',xtype: 'textfield',width: 180,disabled: true}
                                                ]
                                        }
                                    ]
                            },
                            {
                                layout:'column',
                                items:[
                                       {columnWidth:.5,
                                        layout: 'form',
                                        items: [
                                                {
                                                     fieldLabel : 'Activity Type',
                                                     id:'activity_type_text',
                                                     xtype:'combo',
                                                     store: new Ext.data.SimpleStore({
                                                         fields:['data', 'nilai']
                                                                 ,data:[
                                                                        ['civil_works','Civil Works'],
                                                                        ['tower_erection','Tower Erection'],
                                                                        ['metalwork','Metalwork'],
                                                                        ['cabin','Cabin'],
                                                                        ['M_E','M&E'],
                                                                        ['antenna_feeder','Antenna & Feeder'],
                                                                        ['other','Other']
                                                                    ]

                                                             }),
                                                     valueField:'data',
                                                     displayField:'nilai',
                                                     typeAhead: true,
                                                     mode: 'local',
                                                     triggerAction: 'all',
                                                     selectOnFocus:true,
                                                     forceSelection:false,
                                                     width: 160

                                                },
                                                {fieldLabel: 'Activity',id:'activity_text',xtype: 'textarea',height: 100, width: 200}
                                            ]
                                       },
                                        {columnWidth:.5,
                                        layout: 'form',
                                        items: [
                                                {
                                                     fieldLabel : 'Problem Type',
                                                     id:'issue_type_text',
                                                     xtype:'combo',
                                                     store: new Ext.data.SimpleStore({
                                                         fields:['data', 'nilai']
                                                                 ,data:[
                                                                        ['client','Client'],
                                                                        ['weather','Weather'],
                                                                        ['plant','Plant'],
                                                                        ['equipment','Equipment'],
                                                                        ['access','Access'],
                                                                        ['material_delivery','Material delivery'],
                                                                        ['other','Other']
                                                                    ]
                                                             }),
                                                     valueField:'data',
                                                     displayField:'nilai',
                                                     typeAhead: true,
                                                     mode: 'local',
                                                     triggerAction: 'all',
                                                     selectOnFocus:true,
                                                     forceSelection:false,
                                                     width: 160

                                                },
                                                {fieldLabel: 'Problem',id:'issue_text',xtype: 'textarea',height: 100, width: 200}
                                            ]
                                        }
                                    ]
                            },
                            {
                                layout:'column',
                                items:[
                                       {
                                           columnWidth:.5,
                                           layout: 'form',
                                           items: [
                                                    {
                                                        xtype: 'fileuploadfield',
                                                        id: 'diary-file',
                                                        emptyText: 'Select a File',
                                                        fieldLabel: 'Attach File',
                                                        name: 'file-path',
                                                        buttonText: '',
                                                        buttonCfg: {
                                                            iconCls: 'upload-icon'
                                                        }
                                                    }
                                                    ]
                                       }
                                ]
                            }
                            
                        ]
                    })
				    ],
		    buttons: [
		              {
	 			         text: 'Post',
	 			         id: 'post-diary',
	 			         handler: function(btn, ev) {
                                var sit_kode = Ext.getCmp('sit_kode_text2').getValue(); 
                                var aktifitas = Ext.getCmp('activity_text').getValue();
                                var aktifitas_type = Ext.getCmp('activity_type_text').getValue();
                                var hambatan = Ext.getCmp('issue_text').getValue();
                                var hambatan_type = Ext.getCmp('issue_type_text').getValue();

                                if (sit_kode == '' || ((aktifitas == '' && aktifitas_type == '') && (hambatan == '' && hambatan_type == '')))
                                {
                                    Ext.Msg.alert('Error', "Invalid form, Please fill all required fields!");
                                    return false;
                                }

                                params = {
                                            aktifitas: aktifitas,
                                            aktifitas_type: aktifitas_type,
                                            hambatan: hambatan,
                                            hambatan_type: hambatan_type,
                                            uid: '<?php echo $this->myId; ?>',
                                            prj_kode: '<?php echo $this->prjKode; ?>',
                                            sit_kode: sit_kode
                                };

                                Ext.getCmp('user-forms').getForm().submit({
//	        	                    waitMsg: 'Posting new Diary...',
                                    url: '/projectmanagement/diary/create',
                                    method:'POST',
                                    success: function(fp, o){
                                        var returnData = o.result;
                                        
					                    if( returnData.success) {
                                            Ext.Msg.alert('Success', 'Diary has been posted!');
                                            store2.reload();
		 			                        bForm.close();
                                        }
                                        else
                                        {
                                            Ext.Msg.alert('Error', returnData.msg);
                                        }
                                    },
                                    failure: function(fp, o){

                                        if (o.result.msg != '')
                                            Ext.Msg.alert('Error', o.result.msg);
                                        else
                                            Ext.Msg.alert('Error', 'File "'+o.result.file+'" cannot processed on the server! Please refresh (F5) Your browser or Try uploading again.');
	        	                    },
                                    params: params
                                });
			              }

		              },
                        {
                             text: 'Cancel',
                             id: 'cancel-diary',
                             handler: function(btn, ev) {
		 			            bForm.close();
                             }
                        }
                    ]
		});
		bForm.show();
}

function showSite()
{
    var storeGrid = new Ext.ux.data.PagingJsonStore({
        url: '/default/site/listByParams/name/prj_kode/data/<?php echo $this->prjKode; ?>',
        root: 'posts',
        totalProperty: 'count',
        fields: [
            {name: 'sit_kode'},
            {name: 'sit_nama'}
        ],
        autoLoad: {params: {start: 0, limit: 50}}
    });

    var userColumns =  [
        new Ext.grid.RowNumberer(),
        {header: "Site Kode", dataIndex: 'sit_kode'},
        {header: "Site Name", dataIndex: 'sit_nama', width: 220}
    ];

    searchSiteKode = function(){

        storeGrid.clearFilter();
        storeGrid.filterBy(function(record,id)
        {
            var docs = Ext.getCmp('sit_kode_text').getValue();
            reg = new RegExp(docs, "gi");
            if(reg.test(record.data['sit_kode']))
            {
                return true;
            }
        });
    	Ext.getCmp('site-grids').getStore().reload();
    	Ext.getCmp('site-grids').getView().refresh();
    };

    searchSiteName = function(){

        storeGrid.clearFilter();
        storeGrid.filterBy(function(record,id)
        {
            var docs = Ext.getCmp('sit_name_text').getValue();
            reg = new RegExp(docs, "gi");
            if(reg.test(record.data['sit_nama']))
            {
                return true;
            }
        });
    	Ext.getCmp('site-grids').getStore().reload();
    	Ext.getCmp('site-grids').getView().refresh();
    };

    if (Ext.getCmp('c-form-panel') != undefined)
    {
        Ext.getCmp('c-form-panel').show();
        Ext.getCmp('site-grids').getStore().reload();
    	Ext.getCmp('site-grids').getView().refresh();
        return;
    }

    var cForm =  new Ext.Window({
		    id: 'c-form-panel',
		    layout:'fit',
		    width: 400,
		    height: 310,
		    title: 'Choose Site',
		    stateful: false,
	        modal: true,
	        resizable: false,
		    items: [
                    new Ext.form.FormPanel({
						frame: true,
						layout: 'form',
                        id: 'user-forms2',
                        fileUpload: true,
                        labelAlign: 'right',
                        widthLabel: 40,
                        items: [
                            {
                                layout:'column',
                                items:[
                                       {columnWidth:.4,
                                        layout: 'form',
                                        items: [
                                                
                                                {fieldLabel: 'Site Code',id:'sit_kode_text',xtype: 'textfield',width: 40,enableKeyEvents: true,
                                                    listeners: {
                                                        'keyup': function(t,e){
                                                            searchSiteKode();
                                                        }
                                                    }
                                                }
                                            ]
                                       },
                                        {columnWidth:.6,
                                        layout: 'form',
                                        items: [
                                                {fieldLabel: 'Site Name',id:'sit_name_text',xtype: 'textfield',width: 90}
                                            ]
                                        }
                                    ]
                            },
                            new Ext.grid.GridPanel({
                                width: 380,
                                height: 300,
                                id: 'site-grids',
                                loadMask: true,
                                columns: userColumns,
                                store: storeGrid,
                                view : new Ext.grid.GridView({
                                    forceFit: false
                                }),
                                bbar:[ new Ext.PagingToolbar({
                                    pageSize: 50,
                                    store: storeGrid,
                                    displayInfo: true,
                                    displayMsg: 'Displaying data {0} - {1} of {2}',
                                    emptyMsg: "No data to display"
                                })],
                                listeners: {
                                    'rowdblclick': function(g, rowIndex, e){
                                            var record = g.getStore().getAt(rowIndex);
                                            Ext.getCmp('sit_kode_text2').setValue(record.data['sit_kode']);
                                            Ext.getCmp('sit_nama_text').setValue(record.data['sit_nama']);
                                            cForm.hide();
                                    }
                                }
                            })
                        ]
                    })
				    ]

		});


        Ext.override(Ext.PagingToolbar, {
        doRefresh: function(){
            storeGrid.clearFilter();
            delete this.store.lastParams;
            this.doLoad(this.cursor);
        }
        });
		cForm.show();
}


        var reader = new Ext.data.JsonReader({
        idProperty: 'id',
        totalProperty: 'count',
        root : 'posts'},
         [
			{name: 'id'},
            {name: 'user_id'},
            {name: 'name'},
            {name: 'role_name'}
          ]
		);

        var reader2 = new Ext.data.JsonReader({
            idProperty: 'id',
            totalProperty: 'count',
            root : 'posts'},
             [
    			{name: 'id'},
                {name: 'aktifitas'},
                {name: 'aktifitas_type'},
                {name: 'hambatan'},
                {name: 'hambatan_type'},
                {name: 'sit_kode'},
                {name: 'sit_nama'},
                {name: 'prj_kode'},
                {name: 'prj_nama'},
                {name: 'name'},
                {name: 'tgl',type: 'date',dateFormat: 'Y-m-d H:i:s'},
                {name: 'savename'},
                {name: 'filename'},
                {name: 'isImage'},
                {name: 'Make'},
                {name: 'Model'},
                {name: 'DateTimeOriginal'},
                {name: 'imageFile'}            
              ]
    		);

        var store2 = new Ext.data.Store({
            id: 'store-diary',
            reader: reader2,
            proxy: proxy2
        });

        var store = new Ext.data.Store({
            id: 'store-team',
            reader: reader,
            proxy: proxy
        });

		store.load();
		store2.load();

//        userForm = Ext.extend(Ext.form.FormPanel, {
//            id: 'user-forms',
//            fileUpload: true,
//            iconCls: 'silk-user',
//            frame: true,
//            labelAlign: 'right',
//            labelWidth: 80,
//            initComponent : function() {
//                this.items = this.buildForm();
//                this.buttons = this.buildUI();
//                this.addEvents({
//                    create : true
//                });
//                userForm.superclass.initComponent.call(this);
//            },
//        //
//            buildForm : function() {
//                return [
//                    {
//                         fieldLabel : 'Activity Type',
//                         id:'activity_type_text',
//                         xtype:'combo',
//                         store: new Ext.data.SimpleStore({
//                             fields:['data', 'nilai']
//                                     ,data:[
//                                            ['civil works','Civil Works'],
//                                            ['tower erection','Tower Erection'],
//                                            ['metalwork','Metalwork'],
//                                            ['cabin','Cabin'],
//                                            ['M&E','M$E'],
//                                            ['antenna & feeder','Antenna & Feeder'],
//                                            ['other','Other']
//                                        ]
//
//                                 }),
//                         valueField:'data',
//                         displayField:'nilai',
//                         typeAhead: true,
//                         mode: 'local',
//                         triggerAction: 'all',
//                         value: 'civil works',
//                         selectOnFocus:true,
//                         forceSelection:false,
//                         width: 160
//
//                    },
//                    {fieldLabel: 'Activity',id:'activity_text',xtype: 'htmleditor',allowBlank:false,height: 200}
//
//                ]
//            },
//            buildUI: function(){
//                return [{
//                    text: 'Submit',
//                    iconCls: 'silk-user-add',
//                    handler: this.onCreate,
//                    scope: this
//                }, {
//                    text: 'Reset',
//                    handler: function(btn, ev){
//                        this.getForm().reset();
//                    },
//                    scope: this
//                }];
//            },
//            onCreate : function(btn, ev) {
//                if (!this.getForm().isValid()) {
//                    Ext.Msg.alert('Error', "Form tidak valid");
//                    return false;
//                }
//                this.getForm().submit({
//                    url: '/pegawai/create',
//                    success: function(form,action){
//                        Ext.Msg.alert('Sukses',action.result.msg);
//                    }
//                    ,failure: function(form, action) {
//                    switch (action.failureType) {
//                    case Ext.form.Action.CLIENT_INVALID:
//                        Ext.Msg.alert('Failure', 'Form tidak valid! Harap memperbaiki kesalahan yang terdapat di Form..');
//                        break;
//                    case Ext.form.Action.CONNECT_FAILURE:
//                        Ext.Msg.alert('Failure', 'Tidak dapat terkoneksi dengan server, cek koneksi Anda!');
//                        break;
//                    case Ext.form.Action.SERVER_INVALID:
//                       Ext.Msg.alert('Failure', action.result.msg);
//                       break;
//                       }
//                    }
//
//
//                });
//
//            }
//        });

        TeamGrid = function(viewer, config) {
            this.viewer = viewer;
            Ext.apply(this, config);

            this.store = store;

            this.columns = [
                {
                    id: 'name',
                    header: "Team Member",
                    dataIndex: 'name',
                    sortable:true,
                    width: 250,
                    renderer: this.formatTitle
              }
            ];

            TeamGrid.superclass.constructor.call(this, {
                id: 'team-grid',
                loadMask: {msg:'Loading...'},

                sm: new Ext.grid.RowSelectionModel({
                    singleSelect:true
                }),

                viewConfig: {
                    forceFit:true,
                    enableRowBody:true,
                    showPreview:true,
                    getRowClass : this.applyRowClass
                }
            });

            this.on('rowclick', this.onMemberClick, this);
        };
        Ext.extend(TeamGrid, Ext.grid.GridPanel, {

            onMemberClick : function(grid, index, e){
                var rec = store.getAt(index);
                var user_id = rec.data['user_id'];
                store2.proxy = new Ext.data.HttpProxy({
                    url : '/projectmanagement/diary/getmydiary/prj_kode/<?php echo $this->prjKode?>/id_user/' + user_id
                });
                store2.reload();
            },

//            onContextClick : function(grid, index, e){
//                if(!this.menu){ // create context menu on first right click
//                    this.menu = new Ext.menu.Menu({
//                        id:'grid-ctx',
//                        items: [{
//                            text: 'View in new tab',
//                            iconCls: 'new-tab',
//                            scope:this,
//                            handler: function(){
//                                this.viewer.openTab(this.ctxRecord);
//                            }
//                        },{
//                            iconCls: 'new-win',
//                            text: 'Go to Post',
//                            scope:this,
//                            handler: function(){
//                                window.open(this.ctxRecord.data.link);
//                            }
//                        },'-',{
//                            iconCls: 'refresh-icon',
//                            text:'Refresh',
//                            scope:this,
//                            handler: function(){
//                                this.ctxRow = null;
//                                this.store.reload();
//                            }
//                        }]
//                    });
//                    this.menu.on('hide', this.onContextHide, this);
//                }
//                e.stopEvent();
//                if(this.ctxRow){
//                    Ext.fly(this.ctxRow).removeClass('x-node-ctx');
//                    this.ctxRow = null;
//                }
//                this.ctxRow = this.view.getRow(index);
//                this.ctxRecord = this.store.getAt(index);
//                Ext.fly(this.ctxRow).addClass('x-node-ctx');
//                this.menu.showAt(e.getXY());
//            },
//
//            onContextHide : function(){
//                if(this.ctxRow){
//                    Ext.fly(this.ctxRow).removeClass('x-node-ctx');
//                    this.ctxRow = null;
//                }
//            },

//            loadFeed : function(url) {
//                this.store.baseParams = {
//                    feed: url
//                };
//                this.store.load();
//            },
//
//            togglePreview : function(show){
//                this.view.showPreview = show;
//                this.view.refresh();
//            },

            // within this function "this" is actually the GridView
            applyRowClass: function(record, rowIndex, p, ds) {
                if (this.showPreview) {
                    var xf = Ext.util.Format;
//                    p.body = '<p>' + xf.ellipsis(xf.stripTags(record.data.role_name), 200) + '</p>';
                    return 'x-grid3-row-expanded';
                }
                return 'x-grid3-row-collapsed';
            },

            formatTitle: function(value, p, record) {
                return '<div class="personicon"><b>' + record.data.name + '</b><span class="rolename">' + record.data.role_name + '</span></div>';

            }
        });

        var messageGrid = function(viewer, config) {
            this.viewer = viewer;
            this.id = 'msg-grids';
            Ext.apply(this, config);
            this.stateful= false,
            this.store = store2;
            this.store.setDefaultSort('tgl', "DESC");
            this.bbar = new Ext.PagingToolbar({
                                    pageSize: 20,
                                    store: this.store,
                                    displayInfo: true,
                                    displayMsg: 'Displaying diary {0} - {1} of {2}',
                                    emptyMsg: "No diary to display"
                                });
            this.columns = [
                {
                    id: 'aktifitas',
                    header: "Activity",
                    dataIndex: 'aktifitas',
                    width: 420,
                    sortable:false,
                    renderer: this.formatTitle
                },
                {
                    id: 'name',
                    header: "Author",
                    dataIndex: 'name',
                    width: 100,
                    sortable:true
                },
                {
                    id: 'tgl',
                    header: "Date",
                    dataIndex: 'tgl',
                    width: 100,                    
                    sortable:true,
                    renderer: this.formatDate
                }
            ];

//            this.tbar = [
//                {
//                    xtype: 'button',
//                    text: 'Post New Diary',
//                    width:110,
//                    id: 'show_site',
//                    cls:"x-btn-text-icon" ,
//                    icon:"/images/icons/fam/note.gif"
////                    handler:showSite
//                }
//            ];

            messageGrid.superclass.constructor.call(this, {
                id: 'message-grid',
                loadMask: {msg:'Loading...'},

                sm: new Ext.grid.RowSelectionModel({
                    singleSelect:true
                }),

                viewConfig: {
                    forceFit:true,
                    enableRowBody:true,
                    showPreview:true,
                    getRowClass : this.applyRowClass
                }
            });

            this.on('rowdblclick', this.ondobelclick, this);
        };
        Ext.extend(messageGrid, Ext.grid.GridPanel, {

            ondobelclick: function(g, rowIndex, e){
                var rec = g.getStore().getAt(rowIndex);
                showPreview(rec);
            },

//            onContextClick : function(grid, index, e){
//                if(!this.menu){ // create context menu on first right click
//                    this.menu = new Ext.menu.Menu({
//                        id:'grid-ctx',
//                        items: [{
//                            text: 'View in new tab',
//                            iconCls: 'new-tab',
//                            scope:this,
//                            handler: function(){
//                                this.viewer.openTab(this.ctxRecord);
//                            }
//                        },{
//                            iconCls: 'new-win',
//                            text: 'Go to Post',
//                            scope:this,
//                            handler: function(){
//                                window.open(this.ctxRecord.data.link);
//                            }
//                        },'-',{
//                            iconCls: 'refresh-icon',
//                            text:'Refresh',
//                            scope:this,
//                            handler: function(){
//                                this.ctxRow = null;
//                                this.store.reload();
//                            }
//                        }]
//                    });
//                    this.menu.on('hide', this.onContextHide, this);
//                }
//                e.stopEvent();
//                if(this.ctxRow){
//                    Ext.fly(this.ctxRow).removeClass('x-node-ctx');
//                    this.ctxRow = null;
//                }
//                this.ctxRow = this.view.getRow(index);
//                this.ctxRecord = this.store.getAt(index);
//                Ext.fly(this.ctxRow).addClass('x-node-ctx');
//                this.menu.showAt(e.getXY());
//            },
//
//            onContextHide : function(){
//                if(this.ctxRow){
//                    Ext.fly(this.ctxRow).removeClass('x-node-ctx');
//                    this.ctxRow = null;
//                }
//            },

//            loadFeed : function(url) {
//                this.store.baseParams = {
//                    feed: url
//                };
//                this.store.load();
//            },
//
//            togglePreview : function(show){
//                this.view.showPreview = show;
//                this.view.refresh();
//            },

            // within this function "this" is actually the GridView
            applyRowClass: function(record, rowIndex, p, ds) {
                if (this.showPreview) {
                    var xf = Ext.util.Format;
                    if (record.data.aktifitas != null && record.data.aktifitas != "")
                        var isi = record.data.aktifitas;
                    else if (record.data.hambatan != null && record.data.hambatan != "")
                        var isi = record.data.hambatan;
                    p.body = '<p>' + xf.ellipsis(xf.stripTags(isi), 200) + '</p>';
                    return 'x-grid3-row-expanded';
                }
                return 'x-grid3-row-collapsed';
            },

            formatTitle: function(value, p, record) {
                if (record.data.aktifitas_type != null && record.data.aktifitas_type != "")
                    return '<div class="messageicon"><b>Site ' + record.data.sit_kode + ' - ' + record.data.sit_nama + '</b><span class="activitytype">Activity Type: ' + record.data.aktifitas_type + '</span></div>';
                else if (record.data.hambatan_type != null && record.data.hambatan_type != "")
                    return '<div class="messageicon"><b>Site ' + record.data.sit_kode + ' - ' + record.data.sit_nama + '</b><span class="activitytype">Problem Type: ' + record.data.hambatan_type + '</span></div>';
            },

            formatDate : function(date) {
                    if (!date) {
                        return '';
                    }
                    var now = new Date();
                    var d = now.clearTime(true);
                    var notime = date.clearTime(true).getTime();
                    if (notime == d.getTime()) {
                        return 'Today ' + date.dateFormat('g:i a');
                    }
                    d = d.add('d', -6);
                    if (d.getTime() <= notime) {
                        return date.dateFormat('D g:i a');
                    }
                    return date.dateFormat('n/j g:i a');
                }

        });


        var grid = new TeamGrid({
            loadMask: true,

            frame:true,
            width: 280
        });

        var msggrid = new messageGrid({
            loadMask: true,
            frame:true,
            width: 280
        });

//        var userForms = new userForm({
//        });


        
var viewports = ({
    layout: 'border',
    stateful: false,
    loadMask: true,
    title: 'My Project',
    id: 'abs-budget-panel',
    bodyCfg : { cls:'xpanel-body-table' , style: {'overflow':'auto'}},
  	bodyStyle: 'padding:15px;',
    items: [
			{
			    region: 'west',
			    id: 'workid', // see Ext.getCmp() below
//			    title: 'BOQ3 Current',
			    split: true,
			    stateful: false,
			    layout: 'fit',
			    width: 200,
			    minSize: 150,
			    maxSize: 250,
			    items: grid,
			    listeners: {
                	   resize: function (p,w,h,rw,rh) {
							grid.setWidth(w);
                   		}
                   }
			},
			{
			    region: 'center',
			    id: 'detail', // see Ext.getCmp() below
			    title: '',
			    width: 500,
			    minSize: 175,
			    maxSize: 400,
			    layout: 'fit',
			    margins: '0 0 0 5',
			    items: msggrid,
                tbar: [
                    {
                        xtype: 'button',
                        text: 'Post New Diary',
                        width:110,
                        id: 'show_site',
                        cls:"x-btn-text-icon" ,
                        icon:"/images/icons/fam/note.gif",
                        handler:showForm
                    },
                    '-',
                    {
                        xtype: 'button',
                        text: 'Show All Diary',
                        width:110,
                        id: 'show_all',
                        cls:"x-btn-text-icon" ,
                        icon:"/images/icons/fam/icon_history.gif",
                        handler: function () {
                            store2.proxy = new Ext.data.HttpProxy({
                                url : '/projectmanagement/diary/getmydiary/prj_kode/<?php echo $this->prjKode?>/all/true'
                            });
                            store2.reload();
                        }
                    },
                ]
			}

            ]

});


//var windowForm =  ({
//
//    title: 'My Project',
//    id: 'abs-budget-panel',
//    layout: 'fit',
//    bodyCfg : { cls:'xpanel-body-table' , style: {'overflow':'auto'}},
//    bodyStyle: 'padding:15px;',
//    loadMask: true,
//    minWidth: 300,
//    minHeight: 200,
//    items : viewports
//});
viewPort = Ext.getCmp('viewport');

centerRegionTab = viewPort.getComponent('content-panel');
centerRegionTab.items.each(function(c){centerRegionTab.remove(c);});
centerRegionTab.add(viewports);
panelBaru = Ext.getCmp('abs-budget-panel');
panelBaru.title = 'Project <?php echo $this->prjKode?> - <?php echo $this->prjNama; ?>';
centerRegionTab.layout.setActiveItem('abs-budget-panel');
});

//function showImage(rec)
//{
//    var d =Ext.getCmp('store-diary').getAt(rec).data;
//    var eForm =  new Ext.Window({
//		    id: 'e-form-panel',
//		    layout:'fit',
//		    width: 600,
//		    height: 500,
//            minWidth: 500,
//            minHeight: 350,
//		    title: 'Image Preview',
//		    stateful: false,
//	        modal: true,
//		    items: [
//                    new Ext.Panel({
//                        id: 'image-preview',
//                        cls:'image single-image-preview',
//                        html: tplimage.apply(d),
//                        closable:true,
//                        autoScroll:true,
//                        border:true
//                    })
//            ],
//            buttons: [
//                 {
//                     text: 'Close',
//                     id: 'close-image-preview',
//                     handler: function(btn, ev) {
//                        eForm.close();
//                     }
//                }
//            ]
//
//    });
//
//    eForm.show();
//}    

</script>

<div id="preview-tpl" style="display:none;">
    <div class="post-data">
        <span class="post-date">{tgl:date("M j, Y, g:i a")}</span>
        <h3 class="post-title">Site {sit_kode} - {sit_nama}</h3>
        <h4 class="post-author">by {name:defaultValue("Unknown")}</h4>
        <h3 class="post-files">{savename:this.getAttachment}</h3>
    </div>
    {aktifitas_type:this.getAktifitasType}
    {aktifitas:this.getAktifitas}
    {hambatan_type:this.getHambatanType}
    {hambatan:this.getHambatan}
</div>

<div id="preview-image-tpl" style="display:none;">
    <div class="image-data">
        <span class="image-date">{DateTimeOriginal:defaultValue("Unknown")}</span>
        <h3 class="image-title">{filename}</h3>
        <h4 class="image-make">Taken From : <b>{Make:defaultValue("Unknown")} {Model:defaultValue("Unknown")} </b></h4>
        <h3 class="image-gps"></h3>
    </div>
    {imageFile:this.getImage}
</div>