<script type="text/javascript">

var proxy = new Ext.data.HttpProxy({
    api: {
        read : '/projectmanagement/timesheet/view/userid/<?php echo $this->userID; ?>',
        create : '/projectmanagement/timesheet/create',
        update: '/projectmanagement/timesheet/update',
        destroy: '/projectmanagement/timesheet/delete'
    }
});

var reader = new Ext.data.JsonReader({
    totalProperty: 'count',
    successProperty: 'success',
    idProperty: 'id',
    root: 'data',
    messageProperty: 'message'  // <-- New "messageProperty" meta-data
}, [
    {name: 'id'},
    {name: 'name', allowBlank: false},
    {name: 'description'},
    {name: 'date_created'},
    {name: 'status'}
]);

var writer = new Ext.data.JsonWriter({
    encode: true,
    writeAllFields: false
});

var store = new Ext.data.Store({
    id: 'user',
    proxy: proxy,
    reader: reader,
    writer: writer,
    autoSave: true
});

// load the store immeditately
store.load();


var userColumns =  [
                    {header: "ID", width: 40, sortable: true, dataIndex: 'id'},
                    {header: "Email", width: 100, sortable: true, dataIndex: 'email', editor: textField},
                    {header: "First", width: 50, sortable: true, dataIndex: 'first', editor: textField},
                    {header: "Last", width: 50, sortable: true, dataIndex: 'last', editor: textField}
                ];

var forms = Ext.extend(Ext.form.FormPanel, {
    renderTo: 'user-form',
    iconCls: 'silk-user',
    frame: true,
    labelAlign: 'right',
    title: 'User -- All fields are required',
    frame: true,
    width: 500,
    defaultType: 'textfield',
    defaults: {
        anchor: '100%'
    },

    record : null,

    initComponent : function() {
        // build the form-fields.  Always a good idea to defer form-building to a method so that this class can
        // be over-ridden to provide different form-fields
        this.items = this.buildForm();

        // build form-buttons
        this.buttons = this.buildUI();

        // add a create event for convenience in our application-code.
        this.addEvents({
            /**
             * @event create
             * Fires when user clicks [create] button
             * @param {FormPanel} this
             * @param {Object} values, the Form's values object
             */
            create : true
        });

        // super
        App.user.Form.superclass.initComponent.call(this);
    },

    /**
     * buildform
     * @private
     */
    buildForm : function() {
        return [
            {fieldLabel: 'Name', name: 'name', allowBlank: false},
            {fieldLabel: 'Description', name: 'description'}
        ];
    },

    /**
     * buildUI
     * @private
     */
    buildUI: function(){
        return [{
            text: 'Save',
            iconCls: 'icon-save',
            handler: this.onUpdate,
            scope: this
        }, {
            text: 'Create',
            iconCls: 'silk-user-add',
            handler: this.onCreate,
            scope: this
        }, {
            text: 'Reset',
            handler: function(btn, ev){
                this.getForm().reset();
            },
            scope: this
        }];
    },

    /**
     * loadRecord
     * @param {Record} rec
     */
    loadRecord : function(rec) {
        this.record = rec;
        this.getForm().loadRecord(rec);
    },

    /**
     * onUpdate
     */
    onUpdate : function(btn, ev) {
        if (this.record == null) {
            return;
        }
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid.");
            return false;
        }
        this.getForm().updateRecord(this.record);
    },

    /**
     * onCreate
     */
    onCreate : function(btn, ev) {
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid");
            return false;
        }
        this.fireEvent('create', this, this.getForm().getValues());
        this.getForm().reset();
    },

    /**
     * onReset
     */
    onReset : function(btn, ev) {
        this.fireEvent('update', this, this.getForm().getValues());
        this.getForm().reset();
    }
});

var userForm = new forms({
    renderTo: 'user-form',
    listeners: {
        create : function(fpanel, data) {   // <-- custom "create" event defined in App.user.Form class
            var rec = new userGrid.store.recordType(data);
            userGrid.store.insert(0, rec);
        }
    }
});

// create user.Grid instance (@see UserGrid.js)
//var userGrid = new App.user.Grid({
//    renderTo: 'user-grid',
//    store: store,
//    columns : userColumns,
//    listeners: {
//        rowclick: function(g, index, ev) {
//            var rec = g.store.getAt(index);
//            userForm.loadRecord(rec);
//        },
//        destroy : function() {
//            userForm.getForm().reset();
//        }
//    }
//});
</script>