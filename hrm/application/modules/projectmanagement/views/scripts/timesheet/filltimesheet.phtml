<script type="text/javascript">
var App = new Ext.App({});

// Create HttpProxy instance.  Notice new configuration parameter "api" here instead of load.  However, you can still use
// the "url" paramater -- All CRUD requests will be directed to your single url instead.
var proxy = new Ext.data.HttpProxy({
    api: {
        read : '/projectmanagement/timesheet/list/userid/<?php echo $this->userID; ?>/prj_kode/<?php echo $this->prjKode; ?>/sit_kode/<?php echo $this->sitKode; ?>',
        create : '/projectmanagement/timesheet/create/userid/<?php echo $this->userID; ?>/prj_kode/<?php echo $this->prjKode; ?>/sit_kode/<?php echo $this->sitKode; ?>',
        update: '/projectmanagement/timesheet/update/userid/<?php echo $this->userID; ?>/prj_kode/<?php echo $this->prjKode; ?>/sit_kode/<?php echo $this->sitKode; ?>',
        destroy: '/projectmanagement/timesheet/delete/userid/<?php echo $this->userID; ?>/prj_kode/<?php echo $this->prjKode; ?>/sit_kode/<?php echo $this->sitKode; ?>'
    }
});

// Typical JsonReader.  Notice additional meta-data params for defining the core attributes of your json-response
var reader = new Ext.data.JsonReader({
    totalProperty: 'count',
    successProperty: 'success',
    idProperty: 'id',
    messageProperty: 'message',
    root: 'posts'  // <-- New "messageProperty" meta-data
}, [
    {name: 'id'},
    {name: 'description', allowBlank: false},
    {name: 'due_date', allowBlank: false, type: 'date', dateFormat: 'Y-m-d'},
    {name: 'total_time'},
    {name: 'status'}
]);

// The new DataWriter component.
var writer = new Ext.data.JsonWriter({
    encode: true,
    writeAllFields: true
});

// Typical Store collecting the Proxy, Reader and Writer together.
var store = new Ext.data.Store({
    id: 'user',
    proxy: proxy,
    reader: reader,
    writer: writer,  // <-- plug a DataWriter into the store just as you would a Reader
    autoSave: true // <-- false would delay executing create, update, destroy requests until specifically told to do so with some [save] buton.
});

// load the store immeditately
store.load();

// A new generic text field
var textField =  new Ext.form.TextField();

// Let's pretend we rendered our grid-columns with meta-data from our ORM framework.
var userColumns =  [
    new Ext.grid.RowNumberer(),
    {header: "Description", width: 140, sortable: true, dataIndex: 'description'},
    {header: "Due Date", width: 100, sortable: true, dataIndex: 'due_date',renderer: Ext.util.Format.dateRenderer('m/d/Y')},
    {header: "Allocation Time", width: 80, sortable: true, dataIndex: 'total_time'}
];

//** Number **//
Ext.apply(Ext.form.VTypes, {
	'numeric': function(){
		
			/*****************************************************************
			DESCRIPTION: Validates that a string contains only valid numbers.
			PARAMETERS:
			   strValue - String to be tested for validity
			RETURNS:
			   True if valid, otherwise false.
			******************************************************************/
			  var objRegExp  =  /(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/;
			  return function(strValue){
				  //check for numeric characters
				  return objRegExp.test(strValue);
			  }
	}(),
	'numericText': 'Only numbers are allowed'
});

userForm = Ext.extend(Ext.form.FormPanel, {
    renderTo: 'user-form',
    iconCls: 'silk-user',
    frame: true,
    labelAlign: 'right',
    title: 'Fill Timesheet -- All Fields are Required',
    width: 400,
    defaults: {
        anchor: '100%'
    }
,
    initComponent : function() {
        this.items = this.buildForm();
//
//        // build form-buttons
        this.buttons = this.buildUI();
//
//        // add a create event for convenience in our application-code.
        this.addEvents({
            create : true
        });
//
//        // super
        userForm.superclass.initComponent.call(this);
    },
//
    buildForm : function() {
        return [
            {fieldLabel: 'Project Code',xtype : 'textfield',id : 'form_prjKode',readOnly: true},
            {fieldLabel: 'Site Code', xtype : 'textfield',id : 'form_sitKode',readOnly: true},
            {fieldLabel: 'Description', name: 'description',xtype : 'textarea'},
            {fieldLabel: 'Due Date', name: 'due_date', allowBlank: false,xtype: 'datefield',format : 'm/d/Y'},
            {fieldLabel: 'Allocation Time', id: 'total_time', name: 'total_time', allowBlank: false,xtype: 'textfield', vtype: 'numeric' 
				,enableKeyEvents: true
                ,listeners: {
            		keyup: function (txt, newValue, oldValue) {
            			var allocTime = this.getValue();
            			if (allocTime >= 12 && allocTime <= 24)
            			{
                			overTime = allocTime - 8;
            				App.setAlert(true, 'You have overtime : ' + overTime + ' Hour(s)');
            			}
            			else if (allocTime > 24)
            			{
            				App.setAlert(false, 'Invalid Time (Max. 24 Hour)');
            				Ext.getCmp('total_time').setValue('');
            			}
					}
            	}
            }
        ];
    },
//
//    /**
//     * buildUI
//     * @private
//     */
    buildUI: function(){
        return [{
            text: 'Save',
            iconCls: 'icon-save',
            handler: this.onUpdate,
            scope: this
        }, {
            text: 'Create',
            iconCls: 'silk-user-add',
            handler: this.onCreate,
            scope: this
        }, {
            text: 'Reset',
            handler: function(btn, ev){
                this.getForm().reset();
                Ext.getCmp('form_prjKode').setValue('<?php echo $this->prjKode ?>');
                Ext.getCmp('form_sitKode').setValue('<?php echo $this->sitKode ?>');
            },
            scope: this
        }];
    },
//
//    /**
//     * loadRecord
//     * @param {Record} rec
//     */
    loadRecord : function(rec) {
        this.record = rec;
        this.getForm().loadRecord(rec);
    },
//
//    /**
//     * onUpdate
//     */
    onUpdate : function(btn, ev) {
        if (this.record == null) {
            return;
        }
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid.");
            return false;
        }
        this.getForm().updateRecord(this.record);
    },
//
//    /**
//     * onCreate
//     */
    onCreate : function(btn, ev) {
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid");
            return false;
        }
        this.fireEvent('create', this, this.getForm().getValues());
        this.getForm().reset();
        Ext.getCmp('form_prjKode').setValue('<?php echo $this->prjKode ?>');
        Ext.getCmp('form_sitKode').setValue('<?php echo $this->sitKode ?>');
    },
//
//    /**
//     * onReset
//     */
    onReset : function(btn, ev) {
        this.fireEvent('update', this, this.getForm().getValues());
        this.getForm().reset();
        Ext.getCmp('form_prjKode').setValue('<?php echo $this->prjKode ?>');
        Ext.getCmp('form_sitKode').setValue('<?php echo $this->sitKode ?>');
    }
});

/**
 * App.user.Grid
 * A typical EditorGridPanel extension.
 */
userGrid = Ext.extend(Ext.grid.EditorGridPanel, {
    renderTo: 'user-grid',
    iconCls: 'silk-grid',
    frame: true,
    title: 'Timesheet List',
    height: 500,
    width: 700,
    style: 'margin-top: 10px',

    initComponent : function() {

        // typical viewConfig
        this.viewConfig = {
            forceFit: true
        };

        // relay the Store's CRUD events into this grid so these events can be conveniently listened-to in our application-code.
        this.relayEvents(this.store, ['destroy', 'save', 'update']);

        // build toolbars and buttons.
        this.tbar = this.buildTopToolbar();
        this.buttons = this.buildUI();

        // super
        userGrid.superclass.initComponent.call(this);
    },

    /**
     * buildTopToolbar
     */
    buildTopToolbar : function() {
        return [{
            text: 'Delete',
            iconCls: 'silk-delete',
            handler: this.onDelete,
            scope: this
        }, '-'];
    },

    /**
     * buildUI
     */
    buildUI : function() {
        return [{
            text: 'Submit Timesheet',
            iconCls: 'icon-save',
            handler: this.onSubmit,
            scope: this
        }];
    },

    /**
     * onSave
     */
    onSave : function(btn, ev) {
        this.store.save();
    },

	onSubmit : function(btn, ev) {
//    	var s = this.store.getRange();
    	var json = '';
    	this.store.each(function(store){  
    	json += Ext.util.JSON.encode(store.data) + ',';  
    	});  
    	json = json.substring(0, json.length - 1); 
    	params = {posts:json};
    	Ext.Ajax.request({
            url: '/projectmanagement/timesheet/submit/userid/<?php echo $this->userID; ?>/prj_kode/<?php echo $this->prjKode; ?>/sit_kode/<?php echo $this->sitKode; ?>',
            method:'POST',
            success: function(result, request){
      	   		var returnData = Ext.util.JSON.decode(result.responseText);
 				if( !returnData.success) {
 					Ext.Msg.alert('Error!', returnData.message);
 				} else {
 					Ext.Msg.alert('Success!', 'Your Timesheet have been submitted!');
 					this.store.reload();
 				}
 			}
 		,failure:function( action){
    	if(action.failureType == 'server'){
        obj = Ext.util.JSON.decode(action.response.responseText);
        Ext.Msg.alert('Error!', obj.errors.reason);
    	}
    	},
            params: params
        }); 
    },
    
    /**
     * onDelete
     */
    onDelete : function(btn, ev) {
        var index = this.getSelectionModel().getSelectedCell();
        if (!index) {
            return false;
        }
        var rec = this.store.getAt(index[0]);
        this.store.remove(rec);
    }
});

Ext.onReady(function() {
    Ext.QuickTips.init();
    // create user.Form instance (@see UserForm.js)
    var userForms = new userForm({
        renderTo: 'user-form',
        listeners: {
            create : function(fpanel, data) {   // <-- custom "create" event defined in App.user.Form class
                var rec = new userGrids.store.recordType(data);
                userGrids.store.insert(0, rec);
            }
        }
    });

//     create user.Grid instance (@see UserGrid.js)
    var userGrids = new userGrid({
        renderTo: 'user-grid',
        store: store,
        columns : userColumns,
        listeners: {
            rowclick: function(g, index, ev) {
                var rec = g.store.getAt(index);
                userForms.loadRecord(rec);
            },
            destroy : function() {
                userForms.getForm().reset();
            }
        }
    });

Ext.getCmp('form_prjKode').setValue('<?php echo $this->prjKode ?>');
Ext.getCmp('form_sitKode').setValue('<?php echo $this->sitKode ?>');    
});
</script>

 <div id="user-form"></div>
 <div id="user-grid"></div>
