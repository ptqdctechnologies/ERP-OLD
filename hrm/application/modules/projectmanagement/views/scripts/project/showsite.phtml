<script type="text/javascript">

    var proxy = new Ext.data.HttpProxy({
        api: {
            read: '/default/site/list',
            create: '/projectmanagement/project/createsite'
        }
    });

    var reader = new Ext.data.JsonReader({
        totalProperty: 'count',
        successProperty: 'success',
        idProperty: 'id',
        messageProperty: 'message',
        root: 'posts'
    },[
        {name:'id'},
        {name:'prj_kode'},
        {name:'prj_nama'},
        {name:'sit_kode'},
        {name:'sit_nama'},
        {name:'ket'},
        {name:'stsoverhead'}
    ]);

var writer = new Ext.data.JsonWriter({
    encode: true,
    writeAllFields: true
});

var store = new Ext.data.Store({
    id: 'user-store',
    proxy: proxy,
    reader: reader,
    writer: writer

});

store.load();

var textField = new Ext.form.TextField();

var userColumns = [
    new Ext.grid.RowNumberer(),
    {header: "Site Code", width: 100, sortable: true, dataIndex: 'sit_kode'},
    {header: "Site Name", width: 200, sortable: true, dataIndex: 'sit_nama'},
    {header: "Project Code", width: 100, sortable: true, dataIndex: 'prj_kode'},
    //{header: "Project Name", width: 200, sortable: true, dataIndex: 'prj_nama'},
    {header: "Description", width: 200, sortable: true, dataIndex: 'ket'},
     {header: "Status Overhead", width: 200, sortable: true, dataIndex: 'stsoverhead'}
];

userForm = new Ext.extend(Ext.form.FormPanel, {
    iconCls: 'silk-user',
    frame: true,
    id: 'user-forms',
    style: 'margin-top: 10px',
    labelAlign: 'right',
    title: 'Add New Site',
    width: 400,
    defaults: {
        anchor: '100%'
    }
    ,
    initComponent : function() {
        this.items = this.buildForm();
        this.buttons = this.buildUI();
        this.addEvents({
            create : true
        });
        userForm.superclass.initComponent.call(this);
    }
    ,
     buildForm : function() {
        return [
                        {xtype:'trigger',fieldLabel: 'Project Code',id:'prj_kode_text',name: 'prj_kode', triggerClass: 'search-button',
                                onTriggerClick: function( ){
				projectPopUphandler();
				},
                                editable: false,
				allowBlank: true
			},
			{fieldLabel: 'Project Name',id:'prj_nama_text', xtype: 'textfield',readOnly: true},
                        {fieldLabel: 'Site Code',id:'sit_kode',name: 'sit_kode', xtype: 'textfield',allowBlank:false},
			{fieldLabel: 'Site Name',id:'sit_nama',name: 'sit_nama', xtype: 'textfield',allowBlank:false},
                        {fieldLabel: 'Description',id:'ket',name: 'ket', xtype: 'textfield'},
                        {
                            xtype:'checkbox', id:'stsoverhead', name:'stsoverhead',  fieldLabel:'Status Overhead',
                            trueText: '1',
		            falseText: '0'
                        }
		
        ];

    },

     buildUI: function(){
        return [
//        {
//            text: 'Save',
//            iconCls: 'icon-save',
//            handler: this.onUpdate,
//            scope: this
//        },
        {
            text: 'Create',
            iconCls: 'silk-user-add',
            handler: this.onCreate,
            scope: this
        }, {
            text: 'Reset',
            handler: function(btn, ev){
                this.getForm().reset();
            },
            scope: this
        }, {
            text: 'Cancel',
            handler: function(btn, ev){
	        	myPanel = Ext.getCmp('abs-budget-panel');
	    	    myPanel.body.load({
	    	        url: '/projectmanagement/budget/showcreateboq3',
	    	        scripts : true
	            });
            },
            scope: this
        }];
    }
    ,
     loadRecord : function(rec) {
        this.record = rec;
        this.getForm().loadRecord(rec);
    }
    ,
    onUpdate : function(btn, ev) {
        if (this.record == null) {
            return;
        }
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid.");
            return false;
        }
        this.getForm().updateRecord(this.record);
    }
    ,
    onCreate : function(btn, ev) {
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid");
            return false;
        }
        var prjKode = Ext.getCmp('prj_kode_text').getValue();
        var sitKode = Ext.getCmp('sit_kode').getValue();

        sitKode = sitKode.toString().replace(/^ +| +$|( )+/, "");
        sitKode = sitKode.toString().replace(/[^ _a-zA-Z0-9-]+/g,"");

        var cekUrl = '/default/project/cekprojectexist/prj_kode/' + prjKode +'/sit_kode/'+ sitKode;
        Ext.Ajax.request({
            url: cekUrl,
            method: 'POST',
            success: function(result, request){
            	   var returnData = Ext.util.JSON.decode(result.responseText);

    				if( returnData.success) {
    					Ext.Msg.alert('Error!', 'Site Code Exists!');
    				} else {
        				var myForm = Ext.getCmp('user-forms');
        				myForm.fireEvent('create', this, myForm.getForm().getValues());
        				myForm.getForm().reset();
    				}
    			},
             failure:function( action){
          	if(action.failureType == 'server'){
              obj = Ext.util.JSON.decode(action.response.responseText);
              Ext.Msg.alert('Error!', obj.errors.reason);
          	}
          	}
        });
    },
        onReset : function(btn, ev) {
        this.fireEvent('update', this, this.getForm().getValues());
        this.getForm().reset();
    }
});

userGrid = Ext.extend(Ext.grid.GridPanel, {
    id:'site-detail-grid',
    iconCls: 'silk-grid',
    frame: true,
    height: 450,
    style: 'margin-top: 10px',
    trackMouseOver: true,

    initComponent : function() {
        userGrid.superclass.initComponent.call(this);
    }

});

<?php echo $this->action('popupgrid','grid'); ?>

Ext.onReady(function() {
    Ext.QuickTips.init();
    var userForms = new userForm({
        renderTo: 'user-form',
        listeners: {
            create : function(fpanel, data) {
                var rec = new userGrids.store.recordType(data);
                userGrids.store.insert(0, rec);
            }
        }
    });

    var userGrids = new userGrid({
        renderTo: 'user-grid',
        store: store,
        columns : userColumns,
        width: 500
    });


});
</script>
<div>
 <div id="user-form" style="float:left"></div>
 <div id="user-grid" style="margin-left: 10px;float:left"></div>
 </div>          