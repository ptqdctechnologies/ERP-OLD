<script type="text/javascript">

    Ext.apply(Ext.form.VTypes, {
        numericText: "Only numbers are allowed.",
        numericMask: /[0-9]/,
        numericRe: /(^-?dd*.d*$)|(^-?dd*$)|(^-?.dd*$)/,
        numeric: function(v) {
            return function() {
                return this.numericRe.test(v)
            };
        }
    });

    var editor = new Ext.ux.grid.RowEditor({
        saveText: 'Update',
        clicksToEdit: 2
    });


    var jurnalppnremlist = Ext.data.Record.create([
        {name: 'trano'},
        {name: 'ref_number'},
        {name: 'prj_kode'},
        {name: 'sit_kode'},
        {name: 'job_number'},
        {name: 'tgl'},
        {name: 'uid'},
        {name: 'coa_kode'},
        {name: 'coa_nama'},
        {name: 'val_kode'},
        {name: 'debit'},
        {name: 'credit'},
        {name: 'type'}
    ])

    var storejurnalppnrem = new Ext.data.Store({
        id: 'store-jurnalppnrem',
        reader: new Ext.data.JsonReader({fields: jurnalppnremlist}),
        listeners: {
            'load': function(record) {
                hitungTotal();
            }
        }
    });

    var totDebit = 0;
    var totCredit = 0;

    function hitungTotal()
    {
        totDebit = 0;
        totCredit = 0;

        storejurnalppnrem.each(function(items) {
            totDebit += (parseFloat(items.data['debit']));
            totCredit += (parseFloat(items.data['credit']));

        });
        Ext.getCmp('debittotal').setText('Total Debit : ' + Ext.util.Format.number(totDebit, '0,0.00'));
        Ext.getCmp('credittotal').setText('Total Credit : ' + Ext.util.Format.number(totCredit, '0,0.00'));
    }

    function edit(r)
    {

//        var strPR = storejurnalppnrem.getAt(storePR.findExact('id',stores.data['id']));

        var dat = storejurnalppnrem.getAt(r);
        Ext.getCmp('acc-number').setValue(dat.data['ref_number']);
        Ext.getCmp('coa-kode').setValue(dat.data['coa_kode']);
        Ext.getCmp('coa-nama').setValue(dat.data['coa_nama']);
        Ext.getCmp('val-kode').setValue(dat.data['val_kode']);
        Ext.getCmp('debit').setValue(dat.data['debit']);
        Ext.getCmp('credit').setValue(dat.data['credit']);

        Ext.getCmp('form-insert-bank-in').stat = 'edit';
        Ext.getCmp('form-insert-bank-in').idEdit = dat.id;
    }

    function deleterowgrid(idItem)
    {
        Ext.MessageBox.confirm('Confirm', 'Are you sure want to delete this?', function(btn) {
            if (btn == 'yes')
            {
                var store = storejurnalppnrem;
                var dat = store.getById(idItem);

                if (dat)
                {
                    store.remove(dat);
                    Ext.getCmp('form-insert-bank-in').stat = 'new';
                    Ext.getCmp('form-insert-bank-in').idEdit = '';
                    Ext.getCmp('grid-bankin').getView().refresh();
                    hitungTotal();
                }
            }
        });
    }

    function showcoalist(tipe)
    {
        var coastore = new Ext.data.Store({
            autoLoad: true,
            url: '/finance/paymentreimbursement/getcoalist',
            reader: new Ext.data.JsonReader({
                root: 'data',
                totalProperty: 'total',
                fields: [{
                        name: 'coa_kode'
                    }, {
                        name: 'coa_nama'
                    }, {
                        name: 'tipe'
                    }]
            })

        })

        var coagrid = new Ext.grid.GridPanel({
            store: coastore,
            viewConfig: {
                forceFit: true
            },
            height: 300,
            columns: [{
                    header: 'COA CODE',
                    dataIndex: 'coa_kode',
                    align: 'center',
                    sortable: true
                }, {
                    header: 'COA NAME',
                    dataIndex: 'coa_nama',
                    align: 'center',
                    sortable: true
                }, {
                    header: 'Type',
                    dataIndex: 'tipe',
                    align: 'center',
                    sortable: true
                }],
            bbar: new Ext.PagingToolbar({
                id: 'paging-coa',
                pageSize: 20,
                store: coastore,
                displayInfo: true,
                displayMsg: 'Displaying data {0} - {1} of {2}',
                emptyMsg: "No data to display"
            }), tbar: [{
                    text: 'Search By',
                    xtype: 'label',
                    style: 'margin-left:5px'
                }, {
                    xtype: 'combo',
                    width: 100,
                    allowBlank: false,
                    store: new Ext.data.SimpleStore({
                        fields: ['name', 'nilai'],
                        data: [
                            ['Coa Code', 1],
                            ['Coa Name', 2],
                            ['Coa Type', 3]
                        ]
                    }),
                    valueField: 'nilai',
                    displayField: 'name',
                    typeAhead: true,
                    forceSelection: true,
                    editable: false,
                    mode: 'local',
                    triggerAction: 'all',
                    selectOnFocus: true,
                    value: 1,
                    id: 'option'
                }, {
                    xtype: 'textfield',
                    id: 'search',
                    style: 'margin-left:10px',
                    enableKeyEvents: true,
                    width: 100,
                    listeners: {
                        'keyup': function(txttext, event)
                        {
                            var txttext = txttext.getValue();
                            if (txttext != "" && txttext.toString().length >= 3)
                            {
                                var option = Ext.getCmp('option').getValue();
                                var search = Ext.getCmp('search').getValue();

                                coastore.proxy.setUrl('/finance/paymentreimbursement/getcoalist/search/' + search + '/option/' + option);
                                coastore.reload();
                                coagrid.getView().refresh();
                            }
                        }
                    }
                }],
            listeners:
                    {
                        'rowdblclick': function(gridaktif, rowIndex, e)
                        {
                            isDbClick = true;

                            editor.startEditing((editor.getCurrentRowIndex()));
                            var coa = gridaktif.getStore().getAt(rowIndex);
                            var coa_kode = coa.get('coa_kode');
                            var coa_name = coa.get('coa_nama');
                            Ext.getCmp('coa_kode').setValue(coa_kode);
                            Ext.getCmp('coa_nama').setValue(coa_name);

                            coawindow.close();

                        }
                    }



        })

        var coawindow = new Ext.Window({
            title: 'COA List',
            id: 'coa-list-window',
            layout: 'absolute',
            minHeight: 200,
            stateful: false,
            modal: true,
            resizable: false,
            closeAction: 'close',
            width: 432,
            height: 330,
            loadMask: true,
            items: [
                coagrid
            ]

        })

        coawindow.show();
    }

    Ext.onReady(function() {

        Ext.QuickTips.init();

        Ext.form.Field.prototype.msgTarget = 'side';

        var formpanel = new Ext.form.FormPanel({
            title: 'PPN Reimbursement Journal',
            id: 'form-insert-journalppnrem',
            renderTo: 'insert_journalppnrem',
            frame: true,
            width: 400,
            stat: 'new',
            items: [
                {
                    xtype: 'tranoselector',
                    id: 'tranos',
                    Selectid: 'trano_text',
                    width: 150,
                    Tranotype: ['PPNSET'],
                    Disabletype: true,
                    fieldLabel: 'PPN Reimbursement Number',
                    callbackFunc: function(trano)
                    {
                        Ext.Ajax.request({
                            url: '/default/home/cekfinal',
                            method: 'POST',
                            params: {
                                trano: trano
                            },
                            success: function(result, request) {
                                var returnData = Ext.util.JSON.decode(result.responseText);
                                if (returnData.success) {
                                    Ext.Ajax.request({
                                        url: '/default/home/cekjurnalsettle',
                                        method: 'POST',
                                        params: {
                                            trano: trano
                                        },
                                        success: function(result, request) {
                                            var returnData = Ext.util.JSON.decode(result.responseText);
                                            if (returnData.success) {

                                            }
                                            else
                                            {
                                                Ext.getCmp('tranos').setValue('');
                                                Ext.getCmp('trano_text').setValue('');
                                                Ext.Msg.alert("Error", returnData.msg);
                                                return false;
                                            }
                                        },
                                        failure: function(action) {
                                            if (action.failureType == 'server') {
                                                obj = Ext.util.JSON.decode(action.response.responseText);
                                                Ext.Msg.alert('Error!', obj.errors.reason);
                                            }
                                        }
                                    });
                                }
                                else
                                {
                                    Ext.getCmp('tranos').setValue('');
                                    Ext.getCmp('trano_text').setValue('');
                                    Ext.Msg.alert("Error", returnData.msg);
                                    return false;
                                }
                            },
                            failure: function(action) {
                                if (action.failureType == 'server') {
                                    obj = Ext.util.JSON.decode(action.response.responseText);
                                    Ext.Msg.alert('Error!', obj.errors.reason);
                                }
                            }
                        });
                    }
                },
                {
                    xtype: 'textfield',
                    id: 'perkode',
                    width: 130,
                    fieldLabel: 'Periode',
                    value: '<?= $this->perkode ?>',
                    readOnly: true,
                    hidden: true
                },
                {
                    xtype: 'textfield',
                    id: 'year',
                    width: 130,
                    fieldLabel: 'Year',
                    value: '<?= $this->year ?>',
                    readOnly: true,
                    hidden: true
                },
                {
                    xtype: 'textfield',
                    id: 'val_kode',
                    width: 130,
                    fieldLabel: '',
                    hidden: true,
                },
                {
                    xtype: 'textfield',
                    id: 'prj_kode',
                    width: 130,
                    fieldLabel: '',
                    hidden: true,
                },
                {
                    xtype: 'textfield',
                    id: 'sit_kode',
                    width: 130,
                    fieldLabel: '',
                    hidden: true,
                }
            ],
            buttons: [{
                    text: 'Add to Grid',
                    iconCls: 'silk-add',
                    handler: function(btn, ev) {

                        if (Ext.getCmp('form-insert-journalppnrem').stat == 'new')
                        {
                            var trano = Ext.getCmp('trano_text').getValue();
                            if (trano == '' || trano == undefined)
                                return false;

                            Ext.Ajax.request({
                                url: '/finance/jurnalppnremsettlement/getdetailppnrem',
                                method: 'POST',
                                params: {trano: trano},
                                success: function(result, request) {

                                    var returnData = Ext.util.JSON.decode(result.responseText);
                                    if (returnData.ppnrem.length < 0) {
                                        Ext.Msg.alert('No Data is found!');
                                        return false;
                                    }
                                    var e = new jurnalppnremlist({
                                        ref_number: returnData.ppnrem[0].trano,
                                        debit: returnData.ppnrem[0].total,
                                        credit: 0,
                                        job_number: returnData.ppnrem[0].prj_kode + '.000.0',
                                        type: 'debit',
                                        coa_kode: ''
                                    });
                                    storejurnalppnrem.add(e);


                                    var e = new jurnalppnremlist({
                                        ref_number: returnData.ppnrem[0].trano,
                                        credit: returnData.ppnrem[0].total,
                                        debit: 0,
                                        job_number: returnData.ppnrem[0].prj_kode + '.000.0',
                                        type: 'credit',
                                        coa_kode: ''
                                    });
                                    storejurnalppnrem.add(e);
                                    Ext.getCmp('val_kode').setValue(returnData.ppnrem[0].val_kode);
                                    Ext.getCmp('prj_kode').setValue(returnData.ppnrem[0].prj_kode);
                                    Ext.getCmp('sit_kode').setValue(returnData.ppnrem[0].sit_kode);



                                    hitungTotal();
                                },
                                failure: function(action) {
                                    if (action.failureType == 'server') {
                                        obj = Ext.util.JSON.decode(action.response.responseText);
                                        Ext.Msg.alert('Error!', obj.errors.reason);
                                    } else {
                                        Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                                    }
                                }

                            })


                        }
                        hitungTotal();
                        Ext.getCmp('form-insert-journalppnrem').stat = '';
                        Ext.getCmp('grid-jurnalppnrem').getView().refresh();

                    }
                }]

        })

        var gridpanel = new Ext.grid.GridPanel({
            store: storejurnalppnrem,
            renderTo: 'grid_jurnalppnrem',
            id: 'grid-jurnalppnrem',
            frame: true,
            width: 800,
            height: 200,
            style: 'margin:10 10 10 10',
            viewConfig: {
                forceFit: true
            },
            plugins: [editor],
            columns: [new Ext.grid.RowNumberer(), {
                    header: 'Referrence',
                    dataIndex: 'ref_number',
                    sortable: true
                }, {
                    header: 'COA Debit',
                    dataIndex: 'coa_kode',
                    width: 100,
                    sortable: true,
                    editor: {
                        xtype: 'trigger',
                        id: 'coa_kode',
                        triggerClass: 'teropong',
                        editable: false,
                        allowBlank: false,
                        width: 100,
                        onTriggerClick: function()
                        {
                            editor.stopEditing();
                            editor.hide();
                            showcoalist('debet');
                        }

                    }
                }, {
                    header: 'COA Name',
                    dataIndex: 'coa_nama',
                    sortable: true,
                    editor: {
                        xtype: 'textfield',
                        id: 'coa_nama',
                        width: 100,
                        allowBlank: false,
                        readOnly: true
                    }
                }, {
                    header: 'Debit',
                    dataIndex: 'debit',
                    sortable: true,
                    align: 'right',
                    renderer: function(v) {
                        return v ? Ext.util.Format.number(v, '0,0.00') : '0.00';
                    }
                }, {
                    header: 'Credit',
                    dataIndex: 'credit',
                    sortable: true,
                    align: 'right',
                    renderer: function(v) {
                        return v ? Ext.util.Format.number(v, '0,0.00') : '0.00';
                    }
                }, {
                    header: 'Job Number',
                    dataIndex: 'job_number',
                    sortable: true,
                    editor: {
                        xtype: 'textfield',
                        id: 'job_number',
                        width: 100
                    }
                }
            ],
            tbar: [
                {
                    iconCls: 'silk-printer',
                    text: 'Print This Journal',
                    printTitle: 'ASF Journal',
                    handler: function(btn, e) {
                        Ext.ux.Printer.print({
                            component: gridpanel,
                            printTitle: this.printTitle,
//                            additionalHTML: this.additionalHTML
                        });
                    }
                }
            ],
            buttons: [{
                    text: 'Reset',
                    style: 'margin-right:26px;',
                    handler: function(btn, ev)
                    {
                        storejurnalppnrem.removeAll();
                        Ext.getCmp('form-insert-journalppnrem').stat = 'new';
                        Ext.getCmp('grid-jurnalppnrem').getView().refresh();
                        Ext.getCmp('tranos').setValue('');
                        Ext.getCmp('trano_text').setValue('');
                        Ext.getCmp('val_kode').setValue('');
                        Ext.getCmp('prj_kode').setValue('');
                        Ext.getCmp('sit_kode').setValue('');
                        Ext.getCmp('grid-jurnalppnrem').getView().refresh();
                        hitungTotal();
                    }
                },
                {
                    text: 'Submit',
                    iconCls: 'icon-save',
                    handler: function(btn, ev)
                    {
                        var totdebit = parseFloat(totDebit.toString().replace(/\$|\,/g, ''));
                        var totcredit = parseFloat(totCredit.toString().replace(/\$|\,/g, ''));

                        if (!moneycomp(totdebit, '==', totcredit))
                        {
                            Ext.MessageBox.show({
                                title: 'Error',
                                msg: 'Sorry, Debit and Credit Total Must be Balance',
                                buttons: Ext.MessageBox.OK,
                                icon: Ext.MessageBox.ERROR
                            });
                            return false;
                        }

                        Ext.MessageBox.confirm('Confirm', 'Are you sure want this action ?', function(btn) {


                            if (btn == 'yes')
                            {
                                var gridstore = Ext.getCmp('grid-jurnalppnrem').getStore();
                                var json = '';
                                var totaldata = 0;
                                var valid = 0;


                                gridstore.each(function(store) {
                                    json += Ext.util.JSON.encode(store.data) + ',';
                                    if (store.data.coa_kode == '')
                                        valid++;
                                })

                                if (valid > 0) {
                                    Ext.MessageBox.show({
                                        title: 'Error',
                                        msg: 'Please fill in all COA column',
                                        buttons: Ext.MessageBox.OK,
                                        icon: Ext.MessageBox.ERROR
                                    });
                                    return false;
                                }
                                json = '[' + json.substring(0, json.length - 1) + ']';
                                var params = {
                                    json: json,
                                    perkode: Ext.getCmp('perkode').getValue(),
                                    year: Ext.getCmp('year').getValue(),
                                    val_kode: Ext.getCmp('val_kode').getValue(),
                                    prj_kode: Ext.getCmp('prj_kode').getValue(),
                                    sit_kode: Ext.getCmp('sit_kode').getValue()
                                }

                                Ext.Ajax.request({
                                    url: '/finance/jurnalppnremsettlement/doinsertjurnalppnremsettle',
                                    method: 'POST',
                                    params: params,
                                    success: function(result) {
                                        obj = Ext.util.JSON.decode(result.responseText);

                                        if (obj.success)
                                        {
                                            Ext.Msg.alert('Message', 'Success, Data has been saved<br>Trano : <b>' + obj.trano + '</b>');
                                            Ext.getCmp('form-insert-journalppnrem').getForm().reset();
                                            storejurnalppnrem.removeAll();
                                            Ext.getCmp('form-insert-journalppnrem').stat = 'new';
                                            Ext.getCmp('grid-jurnalppnrem').getView().refresh();
                                            Ext.getCmp('tranos').setValue('');
                                            Ext.getCmp('trano_text').setValue('');
                                            Ext.getCmp('val_kode').setValue('');
                                            Ext.getCmp('prj_kode').setValue('');
                                            Ext.getCmp('sit_kode').setValue('');
                                            Ext.getCmp('grid-jurnalppnrem').getView().refresh();
                                            hitungTotal();

                                        } else
                                        {
                                            Ext.Msg.alert('Error', obj.msg);
                                        }
                                    },
                                    failure: function(action) {
                                        if (action.failureType == 'server') {
                                            obj = Ext.util.JSON.decode(action.response.responseText);
                                            Ext.Msg.alert('Error!', obj.errors.reason);
                                        } else {
                                            Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                                        }
                                    }

                                })
                            }

                        })

                    }
                }], bbar: new Ext.Toolbar({
                id: 'total-bbar',
                style: "text-align:right;",
                items: [{
                        xtype: 'label',
                        id: 'debittotal',
                        style: 'color:red;font-weight:bold;margin-right:40px;font-size:12'
                    },
                    {
                        xtype: 'label',
                        id: 'credittotal',
                        style: 'color:red;font-weight:bold;font-size:12;margin-right:80px'
                    }
                ],
                layout: 'fit'
            }),
            listeners: {
                'rowdblclick': function(g, r, e)
                {
//                    edit(r);

                },
                'afterrender': function(t)
                {
//                    hitungTotal();
                }
            }

        })




    })

</script>
<div id="print" style="float:right;margin-left: 50px"></div>
<div id="insert_journalppnrem"></div>
<div id="grid_jurnalppnrem"></div>