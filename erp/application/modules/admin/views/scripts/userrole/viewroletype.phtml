<script type="text/javascript">

var proxy = new Ext.data.HttpProxy({
    api: {
        read : '/admin/userrole/listroletype',
        create : '/admin/userrole/addroletype',
        update: '/admin/userrole/updateroletype',
        destroy: '/admin/userrole/deleteroletype'
    }
});

var reader = new Ext.data.JsonReader({
    totalProperty: 'count',
    successProperty: 'success',
    idProperty: 'id_role',
    messageProperty: 'message',
    root: 'posts'  // <-- New "messageProperty" meta-data
}, [
    {name: 'id_role'},
    {name: 'display_name'},
    {name: 'role_name'},
    {name: 'active'}
]);


// The new DataWriter component.
var writer = new Ext.data.JsonWriter({
    encode: true,
    writeAllFields: true
});

var store = new Ext.data.Store({
    id: 'user-store',
    proxy: proxy,
    reader: reader,
    writer: writer,  // <-- plug a DataWriter into the store just as you would a Reader
    autoSave: true // <-- false would delay executing create, update, destroy requests until specifically told to do so with some [save] buton.
});

// load the store immeditately
store.load();



Ext.apply(Ext.form.VTypes, {
	'numeric': function(){
		
			/*****************************************************************
			DESCRIPTION: Validates that a string contains only valid numbers.
			PARAMETERS:
			   strValue - String to be tested for validity
			RETURNS:
			   True if valid, otherwise false.
			******************************************************************/
			  var objRegExp  =  /(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/;
			  return function(strValue){
				  //check for numeric characters
				  return objRegExp.test(strValue);
			  };
	}(),
	'numericText': 'Only numbers are allowed'
});

// A new generic text field
var textField =  new Ext.form.TextField();

// Let's pretend we rendered our grid-columns with meta-data from our ORM framework.
var userColumns =  [
    new Ext.grid.RowNumberer(),
    {header: "ID Role", width: 40, sortable: true, dataIndex: 'id_role'},
    {header: "Role Name", sortable: true, dataIndex: 'display_name'},
    {header: "Role Type", sortable: true, dataIndex: 'role_name'},
    {header: "Status", width: 40, sortable: true, dataIndex: 'active',renderer : function(v, params, data){
    	var status;
    	if (v == '1')
    	{
    		status = '<img src="/images/icons/fam/accept.png" />';
    	}
    	else if (v == '' || v == undefined || v == '0')
    	{
    		status = '<img src="/images/icons/fam/action_stop.gif" />';
    	}
    	return status;
    }}
];



    searchRoleType = function(){
        var userName = Ext.getCmp('roletype-text').getValue();
    	store.proxy.setApi('read','/admin/userrole/listroletype/name/' + userName);
    	Ext.getCmp('user-grids').getStore().reload();
    };

    refreshGridRole = function(){
    	store.proxy.setApi('read','/admin/userrole/listroletype');
    	Ext.getCmp('user-grids').getStore().reload();
    };

    var datas = new Ext.data.SimpleStore({
	    fields:['type','name']
	            ,data:[['project','Project'],['procurement','Procurement'],['sitac','Sitac'],['sales','Sales'],['humanresource','Human Resource'],['it','IT'],['finance','Finance'],['manager','Manager']]
	        });

	
userForm = Ext.extend(Ext.form.FormPanel, {
    iconCls: 'silk-user',
    frame: true,
    style: 'margin-top: 10px',
    labelAlign: 'right',
    title: 'Add Role -- All Fields are Required',
    width: 400,
    defaults: {
        anchor: '100%'
    }
,
    initComponent : function() {
        this.items = this.buildForm();
        this.buttons = this.buildUI();
        this.addEvents({
            create : true
        });
        userForm.superclass.initComponent.call(this);
    },
//
    buildForm : function() {
        return [
			{fieldLabel: 'ID Role',id:'id_role',name: 'id_role', xtype: 'textfield',vtype: 'numeric', allowBlank: false},    
			{fieldLabel: 'Role Name',id:'display_name',name: 'display_name', xtype: 'textfield', allowBlank: false},
			{fieldLabel: 'Role Type', 
	             name: 'role_name',
	             hiddenName : 'role_name',
	             xtype: 'combo',
	             triggerAction: 'all',
	             mode: 'local',
	             displayField: 'name',
	             valueField: 'type',
	             store: datas
	             },
			{xtype: 'checkbox'
					,id:'active' 
		            ,name : 'active'
		            ,fieldLabel: 'Enabled'
		            ,trueText: '1'
		            ,falseText: '0'}
        ];
    },
//
//    /**
//     * buildUI
//     * @private
//     */
    buildUI: function(){
        return [{
            text: 'Save',
            iconCls: 'icon-save',
            handler: this.onUpdate,
            scope: this
        }, {
            text: 'Create',
            iconCls: 'silk-user-add',
            handler: this.onCreate,
            scope: this
        }, {
            text: 'Reset',
            handler: function(btn, ev){
                this.getForm().reset();
            },
            scope: this
        }];
    },
    loadRecord : function(rec) {
        this.record = rec;
        this.getForm().loadRecord(rec);
    },
    onUpdate : function(btn, ev) {
        if (this.record == null) {
            return;
        }
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid.");
            return false;
        }
        this.getForm().updateRecord(this.record);
    },
    onCreate : function(btn, ev) {
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid");
            return false;
        }
        var newID = Ext.getCmp('id_role').getValue();
    	var isUnique = true;
    	Ext.getCmp('user-grids').store.each(function(store){  
    		if (store.id == newID)
    		{
    			App.setAlert(false, "ID Role is exists!");
    			isUnique = false;  
    		}
    	});
    	if (isUnique)
    	{
        	this.fireEvent('create', this, this.getForm().getValues());
        	this.getForm().reset();
    	}
    },
    onReset : function(btn, ev) {
        this.fireEvent('update', this, this.getForm().getValues());
        this.getForm().reset();
    }
});

/**
 * App.user.Grid
 * A typical EditorGridPanel extension.
 */
userGrid = Ext.extend(Ext.grid.EditorGridPanel, {
	id:'user-grids',
    iconCls: 'silk-grid',
    frame: true,
    height: 450,
    width: 500,
    style: 'margin-top: 10px',
    trackMouseOver: true,
	
    initComponent : function() {
		this.viewConfig = {
            forceFit: true
        };
        
		this.relayEvents(this.store, ['destroy', 'save', 'update']);

        this.tbar = this.buildTopToolbar();
        userGrid.superclass.initComponent.call(this);
    },

    /**
     * buildTopToolbar
     */
    buildTopToolbar : function() {
        return [{
		            text: 'Delete',
		            iconCls: 'silk-delete',
		            handler: this.onDelete,
		            scope: this
		        },
		        '-',
                {
					text: 'Role Type Name',
					xtype:'label',
				    style: 'margin-right: 5px'
                },
                {
					xtype: 'textfield',
					id: 'roletype-text'
                },
                {
                    text: 'Search',
                    iconCls: 'silk-table-refresh',
                    handler: searchRoleType,
                    scope: this
                },
                '-',
                {
                    text: 'Refresh',
                    iconCls: 'silk-table-refresh',
                    handler: refreshGridRole,
                    scope: this
                }
                ];
    },
    onSave : function(btn, ev) {
        this.store.save();
    },
    onDelete : function(btn, ev) {
        var index = this.getSelectionModel().getSelectedCell();
        if (!index) {
            return false;
        }
        var rec = this.store.getAt(index[0]);
        this.store.remove(rec);
    }
    

});


Ext.onReady(function() {
    Ext.QuickTips.init();
    var userForms = new userForm({
        renderTo: 'user-form',
        listeners: {
            create : function(fpanel, data) {
				var rec = new userGrids.store.recordType(data);
                userGrids.store.insert(0, rec);
    		}
        }
    });



	
    var userGrids = new userGrid({
        renderTo: 'user-grid',
        store: store,
        columns : userColumns,
        listeners: {
        	rowclick: function(g, index, ev) {
                var rec = g.store.getAt(index);
                userForms.loadRecord(rec);
            }
        }
    });


});
</script>

 <div id="user-form"></div>
 <div id="user-grid"></div>
 
