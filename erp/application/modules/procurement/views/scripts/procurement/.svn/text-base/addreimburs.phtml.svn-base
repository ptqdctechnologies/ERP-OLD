<script type="text/javascript">

var filelist = Ext.data.Record.create([ {
            name: 'id',
            type: 'integer'
        },{
            name: 'filename',
            type: 'string'
        },{
            name: 'savename',
            type: 'string'
        },{
            name: 'status',
            type: 'string'
        },{
            name: 'path',
            type: 'string'
    }]);

    var storeFile = new Ext.data.Store({
        reader: new Ext.data.JsonReader({fields: filelist})
    });

    function deleteFile()
    {
        var rec = Ext.getCmp('files-grid').getSelectionModel().getSelections();
        theFile = storeFile.getAt(storeFile.findExact('id', rec[0].data['id']));

        if (theFile != undefined)
        {
            Ext.MessageBox.confirm('Confirm', 'Are you sure want to delete this file?', function(btn){
                if (btn== 'yes')
                {
                    if (theFile.data['status'] == 'new')
                        var params = {filename:theFile.data['savename']};
                        Ext.Ajax.request({
                            url: '/procurement/procurement/deletefile',
                            method:'POST',
                            success: function(result, request){
                                var returnData = Ext.util.JSON.decode(result.responseText);
                                if (returnData.success)
                                {
                                    storeFile.remove(theFile);
                                    Ext.getCmp('files-grid').getView().refresh();
                                }
                                else
                                {
                                    Ext.Msg.alert('Error!', returnData.msg);
                                    return false;
                                }
                            },
                            failure:function( action){
                            if(action.failureType == 'server'){
                              obj = Ext.util.JSON.decode(action.response.responseText);
                              Ext.Msg.alert('Error!', obj.errors.reason);
                            }else{
                              Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                            }
                            },
                            params: params
                        });
                }
            });
        }
    };





var ori;

var proxy = new Ext.data.HttpProxy({
   url : '/default/home/getboq3summary'
});

showAddReimburs = function(){
	    myPanel = Ext.getCmp('abs-budget-panel');
	    myPanel.body.load({
	        url: '/procurement/procurement/addarf',
	        scripts : true
        });
	};

var boq3list = Ext.data.Record.create ([
							             {name: 'id', type: 'integer'},
                                        {name: 'workid', type: 'string'},
                                        {name: 'workname', type: 'string'},
                                        {name: 'kode_brg', type: 'string'},
                                        {name: 'nama_brg', type: 'string'},
                                        {name: 'qty', type: 'float'},
                                        {name: 'price', type: 'float'},
                                        {name: 'hargaIDR', type: 'float'},
                                        {name: 'hargaUSD', type: 'float'},
                                        {name: 'val_kode', type: 'string'},
                                        {name: 'totalARF', type: 'float'},
                                        {name: 'totalqtyARF', type: 'float'},
                                        {name: 'totalQtyPO', type: 'float'},
                                        {name: 'totalPO', type: 'float'},
                                        {name: 'totalqtyASFCancel', type: 'float'},
                                        {name: 'totalASFCancel', type: 'float'},
                                        {name: 'totalPrice', type: 'float'},

                                        {name: 'totalPoArfAsfc', type: 'float'},
                                        {name: 'uom', type: 'string'},
                                        {name: 'cfs_kode', type: 'string'},
                                        {name: 'cfs_nama', type: 'string'}
							         ]);

var reimburslist = Ext.data.Record.create([{
    name: 'workid',
    type: 'string'
}, {
    name: 'trano',
    type: 'string'
},{
    name: 'workname',
    type: 'string'
}, {
    name: 'prj_kode',
    type: 'string'
},{
    name: 'prj_nama',
    type: 'string'
},{
    name: 'sit_kode',
    type: 'string'
},{
    name: 'sit_nama',
    type: 'string'
},{
    name: 'nama_brg',
    type: 'string'
},{
    name: 'kode_brg',
    type: 'string'
},{
    name: 'tgl',
    type: 'date',
    dateFormat: 'Y-m-d'
},{
    name: 'qty',
    type: 'string'
},{
    name: 'id',
    type: 'string'
},{
    name: 'ket',
    type: 'string'
},{
    name: 'val_kode',
    type: 'string'
},{
    name: 'status',
    type: 'string'
},{
    name: 'net_act',
    type: 'string'
},{
    name: 'urut',
    type: 'integer'
},{
    name: 'harga',
    type: 'float'
},{
    name: 'uom',
    type: 'string'
}]);

var storeReimburs = new Ext.data.Store({
    reader: new Ext.data.JsonReader({fields: reimburslist})
});


var proxy2 = new Ext.data.HttpProxy({
    api: {
        create : '/procurement/procurement/insertarf',
       //update: '/procurement/procurement/list/type/prd',
        destroy: '/procurement/procurement/list/type/arfd'
         }
});

var reader2 = new Ext.data.JsonReader({
    totalProperty: 'count',
    idProperty: 'trano',
    root: 'posts'
}, [
    {name: 'trano'}
]);

var reader = new Ext.data.JsonReader({
    totalProperty: 'count',
//    idProperty: 'id',
    root: 'posts'
}, [
    {name: 'id', type: 'integer'},
    {name: 'workid', type: 'string'},
    {name: 'workname', type: 'string'},
    {name: 'kode_brg', type: 'string'},
    {name: 'nama_brg', type: 'string'},
    {name: 'qty', type: 'float'},
    {name: 'price', type: 'float'},
    {name: 'hargaIDR', type: 'float'},
    {name: 'hargaUSD', type: 'float'},
    {name: 'val_kode', type: 'string'},
    {name: 'totalARF', type: 'float'},
    {name: 'totalqtyARF', type: 'float'},
    {name: 'totalQtyPO', type: 'float'},
    {name: 'totalPO', type: 'float'},
    {name: 'totalqtyASFCancel', type: 'float'},
    {name: 'totalASFCancel', type: 'float'},
    {name: 'totalPrice', type: 'float'},

    {name: 'totalPoArfAsfc', type: 'float'},
    {name: 'uom', type: 'string'},
    {name: 'cfs_kode', type: 'string'},
    {name: 'cfs_nama', type: 'string'}
]);

var writer = new Ext.data.JsonWriter({
    encode: true,
    writeAllFields: false
});

function showManagerList()
{
    var columns = [
                    {header:'Uid',width:100,sortable:true,dataIndex:'uid'},
                    {header:'Manager Name',width:150,sortable:true,dataIndex:'nama'},
                ];

    data =  [

            {name: 'uid', mapping: 'uid'},
            {name: 'nama', mapping: 'nama'},
            ];


    urlJson = '/default/manager/list';

    primaryKey = 'uid';
    Pk = primaryKey;
    widthGrid = 380;
    heightGrid = 250;

    var stores = new Ext.data.Store({
        proxy:new Ext.data.HttpProxy({
        url: urlJson
         }),
            reader: new Ext.data.JsonReader({
        root: 'posts',
        totalProperty: 'count'
    },data)
        });

    yAxis=100;
    grids = function()
    {
        grids.superclass.constructor.call(this, {
        store: stores,
        columns: columns,
        x:0,
        y:yAxis,
        id:primaryKey+'_grid',
        loadMask: true,
        bbar:[ new Ext.PagingToolbar({
            pageSize: 100,
            store: stores,
            displayInfo: true,
            displayMsg: 'Displaying data {0} - {1} of {2}',
            emptyMsg: "No data to display"
        })],
        height:heightGrid,
        width:widthGrid,
        listeners: {
            'rowdblclick': function(g, rowIndex, e){
				        	objectName = 'uid';
				            txtBoxChange = 'mgr_kode_text';
				            closeForm = true;
				            formId = 'a-form-panel-mgr_kode_button';
				            var uid = g.getStore().getAt(rowIndex).get(objectName);
				           newUrl = '/default/manager/dblclick/name/uid/data/' + uid;
				            prox = 'trano_proxy';
				            gri = 'trano_grid';

				            var record = g.getStore().getAt(rowIndex).get(objectName);
				            var record2 = g.getStore().getAt(rowIndex).get("nama");
                            Ext.getCmp('mgr_kode_text').setValue(record);



                            if (Ext.getCmp('mgr_nama_text') != undefined)
                            {
                            	Ext.getCmp('mgr_nama_text').setValue(record2);
                            }


                            if (closeForm)
                            {
                                Ext.getCmp(formId).close();
                            }

                            window.setTimeout(function(){
                                    isDblClick = false;
                            }, 0);
                    }
            }
    });
    }
    stores.load();

    Ext.extend(grids, Ext.grid.GridPanel);
    Ext.extend(txtboks,Ext.form.TextField);//PR
    searchMgrKode = function(field,e){
        newUrl = '/default/manager/dblclick/name/uid/data/' + field.getValue();    prox = Pk+'_proxy';
        gri = Pk+'_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy({
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();

    }
    searchMgrName = function(field,e){
        newUrl = '/default/manager/dblclick/name/Name/data/' + field.getValue();    prox = Pk+'_proxy';
        gri = Pk+'_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy({
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();
    }

    var aForm =  new Ext.Window({
        id: 'a-form-panel-mgr_kode_button',
        layout: 'absolute',
        minWidth: 300,
        minHeight: 200,
        stateful:false,
        modal: true,
        resizable: false,
        width: 400,
        height: 400,
        items : [
            {
            x: 10,
            y: 12,
            xtype: 'label',
            text: 'Manager Uid:'
            },
             new txtboks(90,10,80,'manager_code',searchMgrKode),
             {
            x: 180,
            y: 12,
            xtype: 'label',
            text: 'Manager Name:'
            },
            new txtboks(260,10,80,'manager_name',searchMgrName),
             new grids('manager_list')
        ]

      });
      aForm.title = 'Choose Manager';
      aForm.show();
}


function showUserList()
{
    var columns = [
                    {header:'Id',width:35,sortable:true,dataIndex:'id'},
                    {header:'User Login',width:65,sortable:true,dataIndex:'uid'},
                    {header:'User Name',width:150,sortable:true,dataIndex:'name'},
                ];

    data =  [
            {name: 'id', mapping: 'id'},
            {name: 'uid', mapping: 'uid'},
            {name: 'name', mapping: 'name'},
            ];


    urlJson = '/default/user/list';

    primaryKey = 'id';
    Pk = primaryKey;
    widthGrid = 380;
    heightGrid = 250;

    var stores = new Ext.data.Store({
        proxy:new Ext.data.HttpProxy({
        url: urlJson
         }),
            reader: new Ext.data.JsonReader({
        root: 'posts',
        totalProperty: 'count'
    },data)
        });

    yAxis=100;
    grids = function()
    {
        grids.superclass.constructor.call(this, {
        store: stores,
        columns: columns,
        x:0,
        y:yAxis,
        id:primaryKey+'_grid',
        loadMask: true,
        bbar:[ new Ext.PagingToolbar({
            pageSize: 100,
            store: stores,
            displayInfo: true,
            displayMsg: 'Displaying data {0} - {1} of {2}',
            emptyMsg: "No data to display"
        })],
        height:heightGrid,
        width:widthGrid,
        listeners: {
            'rowdblclick': function(g, rowIndex, e){
				        	objectName = 'id';
				            txtBoxChange = 'mgr_kode_text';
				            closeForm = true;
				            formId = 'a-form-panel-user_button';
				            var id = g.getStore().getAt(rowIndex).get(objectName);
				            newUrl = '/default/user/listByParams/name/id/data/' + id;
				            prox = 'trano_proxy';
				            gri = 'trano_grid';

				            var record = g.getStore().getAt(rowIndex).get("uid");
				            var record2 = g.getStore().getAt(rowIndex).get("name");
                            Ext.getCmp('fin_kode_text').setValue(record);



                            if (Ext.getCmp('fin_nama_text') != undefined)
                            {
                            	Ext.getCmp('fin_nama_text').setValue(record2);
                            }


                            if (closeForm)
                            {
                                Ext.getCmp(formId).close();
                            }

                            window.setTimeout(function(){
                                    isDblClick = false;
                            }, 0);
                    }
            }
    });
    }
    stores.load();

    Ext.extend(grids, Ext.grid.GridPanel);
    Ext.extend(txtboks,Ext.form.TextField);//PR
    searchUserLogin = function(field,e){
        newUrl = '/default/user/listByParams/name/master_login/data/' + field.getValue();    prox = Pk+'_proxy';
        gri = Pk+'_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy({
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();

    }
    searchUserName = function(field,e){
        newUrl = '/default/user/listByParams/name/Name/data/' + field.getValue();    prox = Pk+'_proxy';
        gri = Pk+'_grid';
        proxies = Ext.getCmp(gri).getStore();
        proxies.proxy = new Ext.data.HttpProxy({
            url: newUrl
             });
        Ext.getCmp(gri).getStore().reload();
    }

    var aForm =  new Ext.Window({
        id: 'a-form-panel-user_button',
        layout: 'absolute',
        minWidth: 300,
        minHeight: 200,
        stateful:false,
        modal: true,
        resizable: false,
        width: 400,
        height: 400,
        items : [
            {
            x: 10,
            y: 12,
            xtype: 'label',
            text: 'User Login:'
            },
             new txtboks(100,10,80,'master_login',searchUserLogin),
             {
            x: 190,
            y: 12,
            xtype: 'label',
            text: 'User Name:'
            },
            new txtboks(260,10,80,'Name',searchUserName),
             new grids('user_list')
        ]

      });
      aForm.title = 'Choose User';
      aForm.show();
}

//** Number **//
Ext.apply(Ext.form.VTypes, {
	'numeric': function(){

			/*****************************************************************
			DESCRIPTION: Validates that a string contains only valid numbers.
			PARAMETERS:
			   strValue - String to be tested for validity
			RETURNS:
			   True if valid, otherwise false.
			******************************************************************/
			  var objRegExp  =  /(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/;
			  return function(strValue){
				  //check for numeric characters
				  return objRegExp.test(strValue);
			  }
	}(),
	'numericText': 'Only numbers and dot are allowed'
});
//var store3 = new Ext.data.Store({
//    id: 'user3',
//    proxy: proxy3,
//    reader: reader2,
//     listeners: {
//		   'load' : function(stores,records,options) {
//                       var tranoGet = this.getAt(0).data.trano;
//                        Ext.getCmp('trano_text').setValue(tranoGet);
//
//                   }
//     }
//});


var store = new Ext.data.Store({
    id: 'boq3',
    proxy: proxy,
    reader: reader,
    listeners: {
		'load':function(t,r,o)
		{
//			addEditedBoq();
		}
    }
});



// all exception events
Ext.data.DataProxy.addListener('exception', function(proxy, type, action, options, res) {
    if (type === 'remote') {
        Ext.Msg.show({
            title: 'REMOTE EXCEPTION',
            msg: res.message,
            icon: Ext.MessageBox.ERROR,
            buttons: Ext.Msg.OK
        });
    }
});

var ori;

//Start our own function

function getNewID()
{
	//count the max record from origin Store
	var maxRec = store.getTotalCount();
	//filter ARF Store
	storeReimburs.filterBy(function(record,id){
		if (isMscWorkid(record.get('workid')))
		{
			return record.get('workid');
		}
	});
	//count the max record from filtered ARF Store
	var maxRecFilter = storeReimburs.getCount();

	var newID = maxRec + maxRecFilter + 1;

	//Clear filter
	storeReimburs.clearFilter();
	return newID;
}

function getARFRecord(workid,kode_brg,isEdit)
{
	//Clear filter
	storeReimburs.clearFilter();
	storeReimburs.filterBy(function(record,id){
		if (!isEdit)
		{
			if (record.get('workid') == workid.toString() && record.get('kode_brg') == kode_brg.toString())
			{
				return record.get('workid');
			}
		}
		else
		{
			if (record.get('workid') == workid.toString() && (record.get('status') != '' || record.get('status') != undefined))
			{
				return record.get('workid');
			}
		}
	});
	if (storeReimburs.getCount() > 0)
	{
		var rec = storeReimburs.getAt(0);
	}

	storeReimburs.clearFilter();
	return rec;
}

function getOriRecordForARF(workid)
{
	//Clear filter
	store.clearFilter();
	store.filterBy(function(record,id){
			return record.get('workid') == workid;
	});
	if (store.getCount() > 0)
	{
		var rec = store.getAt(0);
	}

	store.clearFilter();
	return rec;
}


function clearButton()
{
	Ext.getCmp('cancel-to-arf').setText('Cancel Add');
//	Ext.getCmp('cancel-to-arf').disable();
	Ext.getCmp('save-to-arf').setText('Add to REM List(Cart)');
// 	Ext.getCmp('save-to-arf').disable();
}

function refreshGrid()
{
	Ext.getCmp('arf-grid').enable();
    Ext.getCmp('arf-grid').getSelectionModel().clearSelections();
    Ext.getCmp('arf-grid').getView().refresh();
}

var getDetail =
{
	ARF: function (workid,kode_brg)
	{
		var prjKode = Ext.getCmp('prj_kode_text').getValue();
		var sitKode = Ext.getCmp('sit_kode_text').getValue();
		Ext.Ajax.request({
			scope: this,
			results: 0,
	        url: '/default/home/getbarangdetail/type/ARF/prj_kode/' + prjKode + '/sit_kode/' + sitKode + '/workid/' + workid + '/kode_brg/' + kode_brg,
	        method:'POST',
	        success: function(result, request){
	        	   var returnData = Ext.util.JSON.decode(result.responseText);
					if( returnData.success) {
						this.results = returnData.qty;
					}
				}
			,
	    	failure:function( action){
	      	if(action.failureType == 'server'){
	          obj = Ext.util.JSON.decode(action.response.responseText);
	          Ext.Msg.alert('Error!', obj.errors.reason);
	      	}
	      	}
	    });

	}
};

function clearARFForm()
{
	var teks = Ext.getCmp('arf-form').findByType('textfield');
    Ext.each(teks, function (t, index){
			t.setValue('');
        });
    if (document.getElementById('boq3') != undefined)
        document.getElementById('boq3').innerHTML = '0';
    if (document.getElementById('inarf') != undefined)
        document.getElementById('inarf').innerHTML = '0';
    if (document.getElementById('balance') != undefined)
        document.getElementById('balance').innerHTML = '0';
    if (document.getElementById('newbalance') != undefined)
        document.getElementById('newbalance').innerHTML = '0';
	Ext.getCmp('kode_brg_text').disable();
//	Ext.getCmp('price_text').enable();
    Ext.getCmp('totalarf_text').disable();
}

function cekTotal()
{
         var boq3 = document.getElementById('boq3').innerHTML;
         var inarf = document.getElementById('inarf').innerHTML;

         inarf = parseFloat(inarf.toString().replace(/\$|\,/g,''));
         boq3 = parseFloat(boq3.toString().replace(/\$|\,/g,''));
         var unitQty = parseFloat(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,''));
         var newPrice = Ext.getCmp('price_text').getValue().replace(/\$|\,/g,'');
         var newBalance = parseFloat(inarf) + (parseFloat(newPrice) * parseFloat(unitQty));
         if (newBalance > boq3)
         {
//             Ext.getCmp('save-to-arf').disable();
             Ext.MessageBox.show({
                    title: 'Error',
                    msg: 'Request Quantity is over the Budget!',
                    buttons: Ext.MessageBox.OK,
                    icon: Ext.MessageBox.ERROR
                });
             return false;
         }
         else
         {

            return true;
         }
}

function addEditedBoq()
{
	if(store.getCount() > 0 && storeReimburs.getCount() > 0)
	{
	storeReimburs.each(function(stores){

			if(!isMscWorkid(stores.data['workid']))
                {
				var col = store.queryBy(function(record,id){

					 return record.get('workid') == stores.data['workid']  && record.get('kode_brg') == stores.data['kode_brg'];

				});
                }
                else
                {
                    var col = store.queryBy(function(record,id){

					 return record.get('workid') == stores.data['workid'];
                        });
                }


				if (col.length == 0)
				{

                           var lastID = stores.data['id'];
                        if(!isMscWorkid(stores.data['workid']))
                        {
							var e = new boq3list (
    								 {
	    							 'id':lastID,
							         'workid':stores.data['workid'],
						             'workname':stores.data['workname'],
						             'kode_brg':stores.data['kode_brg'],
						             'nama_brg':stores.data['nama_brg'],
						             'qty':stores.data['qty'],
						             'price':stores.data['price'],
						             'hargaIDR':stores.data['hargaIDR'],
						             'hargaUSD':stores.data['hargaUSD'],
						             'val_kode':stores.data['val_kode'],
                                     'totalqtyARF':stores.data['totalqtyARF'],
						             'totalARF':stores.data['totalARF'],
                                     'totalqtyPO':stores.data['totalqtyPO'],
                                     'totalPO':stores.data['totalPO'],
						             'totalqtyASFCancel':stores.data['totalqtyASFCancel'],
                                     'totalASFCancel':stores.data['totalASFCancel'],
						             'totalPrice':stores.data['totalBOQ3'],

                                     'totalPoArfAsfc':stores.data['totalPoArfAsfc'],
						             'uom':stores.data['uom'],
                                     'cfs_kode':stores.data['cfs_kode'],
                                     'cfs_nama':stores.data['cfs_nama']

									});
                        }
                        else
                         {
                             var e = new boq3list (
    								 {
	    							 'id':lastID,
							         'workid':stores.data['workid'],
						             'workname':stores.data['workname'],
						             'kode_brg':'XX',
						             'nama_brg':'others',
						             'qty':stores.data['qty'],
						             'price':stores.data['price'],
						             'hargaIDR':stores.data['hargaIDR'],
						             'hargaUSD':stores.data['hargaUSD'],
						             'val_kode':stores.data['val_kode'],
                                     'totalqtyARF':stores.data['totalqtyARF'],
						             'totalARF':stores.data['totalARF'],
                                     'totalqtyPO':stores.data['totalqtyPO'],
                                     'totalPO':stores.data['totalPO'],
						             'totalqtyASFCancel':stores.data['totalqtyASFCancel'],
                                     'totalASFCancel':stores.data['totalASFCancel'],
						             'totalPrice':stores.data['totalBOQ3'],

                                     'totalPoArfAsfc':stores.data['totalPoArfAsfc'],
						             'uom':'',
                                     'cfs_kode':'',
                                     'cfs_nama':''

									});
                         }
							store.add(e);
							e = undefined;
                            Ext.getCmp('boq3-grid').getView().refresh();
				}
				else
				{

                    col.items[0].data['totalPoArfAsfc'] = stores.data['totalPoArfAsfc'];
                    Ext.getCmp('boq3-grid').getView().refresh();
				}

	});
	}
}

function filterDelete()
{
    //clearFilter
    storeReimburs.clearFilter();

//    storeReimburs.each(function(stores){

        storeReimburs.filterBy(function(record,id) {
        if(record.get('status') == 'delete')
            return false;
        else
            return true;
        });

//    });
}

function checkList()
{
    storeReimburs.clearFilter();
    var gridboq = Ext.getCmp('boq3-grid').getSelectionModel().getSelections();
    if (gridboq[0] != undefined)
	    var oriboq = store.getAt(store.findExact('id', gridboq[0].data['id']));
    else
        return false;

    if(!isMscWorkid(oriboq.data['workid']))
    {
    var col = storeReimburs.queryBy(function(record,id){

         return record.get('workid') == oriboq.data['workid']  && record.get('kode_brg') == oriboq.data['kode_brg'];

    });
    }
    else
    {
        var col = storeReimburs.queryBy(function(record,id){

         return record.get('workid') == oriboq.data['workid'] && record.get('kode_brg') == oriboq.data['kode_brg'];
            });
    }

    if (col.length == 0)
    {
        return false;
    }
    else
    {
        var qty = Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,'');
        var priceArf   =parseFloat(Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''));
        var totalARF   =parseFloat(Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,''));

        var ket = Ext.getCmp('ket-arf').getValue();
        var netAct = Ext.getCmp('net-act').getValue();

        if(col.items[0].data['status'] == 'delete')
        {
            col.items[0].data['qty'] = qty;
            col.items[0].data['harga'] = priceArf;
            col.items[0].data['totalARF'] = totalARF;
            col.items[0].data['status'] = '';
            col.items[0].data['ket'] = ket;
            col.items[0].data['net_act'] = netAct;
            col.items[0].data['totalPoArfAsfc'] = parseFloat(col.items[0].data['totalPoArfAsfc'].toString().replace(/\$|\,/g,'')+parseFloat(totalARF));

            filterDelete();
            return true;

        }
        else
        {
            Ext.MessageBox.show({
            title: 'Error',
            msg: 'Please Use Edit To Update this Item!',
            buttons: Ext.MessageBox.OK,
            icon: Ext.MessageBox.ERROR
            });
            return true;

        }
    }

}

function syncMiscWorkid(inArf)
{
    storeReimburs.clearFilter();

    storeReimburs.each(function(stores){
        if(isMscWorkid(stores.data['workid']))
        {
           stores.data['totalPoArfAsfc'] = inArf;
        }

    })

}

function addToARF(idBoq)
{
    var gridboq = Ext.getCmp('boq3-grid').getSelectionModel().getSelections();
	ori = store.getAt(store.findExact('id', gridboq[0].data['id']));
//	ori = store.getAt(store.findExact('id', idBoq));

	if (ori != undefined)
	{
		Ext.getCmp('save-to-arf').setText('Add to Reimbursable ExpenditureList(Cart)');
		Ext.getCmp('arf-workid').setValue(ori.data['workid']);
		Ext.getCmp('kode_brg_text').setValue(ori.data['kode_brg']);
		Ext.getCmp('nama_brg_text').setValue(ori.data['nama_brg']);
		Ext.getCmp('arf-val').setValue(ori.data['val_kode']);
		Ext.getCmp('uom_text').setValue(ori.data['uom']);
        Ext.getCmp('net-act').setValue(ori.data['cfs_kode']);
		Ext.getCmp('price_text').setValue(CommaFormatted(ori.data['price']));
		Ext.getCmp('kode_brg_text').disable();
        Ext.getCmp('totalarf_text').disable();
		Ext.getCmp('arf-qty').setValue('');

		var piece = ori.data['uom'];
		var valuta = ori.data['val_kode'];

//		Ext.getCmp('save-to-arf').disable();
		Ext.getCmp('arf-grid').disable();
		Ext.getCmp('boq3-grid').disable();
		Ext.getCmp('cancel-to-arf').setText('Cancel Add');
//		Ext.getCmp('cancel-to-arf').enable();

		if (!isMscWorkid(ori.data['workid']))
		{
//			var boq3total = parseFloat(ori.data['totalPrice']);
//	    	var inARF = parseFloat(ori.data['totalPoArfAsfc']);
//	    	var balance = boq3total - inARF;
//			document.getElementById('a-qty').innerHTML = '<table class="tablebox"><tr><td>BOQ3 Total :</td><td align="right"><b id="boq3">' + CommaFormatted(boq3total.toFixed(4)) + ' '  + '</b></td></tr><tr><td>In ARF  + PO Total :</td><td align:"right"><b id="inarf">' + CommaFormatted(inARF.toFixed(4)) + ' ' + '</b></td></tr><tr><td>Balance :</td><td align="right"><b id="balance" style="color:#FF3F7D">' + CommaFormatted(balance.toFixed(4)) + ' ' +  '</b></td></tr><tr><td>New Balance :</td><td align="right"><b id="newbalance" style="color:#FF3F7D">0</b></td></tr></table>';
		}
		else
		{

			Ext.getCmp('kode_brg_text').setValue('');
			Ext.getCmp('nama_brg_text').setValue('');
			Ext.getCmp('price_text').setValue('');
			Ext.getCmp('kode_brg_text').enable();
            Ext.getCmp('totalarf_text').disable();
			Ext.getCmp('price_text').enable();
//	    	var boq3total = parseFloat(ori.data['totalPrice']);
//	    	var inARF = parseFloat(ori.data['totalPoArfAsfc']);
//	    	var balance = boq3total - inARF;
//
//
//			document.getElementById('a-qty').innerHTML = '<table class="tablebox"><tr><td>BOQ3 Total :</td><td align="right"><b id="boq3">' + CommaFormatted(boq3total.toFixed(4)) + ' '  + '</b></td></tr><tr><td>In ARF  + PO Total :</td><td align:"right"><b id="inarf">' + CommaFormatted(inARF.toFixed(4)) + ' ' + '</b></td></tr><tr><td>Balance :</td><td align="right"><b id="balance" style="color:#FF3F7D">' + CommaFormatted(balance.toFixed(4)) + ' ' +  '</b></td></tr><tr><td>New Balance :</td><td align="right"><b id="newbalance" style="color:#FF3F7D">0</b></td></tr></table>';
		}
	}
	else
	{
		Ext.MessageBox.show({
	           title: 'Error',
	           msg: 'Error while fetching data...',
	           buttons: Ext.MessageBox.OK,
	           icon: Ext.MessageBox.ERROR
	       });
  		return false;
	}
}

function insertToARF()
{
//if(cekTotal())
//{
//   if(checkList())
//        {
//             clearARFForm();
//             clearButton();
//             refreshGrid();
//
//        }
//        else
//        {
                var qty = Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,'');
                var gridarf = Ext.getCmp('arf-grid').getSelectionModel().getSelections();

                if (gridarf[0] != undefined)
                {
                    var oriarf = storeReimburs.getAt(storeReimburs.findExact('id', gridarf[0].data['id']));
                }


                var netAct  = Ext.getCmp('net-act').getValue();
                if ( netAct == '')
                {
                    Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please Select Net Act!',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                       });
                    return false;
                }

                var kode_brg = Ext.getCmp('kode_brg_text').getValue();
                if (kode_brg == undefined || kode_brg == '')
                {
                    Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please Select Product!',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                       });
                    return false;
                }

            if (oriarf != undefined)
            {
//                if (oriarf.data['status'] == undefined || oriarf.data['status'] == '')
//                {
//                    Ext.MessageBox.show({
//                           title: 'Error',
//                           msg: 'Please use Edit for updating this Work ID!',
//                           buttons: Ext.MessageBox.OK,
//                           icon: Ext.MessageBox.ERROR
//                       });
//                    return false;
//                }
              //   sini

                    if (oriarf.data['status'] == 'edit')
                    {
//                        if (!isMscWorkid(oriarf.data['workid']))
//                        {

//                            var inpoarfasfc = parseFloat(oriarf.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,''));
//                            var priceArf   =parseFloat(Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''));
//                             var totalARF   =parseFloat(Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,''));
//                            var boq3 = parseFloat(oriarf.data['qty'].toString().replace(/\$|\,/g,''));
//                            var ket = Ext.getCmp('ket-arf').getValue();
//                            var netAct = Ext.getCmp('net-act').getValue();
//
//                            oriarf.data['qty'] = qty;
//                             oriarf.data['priceArf'] = priceArf;
//                             oriarf.data['totalARF'] = totalARF;
//                            oriarf.data['ket'] = ket;
//                            oriarf.data['net_act'] = netAct;
//
//                            qty = parseFloat(qty);
//                            oriarf.data['totalPoArfAsfc'] = inpoarfasfc+totalARF ;

//                            oriarf.data['status'] = '';
//                            addEditedBoq();
//                        }
//                        else
//                        {
//                            var inpoarfasfc = parseFloat(oriarf.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,''));
                            var priceArf   =parseFloat(Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''));
                             var totalARF   =parseFloat(Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,''));
                            var boq3 = parseFloat(oriarf.data['qty'].toString().replace(/\$|\,/g,''));

                            var kode_brg = Ext.getCmp('kode_brg_text').getValue();
                            var nama_brg = Ext.getCmp('nama_brg_text').getValue();
                            var net_act = Ext.getCmp('net-act').getValue();
                            var ket = Ext.getCmp('ket-arf').getValue();
                            var netAct = Ext.getCmp('net-act').getValue();

                            oriarf.data['kode_brg'] = kode_brg;
                            oriarf.data['nama_brg'] = nama_brg;
                            oriarf.data['net_act'] = net_act;
                            oriarf.data['ket'] = ket;
                            oriarf.data['qty'] = qty;
                            oriarf.data['harga'] = priceArf;
                            oriarf.data['totalARF'] = totalARF;
                            oriarf.data['net_act'] = netAct;

                            qty = parseFloat(qty);
//                            oriarf.data['totalPoArfAsfc'] = inpoarfasfc+ totalARF;


                            oriarf.data['status'] = '';
//                            syncMiscWorkid(oriarf.data['totalPoArfAsfc']);
//                            addEditedBoq();
//                        }
                }
                   clearARFForm();
                 clearButton();
                 refreshGrid();

            }
            else
            {
                var newTotalARF = Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,'');

                    var e = new reimburslist({
                        prj_kode: Ext.getCmp('prj_kode_text').getValue(),
                        sit_kode: Ext.getCmp('sit_kode_text').getValue(),
                        prj_nama: Ext.getCmp('prj_nama_text').getValue(),
                        sit_nama: Ext.getCmp('sit_nama_text').getValue(),
                        kode_brg: Ext.getCmp('kode_brg_text').getValue(),
                        nama_brg: Ext.getCmp('nama_brg_text').getValue(),
                        val_kode: Ext.getCmp('val_kode_text').getValue(),
                        uom: Ext.getCmp('uom_text').getValue(),
                        id: getNewID(),
                        qty:  Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,''),
                        harga: Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''),
                        net_act: Ext.getCmp('net-act').getValue(),
                        ket: Ext.getCmp('ket-arf').getValue()
                    });
                 storeReimburs.add(e);
                 ori = undefined;
                 e = undefined;
                 clearARFForm();
                 clearButton();
                 refreshGrid();
            }
}

function delToARF(idBoq,workid)
{
	Ext.MessageBox.confirm('Confirm', 'Are you sure want to delete this?', function(btn){
		if (btn == 'yes')
		{
            var gridarf = Ext.getCmp('arf-grid').getSelectionModel().getSelections();
            var b = storeReimburs.getAt(storeReimburs.findExact('id', gridarf[0].data['id']));

				if (b != undefined)
				{
                    storeReimburs.remove(b);
					Ext.getCmp('arf-grid').getView().refresh();
                }

			clearARFForm();
			clearButton();
		}

	});
}

function editToARF(idBoq)
{

	Ext.getCmp('save-to-arf').setText('Update to Reimbursable Expenditure List(Cart)');
    var gridarf = Ext.getCmp('arf-grid').getSelectionModel().getSelections();
    var oriarf = storeReimburs.getAt(storeReimburs.findExact('id', gridarf[0].data['id']));

	Ext.getCmp('arf-grid').disable();
	Ext.getCmp('boq3-grid').disable();
	Ext.getCmp('cancel-to-arf').setText('Cancel Edit');
	if (oriarf != undefined)
	{
   		oriarf.data['status'] = 'edit';

		Ext.getCmp('arf-qty').setValue(oriarf.data['qty']);
        Ext.getCmp('price_text').setValue(oriarf.data['harga']);
        Ext.getCmp('totalarf_text').setValue(oriarf.data['totalARF']);
		Ext.getCmp('ket-arf').setValue(oriarf.data['ket']);
		Ext.getCmp('net-act').setValue(oriarf.data['net_act']);
		Ext.getCmp('kode_brg_text').setValue(oriarf.data['kode_brg']);
		Ext.getCmp('nama_brg_text').setValue(oriarf.data['nama_brg']);
		Ext.getCmp('uom_text').setValue(oriarf.data['uom']);
		Ext.getCmp('arf-val').setValue(oriarf.data['val_kode']);

        Ext.getCmp('price_text').enable();
        Ext.getCmp('price_text').enable();
        Ext.getCmp('kode_brg_text').enable();
        Ext.getCmp('kode_brg_text').setValue(oriarf.data['kode_brg']);
        Ext.getCmp('nama_brg_text').setValue(oriarf.data['nama_brg']);
        Ext.getCmp('totalarf_text').disable();
        Ext.getCmp('price_text').setValue(CommaFormatted(oriarf.data['priceArf']));

	}
}

function showValuta()
{
    var columns = [
                    {header:'Valuta Code',width:100,sortable:true,dataIndex:'val_kode'},
                    {header:'Valuta Name',width:150,sortable:true,dataIndex:'val_nama'}
                ];

    data =  [

            {name: 'val_kode', mapping: 'val_kode'},
            {name: 'val_nama', mapping: 'val_nama'}
            ];


    urlJson = '/default/valuta/list';

    primaryKey = 'val_kode';
    Pk = primaryKey;
    widthGrid = 210;
    heightGrid = 210;

    var stores = new Ext.data.Store({
        proxy:new Ext.data.HttpProxy({
        url: urlJson
         }),
            reader: new Ext.data.JsonReader({
        root: 'posts',
        totalProperty: 'count'
    },data)
        });

    yAxis=0;
    grids = function()
    {
        grids.superclass.constructor.call(this, {
        store: stores,
        columns: columns,
        x:0,
        y:yAxis,
        id:primaryKey+'_grid',
        loadMask: true,
        bbar:[ new Ext.PagingToolbar({
            pageSize: 100,
            store: stores,
            displayInfo: true,
            displayMsg: 'Displaying data {0} - {1} of {2}',
            emptyMsg: "No data to display"
        })],
        height:heightGrid,
        width:widthGrid,
        listeners: {
            'rowdblclick': function(g, rowIndex, e){
				        	objectName = 'val_kode';
                            txtBoxChange = 'val_kode_text';
                            closeForm = true;
                            formId = 'a-form-panel-val_kode_button';
                            var valKode = g.getStore().getAt(rowIndex).get(objectName);
                            newUrl = '/valuta/listByParams/name/val_kode/data/' + valKode;
                            prox = 'trano_proxy';
                            gri = 'trano_grid';

                            var record = g.getStore().getAt(rowIndex).get(objectName);
                            Ext.getCmp('val_kode_text').setValue(record);
                            Ext.getCmp('arf-val').setValue(record);

//                            if (Ext.getCmp('val_nama_text') != undefined)
//                            {
//                            var record2 = g.getStore().getAt(rowIndex).get("val_nama");
//                            Ext.getCmp('val_nama_text').setValue(record2);
//                            }

                            if (closeForm)
                            {
                                Ext.getCmp(formId).close();
                            }

                            window.setTimeout(function(){
                                    isDblClick = false;
                            }, 0);
                    }
            }
    });
    }
    stores.load();

    Ext.extend(grids, Ext.grid.GridPanel);
    Ext.extend(txtboks,Ext.form.TextField);//PR


    var aForm =  new Ext.Window({
        id: 'a-form-panel-val_kode_button',
        layout: 'absolute',
        minWidth: 200,
        minHeight: 200,
        stateful:false,
        modal: true,
        resizable: false,
        width: 220,
        height: 220,
        items : [

             new grids('valuta_list')
        ]

      });
      aForm.title = 'Choose Currency';
      aForm.show();
}

function init()
{
	var tglSekarang = new Date();
	getLastARF();
//	Ext.getCmp('tgl_text').setValue(tglSekarang.format('Y-m-d'));
	Ext.getCmp('kode_brg_text').enable();
	Ext.getCmp('price_text').enable();
    Ext.getCmp('pic_kode_text').setValue('<?php echo $this->uid; ?>');
    Ext.getCmp('pic_nama_text').setValue('<?php echo $this->nama; ?>');
    Ext.getCmp('totalarf_text').disable();

}

function getLastARF()
{
	Ext.Ajax.request({
        url: '/procurement/procurement/getlastarf',
        method:'POST',
        success: function(result, request){
        	   var returnData = Ext.util.JSON.decode(result.responseText);

				if (returnData.arf != undefined && returnData.arf != '')
				{
//					Ext.getCmp('trano_text').setValue('PRF-' + returnData.pr);
				}
			}
		,
    	failure:function( action){
      	if(action.failureType == 'server'){
          obj = Ext.util.JSON.decode(action.response.responseText);
          Ext.Msg.alert('Error!', obj.errors.reason);
      	}
      	}
    });
};

var textField =  new Ext.form.TextField();

var userColumns =  [
    new Ext.grid.RowNumberer(),
    {header: "",width: 30, dataIndex: 'id',renderer: function (v,p,r) {
//        if (!isMscWorkid(r.data['workid']))
//        {
//            var percent = 0;
//             percent = (parseFloat(r.data['totalPoArfAsfc']) /parseFloat(r.data['totalPrice'])) * 100;
//        }
//        else
//        {
//            var percent = 0;
//             percent = (parseFloat(r.data['totalPoArfAsfc']) /parseFloat(r.data['totalPrice'])) * 100;
//
//        }


//    	if (percent < 100)
			return '<a href="#" onclick="addToARF(' + v + ');"><img src="/images/g_rec_add.png"></a>';
//    	else
//    	{
//    		p.attr ='ext:qtip="This item (' + r.data['kode_brg'] + ') must be created by AFE"';
//    		return '<img src="/images/icons/fam/page_tag_red.gif">';
////    		return '<a href="#" onclick="addToAFE(' + v + ');"><img src="/images/icons/fam/page_tag_red.gif"></a>';
//    	}
    }},
    {header: "Work Id", width: 55, sortable: true, dataIndex: 'workid'},
    {header: "Work Name", width: 150, sortable: true, dataIndex: 'workname'},
    {header: "Product Id", width: 65, sortable: true, dataIndex: 'kode_brg'},
    {header: "Description", width: 200, sortable: true, dataIndex: 'nama_brg'},
    {header: "Uom", width: 50, sortable: true, dataIndex: 'uom'},
    {header: "Total Price BoQ3", width: 80, sortable: true, dataIndex: 'totalPrice',css:'text-align:right;',renderer: function (v,p,r) {
        return CommaFormatted(v);
    }
    },
    {header: "Total Price ARF, PO & Reimbursable Expenditure", width: 80, sortable: true, dataIndex: 'totalPoArfAsfc',css:'text-align:right;',renderer: function (v,p,r) {
        return CommaFormatted(v);
    }
    }
];

var userColumns2 =  [
                    new Ext.grid.RowNumberer(),
                    {header: "",width: 60, dataIndex: 'id',css:'text-align:center;',renderer: function (v,p,r) {
                		return '<a href="#" onclick="editToARF(' + v + ');"><img src="/images/g_rec_upd.png"></a>&nbsp;<a href="#" onclick="delToARF(' + v + ',\'' + r.data['workid'] + '\');"><img src="/images/g_rec_del.png"></a>';
                    }},
//                    {header: "Work Id", width: 55, sortable: true, dataIndex: 'workid'},
//                    {header: "Work Name", width: 150, sortable: true, dataIndex: 'workname'},
                    {header: "Product Id", width: 65, sortable: true, dataIndex: 'kode_brg'},
                    {header: "Description", width: 200, sortable: true, dataIndex: 'nama_brg'},
                     {header: "Valuta", width: 100, sortable: true, dataIndex: 'val_kode'},
                    {header: "Uom", width: 50, sortable: true, dataIndex: 'uom'},
                    {header: "Qty", width: 80, sortable: true,css:'text-align:right;', renderer: function (v,p,r) {
                //						if (r.data['val_kode'] == 'IDR')
                            return CommaFormatted(r.data['qty']);
                //						else
                //							return CommaFormatted(r.data['priceArf: ']);
                    }},
                    {header: "Price", width: 100, sortable: true,css:'text-align:right;', renderer: function (v,p,r) {
//						if (r.data['val_kode'] == 'IDR')
							return CommaFormatted(r.data['harga']);
//						else
//							return CommaFormatted(r.data['priceArf: ']);
                    }},
                    {header: "Total", width: 100, sortable: true,css:'text-align:right;', renderer: function (v,p,r) {
//						if (r.data['val_kode'] == 'IDR')
							return CommaFormatted((parseFloat(r.data['harga']) * parseFloat(r.data['qty'])).toString());
//						else
//							return CommaFormatted((parseFloat(r.data['hargaUSD']) * parseFloat(r.data['qty'])).toString());
                    }},
                    {header: "Net Act", width: 100, sortable: true, dataIndex: 'net_act'},
                    {header: "Remark", width: 100, sortable: true, dataIndex: 'ket'},
                ];

var submitBoq3 = function (){

    var valuta = Ext.getCmp('val_kode_text').getValue();
	var prjKode = Ext.getCmp('prj_kode_text').getValue();
    var sitKode = Ext.getCmp('sit_kode_text').getValue();
    var requester = Ext.getCmp('requester_text').getValue();
    var manager = Ext.getCmp('mgr_kode_text').getValue();

    if (requester == '' )
    {
    	Ext.MessageBox.show({
	           title: 'Error',
	           msg: 'Please Select Requester Name !',
	           buttons: Ext.MessageBox.OK,
	           icon: Ext.MessageBox.ERROR
	       });
        return false;
    }
    if (manager == '' )
    {
    	Ext.MessageBox.show({
	           title: 'Error',
	           msg: 'Please Select Manager !',
	           buttons: Ext.MessageBox.OK,
	           icon: Ext.MessageBox.ERROR
	       });
        return false;
    }

    if (valuta == '' )
    {
    	Ext.MessageBox.show({
	           title: 'Error',
	           msg: 'Please Select Currency Code !',
	           buttons: Ext.MessageBox.OK,
	           icon: Ext.MessageBox.ERROR
	       });
        return false;
    }

    if (prjKode == '' || sitKode == '')
    {
    	Ext.MessageBox.show({
	           title: 'Error',
	           msg: 'Please Select Project/Site Code !',
	           buttons: Ext.MessageBox.OK,
	           icon: Ext.MessageBox.ERROR
	       });
        return false;
    }
//    Ext.getCmp('tgl_text').disable();
    var newUrl = '/default/home/getboq3arfsummary/arf/true/sumarf/true/prj_kode/' + prjKode + '/sit_kode/' + sitKode ;
    store.proxy.setUrl(newUrl);
    store.reload();
    var boq3Grid = Ext.getCmp('boq3-grid');
    boq3Grid.getStore().proxy.setUrl(newUrl);
//    boq3Grid.getStore().reload({params:{start: 0, limit: 100}});
    boq3Grid.getBottomToolbar().store.proxy.api.read['url'] = newUrl;
    boq3Grid.getBottomToolbar().store.proxy.url = newUrl;
    boq3Grid.getBottomToolbar().store.proxy.setUrl(newUrl);
//    console.log(boq3Grid.getBottomToolbar().store.proxy);

};

userForm = new Ext.FormPanel({
    renderTo: 'user-form',
    iconCls: 'silk-user',
    title: 'Add New Reimbursable to Customer Expenditure',
    frame: true,
    width: 750,
    labelAlign: 'left',
    items: [
            {
            layout:'column',
            items:[
                   {columnWidth:.310,
                    layout: 'form',
			         labelWidth: 120,
                	items: [
//				            {fieldLabel: 'No Trans',
//				             id: 'trano_text',
//				             name:"trano",
//				             disabled: true,
//				             allowBlank: false,
//				             xtype: 'textfield',
//					         width: 100
//				            },
//				            {fieldLabel:"Date",
//				             id:"tgl_text",
//				             name:"tgl",
//				             xtype: 'datefield',
//				             width: 90
//				            },
                            {
                                fieldLabel : 'Requester Name',
                                id : 'requester_text',
                                xtype: 'textfield',
                                disabled: false,

                                width: 100
                            },
                        {
                            fieldLabel : 'Name of Beneficiary',
                            id : 'penerima_text',
                            xtype: 'textfield',
                            disabled: false,

                            width: 100
                        },
                        {
                            fieldLabel : 'Bank Name ',
                            id : 'bank_text',
                            xtype: 'textfield',
                            disabled: false,

                            width: 100
                        },
                        {
                            fieldLabel : 'Bank Account Name ',
                            id : 'bankaccountname_text',
                            xtype: 'textfield',
                            disabled: false,

                            width: 100
                        },
                        {
                            fieldLabel : 'Bank Account Number ',
                            id : 'bankaccountno_text',
                            xtype: 'textfield',
                            disabled: false,

                            width: 100
                        },
                                                       {
                             fieldLabel : 'Origin Of Budget',
                             id:'arf_origin_text',
                             name:'arf-origin',
                             editable:false,
                             xtype:'combo',
                             store: new Ext.data.SimpleStore({
                                         fields:['nilai', 'ori']
                                                 ,data:[
                                                        ['Project','Project'],
                                                        ['OPEX','OPEX'],
                                                        ['CAPEX','CAPEX'],
                                                        ['SALES','SALES']
                                                    ]

                                             }),
                             valueField:'ori',
                             displayField:'nilai',
                             typeAhead: true,
                             mode: 'local',
                             triggerAction: 'all',
                             value: 'Project',
                             selectOnFocus:true,
                             forceSelection:false,
                             width: 70
//                              listeners : {
//                               'select' : function (c,stores, index){
//
//                                var data = stores.data['ori'];
//
//                                if (data == 'SALES')
//                                {
//                                    myPanel = Ext.getCmp('abs-budget-panel');
//                                    myPanel.body.load({
//                                        url: '/procurement/procurement/addarfsales',
//                                        scripts : true
//                                    });
//
//                                }
//
//                        }
//                    }

                            },
                        {fieldLabel: 'Currency',id:'val_kode_text',name: 'val_kode', xtype: 'trigger',triggerClass: 'teropong',editable:false,
                            onTriggerClick: function(){
                                showValuta();

                            },

                            allowBlank: false,
                            width: 80
                        },

			               ]
                   },
                   {columnWidth:.270,
                    layout: 'form',
                    style: 'margin-left:10px;',
                    items: [

                        {fieldLabel: 'Project Code',
					             id:'prj_kode_text',
					             name:'prj_kode',
					             allowBlank: false,
                                 editable:false,
					             xtype:"trigger",
                                                     triggerClass: 'teropong',
						     	 width: 80,
					             onTriggerClick:
					                  function ()
					                    {
					                      projectPopUphandler();
					                    }
					             },

					            {fieldLabel: 'Site Code',
					             id:'sit_kode_text',
					             name:'sit_kode',
					             allowBlank: false,
                                 editable:false,
					             xtype:"trigger",
                                                     triggerClass: 'teropong',
						         width: 80,
					             onTriggerClick:
					                 function ()
					                    {
					                	  if (Ext.getCmp('prj_kode_text').getValue() != '')
					                      	sitePopUphandler();
					                    }
					            },

                        {
                            fieldLabel : 'PIC Name',
                            id : 'pic_kode_text',
                            xtype: 'textfield',
                            disabled: true,

                            width: 80
                        },
                        {xtype:'trigger',fieldLabel: 'Manager Code',id:'mgr_kode_text',name: 'mgr_kode', triggerClass: 'teropong',
                        onTriggerClick: function( ){
                            showManagerList();
                        },
                        editable: false,
                        allowBlank: false,
                        width: 80
                        },

                            {
                                fieldLabel : 'Finance Receiving Name',
                                id : 'fin_kode_text',
                                xtype: 'trigger',
                                triggerClass: 'teropong',
                                onTriggerClick: function( ){
                                    showUserList();
                                        },
                                        editable: false,
                                        allowBlank: false,
                                        width: 80

                                }


				            ]
                   },
                   {columnWidth:.270,
                	   style: 'text-align:left',
                       layout: 'form',
                       items: [
								{
								    id:'prj_nama_text',
								    name: 'prj_nama',
								    hideLabel: true,
								    allowBlank: false,
						            xtype: 'textfield',
								    disabled:true,
                                    width: 175
								   },
							   {
						             id:'sit_nama_text',
						             name: 'sit_nama',
						             hideLabel: true,
						             allowBlank: false,
						             disabled: true,
						             xtype: 'textfield',
                                     width: 175
					            },


                           {
                                 id:'pic_nama_text',
                                 name: 'pic_nama',
                                 hideLabel: true,
                                 allowBlank: false,
                                 disabled: true,
                                 xtype: 'textfield',
                                 width: 175
                            },
                           {

                                    id : 'mgr_nama_text',
                                    xtype: 'textfield',
                                    hideLabel: true,
                                    disabled: true,
                                    width: 175
                                } ,
                           {

                                            id : 'fin_nama_text',
                                            xtype: 'textfield',
                                            hideLabel: true,
                                            disabled: true,
                                            width: 175
                                        }

//                                     id:'mgr_nama_text',
//                                     name: 'mgr_nama',
//                                     hideLabel: true,
//                                     allowBlank: false,
//                                     disabled: true,
//                                     xtype: 'textfield'
//                                }

                           //								   {
//						             id:'cus_nama_text',
//						             name: 'cus_nama',
//						             hideLabel: true,
//						             allowBlank: false,
//						             disabled: true,
//						             xtype: 'textfield'
//					            }

                               ]
                   },
            ]
            },
        {
            fieldLabel: 'Customer',
            xtype: 'customerselector',
            id: 'customer',
            ShowName: true,
            Selectid: 'cus_kode',
            Nameid: 'cus_nama',
            width: 120
        },

        ],
	buttons: [
        {
          text: 'Submit',
          id: 'boq3-submit',
          iconCls: 'silk-add',
          disabled : true,
          handler: function() {
      		submitBoq3();

    	},
          scope: this
        },
        {
            text: 'Reset',
            disabled : true,
            handler: function(btn, ev){
                var teks = userForm.findByType('textfield');
                Ext.each(teks, function(t, index) {
                    t.setValue('');
                });

				store.removeAll();
				storeReimburs.removeAll();
				Ext.getCmp('boq3-grid').getView().refresh();
				Ext.getCmp('arf-grid').getView().refresh();
                init();
            },
            scope: this
         }, {
             text: 'Cancel',
            disabled : true,
             handler: function(btn, ev){
 	        	myPanel = Ext.getCmp('abs-budget-panel');
 	    	    myPanel.body.load({
 	    	        url: '/procurement/procurement/arf',
 	    	        scripts : true
 	            });
             },
             scope: this
         } ]
    ,

    onCreate : function(btn, ev) {
        if (!this.getForm().isValid()) {
            App.setAlert(false, "Form is invalid");
            return false;
        }

        var prjKode = Ext.getCmp('prj_kode_text').getValue();
        var sitKode = Ext.getCmp('sit_kode_text').getValue();
        var workId = Ext.getCmp('workid_text').getValue();
        var kodeBrg = Ext.getCmp('kode_brg_text').getValue();

        if ((prjKode == '' || prjKode == undefined) && (sitKode == '' || sitKode == undefined) && (workId =='' || workId == undefined) && (kodeBrg=='' || kodeBrg==undefined))
        {
            Ext.msg.alert('Error!', 'Please fill Project Code & Site Code');
            return false;
        }

        store2.proxy.setApi('read',  '/procurement/procurement/list/type/arfd/prj_kode/' + prjKode + '/sit_kode/' + sitKode + '/workid/' + workId + '/kode_brg/' + kodeBrg);
        store2.reload();
        Ext.getCmp('boq3-grid').getStore().loadData(store);
//      this.fireEvent('create', this, this.getForm().getValues());
//      this.getForm().reset();
    }



});


function hitungTotalArf()
{
       if (Ext.getCmp('arf-qty').getValue() != '' && Ext.getCmp('price_text').getValue() != '')
        {
            var a = parseFloat(Ext.getCmp('arf-qty').getValue().toString().replace(/\$|\,/g,''));
            var b = parseFloat(Ext.getCmp('price_text').getValue().toString().replace(/\$|\,/g,''));

            //Ext.getCmp('total_price_text').setValue( CommaFormatted((a*b).toFixed(2)));
            Ext.getCmp('totalarf_text').setValue(CommaFormatted(a*b));
            parseFloat(Ext.getCmp('totalarf_text').getValue().toString().replace(/\$|\,/g,''));
            Ext.getCmp('totalarf_text').setValue(CommaFormatted(a*b));
            //													Ext.getCmp('save-po').enable();
        }
    else
       Ext.getCmp('totalarf_text').setValue('');

}



userForm2 = new Ext.FormPanel({
    renderTo: 'user-form2',
    id: 'arf-form',
    iconCls: 'silk-user',
    title: 'Detail Reimbursable Expenditure',
    frame: true,
    width: 500,
    labelAlign: 'left',
    style: 'margin-top: 10px',
    items: [
            {
            layout:'column',
            items:[
                   {columnWidth:.390,
                    layout: 'form',
                	items: [
                	        {
                    	        fieldLabel: 'Work ID',
                    	        id: 'arf-workid',
                    	        xtype:'textfield',
                        	    disabled: true,
                        	    width: 55
                	        },

                            {
                                xtype: 'itemselector',
                                fieldLabel: 'Product ID',
                                id: 'item-select',
                                Selectid: 'kode_brg_text',
                                Nameid: 'nama_brg_text',
                                showName: false,
                                SelectWidth: 70,
                                prjKodeField: 'prj_kode_text'
                            }

                	       ]
                   },
                  ]
            },

            {
            	fieldLabel:'Product Name',
			    id:'nama_brg_text',
			    name: 'nama_brg',
			    allowBlank: false,
	            xtype: 'textfield',
		        width: 315,
			    disabled:true
		    },
        {
        layout:'column',
        items:[
            {columnWidth:.6,
                layout: 'form',
                labelWidth: 80,
                    items: [
                     {
                         layout:'column',
                         items:[
                                {columnWidth:.71,
                                 labelWidth:100,
                                 layout: 'form',
                                 items: [
                                            new Ext.ux.customRendererField({
                                             priceDelemiter:',',
                                             fieldLabel: 'Qty Request',
                                             xtype:'textfield',
                                             id: 'arf-qty',
                                             allowBlank : false,
                                             width: 100,
                                             style:"text-align:right",
                                             enableKeyEvents: true,
                                             listeners: {

                                             'keyup' : function (t,e) {
                                                 if (!isNaN(t.getValue()) && !isNaN(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,'')))
                                                 {
                                                             hitungTotalArf();
//                                                            var newPrice = Ext.getCmp('price_text').getValue().replace(/\$|\,/g,'');
//
//                                                             var boq3 = document.getElementById('boq3').innerHTML;
//                                                             var inarf = document.getElementById('inarf').innerHTML;
//
//                                                             inarf = parseFloat(inarf.toString().replace(/\$|\,/g,''));
//                                                             boq3 = parseFloat(boq3.toString().replace(/\$|\,/g,''));
//                                                             var unitQty = parseFloat(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,''));
//                                                             var newBalance = parseFloat(inarf) + (parseFloat(newPrice) * parseFloat(unitQty));
//
//                                                             temp = boq3 - newBalance;
//                                                             document.getElementById('newbalance').innerHTML = CommaFormatted(temp.toFixed(4)) + ' ' + Ext.getCmp('arf-val').getValue();

                                                 }
                                            }
                                        }
                                         })]
                                },
                                {columnWidth:.110,
                                     layout: 'form',
                                     items: [
                                                {
                                                     hideLabel: true,
                                                     id: 'uom_text',
                                                     xtype:'textfield',
                                                     disabled: true,
                                                     width: 30
                                                 }
                                             ]
                                }
                            ]
                     },
                     {
                         layout:'column',
                         items:[
                                {columnWidth:.71,
                                 labelWidth:100,
                                 layout: 'form',
                                 items: [
                                     new Ext.ux.customRendererField({
                                         priceDelemiter:',',
                                         fieldLabel:'Unit Price',
                                         id:'price_text',
                                         name: 'price',
                                         allowBlank: false,
                                         xtype: 'textfield',
                                         style:"text-align:right",
                                         enableKeyEvents: true,listeners: {

                                             'keyup' : function (t,e) {
                                                 if (!isNaN(t.getValue()) && !isNaN(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,'')))
                                                 {
                                                             hitungTotalArf();
//                                                             var newPrice = Ext.getCmp('price_text').getValue().replace(/\$|\,/g,'');
//
//                                                             var boq3 = document.getElementById('boq3').innerHTML;
//                                                             var inarf = document.getElementById('inarf').innerHTML;
//
//                                                             inarf = parseFloat(inarf.toString().replace(/\$|\,/g,''));
//                                                             boq3 = parseFloat(boq3.toString().replace(/\$|\,/g,''));
//                                                             var unitQty = parseFloat(Ext.getCmp('arf-qty').getValue().replace(/\$|\,/g,''));
//                                                             var newBalance = parseFloat(inarf) + (parseFloat(newPrice) * parseFloat(unitQty));
//
//                                                             temp = boq3 - newBalance;
//                                                             document.getElementById('newbalance').innerHTML = CommaFormatted(temp.toFixed(2)) + ' ' + Ext.getCmp('arf-val').getValue();

                                                 }
                                            }
                                        },
                                         width: 100
//                                         disabled:true
                                     } )
                                 ]
                                },
                                 {columnWidth:.170,
                                     layout: 'form',
                                     items: [
                                                {
                                                     hideLabel: true,
                                                     id: 'arf-val',
                                                     xtype:'textfield',
                                                     disabled: true,
                                                     width: 40
                                                 }
                                             ]
                                }
                             ]
                     }

                    ]
            }
                ]
        },
        {
            fieldLabel: 'Total',
            id: 'totalarf_text',
            xtype:'textfield',
            style:"text-align:right",
            width: 130
        },

        {
            fieldLabel: 'Net Act',
            id: 'net-act',
            xtype:'textfield',
//            disabled: true,
            width: 130
        },
            {
    	        fieldLabel: 'Remark',
    	        id: 'ket-arf',
    	        xtype:'textfield',
        	    width: 315
	        }

            ],
       buttons: [{
			         text: 'Add to Reimbursable Expenditure List(Cart)',
			         id: 'save-to-arf',
			         iconCls: 'icon-add',
			         handler: function(btn, ev) {
	         			insertToARF();
				       },
			         scope: this
			         },
			         {
				         text: 'Cancel Add',
				         id: 'cancel-to-arf',
				         iconCls: 'icon-cancel',
				         handler: function(btn, ev) {

				         if (btn.text == 'Cancel Edit')
				         {
//					        if (ori != undefined)
//					        {
                                var gridarf = Ext.getCmp('arf-grid').getSelectionModel().getSelections();
				        	 	var a = storeReimburs.getAt(storeReimburs.findExact('id', gridarf[0].data['id']));
//				        	 	var b = store.getAt(store.findExact('id', ori.data['id']));
			         			if (a != undefined)
			         			{
//									b.data['totalPoArfAsfc'] = parseFloat(b.data['totalPoArfAsfc'].toString().replace(/\$|\,/g,'')) + parseFloat(a.data['totalARF'].toString().replace(/\$|\,/g,''));
									a.data['status'] == '';
			         			}
//					        }
				         }
							clearARFForm();
							refreshGrid();
							clearButton();
							oriarf = undefined;
					        ori = undefined;
			         	},
				         scope: this
			         }

       			]
});

boq3Grid = Ext.extend(Ext.grid.GridPanel, {
    iconCls: 'silk-grid',
    id: 'boq3list-grid',
    frame: true,
    title: 'BOQ3 Detail',
    height: 250,
    width: 10000,
    style: 'margin-top: 10px',

    initComponent : function() {

        // typical viewConfig
        this.viewConfig = {
            forceFit: true
        };

        this.buttons = this.buildUI();

        boq3Grid.superclass.initComponent.call(this);
    }
//	,buildUI : function() {
//        return [
//           {
//           text: 'Add',
//           iconCls: 'icon-save',
//           handler: this.onSave,
//           scope: this
//           }
//               ];
//    },
//
//    onSave : function(btn, ev) {
//       //this.store.save();
//        var json = '';
//    	this.store.each(function(store){
//    	json += Ext.util.JSON.encode(store.data) + ',';
//    	});
//    	json = json.substring(0, json.length - 1);
//    	params = {posts:[json]};
//    	Ext.Ajax.request({
//            url: '/procurement/procurement/insertpr',
//            method:'POST',
//            success: function(resp){
//    		Ext.Msg.alert('Success', 'Data has been saved!');
//    		isEdited = false;
//            },
//        	failure:function( action){
//          	if(action.failureType == 'server'){
//              obj = Ext.util.JSON.decode(action.response.responseText);
//              Ext.Msg.alert('Error!', obj.errors.reason);
//          	}else{
//              Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
//          	}
//          	},
//            params: params
//        });
//    }
});


userGrid = Ext.extend(Ext.grid.GridPanel, {
    renderTo: 'user-grid',
    iconCls: 'silk-grid',
    id: 'boq3-grid',
    frame: true,
    title: 'BOQ3 Detail',
    height: 250,
    width: 850,
    stateful: false,
    style: 'margin-top: 10px',
    initComponent : function() {

        this.buttons = this.buildUI();

        userGrid.superclass.initComponent.call(this);
    },

    buildUI : function() {
    },

});

userGrid2 = Ext.extend(Ext.grid.GridPanel, {
    renderTo: 'user-grid2',
    iconCls: 'silk-grid',
    id: 'arf-grid',
    frame: true,
    title: 'Reimbursable Expenditure List (Cart)',
    height: 250,
    width: 750,
    stateful: false,
    style: 'margin-top: 10px',
    initComponent : function() {

        this.buttons = this.buildUI();

        userGrid.superclass.initComponent.call(this);
    },

    buildUI : function() {
    },
});

Ext.onReady(function() {
    Ext.QuickTips.init();

    var userGrids2 = new userGrid2({
        renderTo: 'user-grid2',
        id: 'arf-grid',
        store: storeReimburs,
        columns : userColumns2,
        loadMask: true,
        bbar: ['->',{
             xtype: 'button',
	         text: 'Save Reimbursable Expenditure List(Cart)',
	         iconCls: 'icon-save',
	         handler: function()
	         {
				if (storeReimburs.getCount() == 0)
				{
					return false;
				}

                var valuta = Ext.getCmp('val_kode_text').getValue(),
                    prjKode = Ext.getCmp('prj_kode_text').getValue(),
                    sitKode = Ext.getCmp('sit_kode_text').getValue(),
                    requester = Ext.getCmp('requester_text').getValue(),
                    manager = Ext.getCmp('mgr_kode_text').getValue(),
                    cusKode = Ext.getCmp('cus_kode').getValue();

                if (requester == '' )
                {
                    Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please Select Requester Name !',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                       });
                    return false;
                }
                 if (cusKode == '' )
                 {
                     Ext.MessageBox.show({
                         title: 'Error',
                         msg: 'Please Select Customer !',
                         buttons: Ext.MessageBox.OK,
                         icon: Ext.MessageBox.ERROR
                     });
                     return false;
                 }
                if (manager == '' )
                {
                    Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please Select Manager !',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                       });
                    return false;
                }

                if (valuta == '' )
                {
                    Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please Select Currency Code !',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                       });
                    return false;
                }

                if (prjKode == '' || sitKode == '')
                {
                    Ext.MessageBox.show({
                           title: 'Error',
                           msg: 'Please Select Project/Site Code !',
                           buttons: Ext.MessageBox.OK,
                           icon: Ext.MessageBox.ERROR
                       });
                    return false;
                }

	         	var json = '';
	         	var parameter = '';
	        	Ext.getCmp('arf-grid').getStore().each(function(store){

	            	json += Ext.util.JSON.encode(store.data) + ',';
	            	});
            	json = '[' + json.substring(0, json.length - 1) + ']'; //JSON format fix
                     //lagi disini sini

            	var prjNama = Ext.getCmp('prj_nama_text').getValue();
            	var sitNama = Ext.getCmp('sit_nama_text').getValue();
                var budgetType = Ext.getCmp('arf_origin_text').getValue();
                var requester2 = Ext.getCmp('mgr_kode_text').getValue();
                var penerima = Ext.getCmp('penerima_text').getValue();
                var bank = Ext.getCmp('bank_text').getValue();
                var bankaccountname = Ext.getCmp('bankaccountname_text').getValue();
                var bankaccountno = Ext.getCmp('bankaccountno_text').getValue();
                var finance = Ext.getCmp('fin_kode_text').getValue();
                var managerKode = Ext.getCmp('mgr_kode_text').getValue();
                var managerNama = Ext.getCmp('mgr_nama_text').getValue();
                var picKode = Ext.getCmp('pic_kode_text').getValue();
                var picNama = Ext.getCmp('pic_nama_text').getValue();
                var tgl = new Date();

            	parameter = [{
                    prj_kode: prjKode,
                    prj_nama: prjNama,
                    sit_kode:sitKode,
                    sit_nama:sitNama,
                    requester: requester,
                    requester2: requester2,
                    penerima:penerima,
                    namabank:bank,
                    reknamabank:bankaccountname,
                    rekbank:bankaccountno,
                    valuta: valuta,
                    pic_kode:picKode,
                    pic_nama:picNama,
                    mgr_kode:managerKode,
                    mgr_nama:managerNama,
                    finance:finance,
                    budgettype:budgetType,
                    cus_kode: cusKode
                }];

                 var filedata = '';
                    storeFile.each(function(store){
                        filedata += Ext.util.JSON.encode(store.data) + ',';
                    })

                    filedata = '[' + filedata.substring(0, filedata.length - 1) + ']';


                 params = {posts:json, etc:Ext.util.JSON.encode(parameter),filedata:filedata};



            	myPanel = Ext.getCmp('abs-budget-panel'); //Load the panel
        	    myPanel.body.load({
        	        url: '/procurement/procurement/appreimburs', //the url
        	        scripts : true,
        	        params: params //our params goes here
                });
	         },
	         scope: this
        	}
                ,
                {
                xtype: 'button',
	         text: 'Cancel Reimbursable Expenditure List(Cart)',
	         iconCls: 'icon-cancel',
	         handler:showAddReimburs
	         ,
	         scope: this
        	}
                ]
    });
    init();
    clearButton();
    <?php
    if ($this->json != '')
    {
    ?>
		var jsonARF = <?php echo $this->json ?>;
		storeReimburs.loadData(jsonARF);
		Ext.getCmp('prj_kode_text').setValue(storeReimburs.data.items[0].data['prj_kode']);
		Ext.getCmp('sit_kode_text').setValue(storeReimburs.data.items[0].data['sit_kode']);
		submitBoq3();
		storeReimburs.each(function(stores){
			if(stores.data['id'] != undefined)
			{
				if (!isMscWorkid(stores.data['workid']))
				{
					oriStore = store.getAt(store.findExact('id', stores.data['id']));
//					oriStore.data['totalPR'] = parseFloat(oriStore.data['totalPR']) + parseFloat(stores.data['qty']);
				}
				else
				{
					var oriStore = store.getAt(store.findExact('workid', stores.data['workid']));
//					oriStore.data['totalPricePR'] = parseFloat(oriStore.data['totalPricePR']) + (parseFloat(stores.data['qty']) * parseFloat(stores.data['harga']));
				}
			}
			});
			//Clear filter
			store.clearFilter();

	<?php
    }
    ?>

    var fileColumns = [
            new Ext.grid.RowNumberer(),
            {header: "File Name",width: 130, dataIndex: 'filename'},
            {header:'Action',width:40,sortable:true,css:'text-align:center;', renderer: function (v,p,r){
                return '<a href="#" onclick="window.open(\'/default/file/download/path/files/filename/' + r.data['savename'] + '\',\'mywin\',\'left=20,top=20,width=100,height=20,toolbar=0,resizable=0\');"><img src="/images/icons/fam/page_find.gif"></a>&nbsp;<a href="#" onclick="deleteFile();"><img src="/images/g_rec_del.png"></a>';
            }}
        ];

        var gridattach = new Ext.grid.GridPanel ({
            id:'files-grid',
            iconCls: 'silk-grid',
            height: 100,
            store: storeFile,
            trackMouseOver: true,
            width:490,
            view : new Ext.grid.GridView({
                forceFit: true
            }),
            columns: fileColumns
        })

        var fileUploads = new Ext.FormPanel({

            title:'File Attachment',
            renderTo:'panel_attachment',
            fileUpload: true,
            width:500,
            frame:true,
            allowBlank: false,
             msgTarget: 'side',
            items:[{
                layout:'column',
                items:[{
                    columnWidth:0.7,
                    layout:'form',
                    items:[{
                        xtype: 'fileuploadfield',
                        id: 'po-file',
                        emptyText: 'Select a File',
                        fieldLabel: 'Attach File',
                        allowBlank: false,
                        name: 'file-path',
                        buttonText: '',
                        buttonCfg: {
                            iconCls: 'upload-icon'
                        },
                        width:200,
                        anchor:'98%'
                    }]
                },{
                    columnWidth:0.2,
                    layout:'form',
                    items:[{
                        xtype:'button',
                        text:'Upload',
                        handler:function()
                        {
                            if(fileUploads.getForm().isValid()){
                                form_action=1;
                                fileUploads.getForm().submit({
                                    url: '/procurement/procurement/uploadfile/type/REM',
                                    waitMsg: 'Uploading file...',
                                    success: function(form,action){
                                        var returnData = action.result;
                                        if( returnData.success) {
                                            var c = new filelist({
                                                id:parseFloat(storeFile.getCount() + 1),
                                                filename: returnData.filename,
                                                savename: returnData.savename,
                                                path: returnData.path,
                                                status: 'new'
                                          });
                                          storeFile.add(c);
                                          Ext.getCmp('files-grid').getView().refresh();
                                            Ext.getCmp('po-file').setValue('');
                                        }
                                        else
                                        {
                                            Ext.Msg.alert('Error', returnData.msg);
                                        }
                                    }
                                });
                            }
                        }
                    }]
                }]
            },gridattach]

        })







});

<?php echo $this->action('popupgrid','grid'); ?>








</script>


<div id="panel_attachment" style="margin-bottom:10px"></div>
<div id="user-form"></div>

<!--<div id="user-grid"></div>-->
<div id="separator">
<div id="user-form2" style="float:left;"></div>
<!--<div class="sidebox" style="float:left;width:22em;">-->
	<!--<div class="boxhead"><h2>Available Total</h2></div>-->
	<!--<div class="boxbody" id="a-qty">-->

	<!--</div>-->
<!--</div>-->
</div>
<div id="user-grid2" style="margin-top:10px;float:left;"></div>

