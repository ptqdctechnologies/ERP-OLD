<style>

    .last-reject{
        margin-top: 10px;
        margin-bottom: 10px;
        border:solid 1px #DEDEDE;
        background:#EFEFEF;
        /*color:#222222;*/
        color: #C15119;
        padding:4px;
        text-align:left;
    }
    .all-approve{
        margin-top: 10px;
        margin-bottom: 10px;
        border:solid 1px #DEDEDE;
        /*background:#CEE6C3;*/
        color:#222222;
        padding:4px;
        text-align:left;
        height: 200px;
        overflow: auto;
    }
    .body {
        width: 100%;
        overflow: auto;
    }
    .title {
        width: 100%;
        text-align: center;
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    .etc {
        width: 100%;
        height: 50px;
    }
    .kanan-etc {
        float: right;
        width: 48%;
    }
    .kiri-etc {
        float: left;
        width: 48%;
    }
    .blok {
        font-size: 12px;
        font-weight: bold;
        margin-bottom: 5px;
    }
    .budgetTable {
        width: 100%;
        font-size: 12px;
        font-weight: normal;
    }

    #approval {
        width: 100%;
        font-size: 12px;
        font-weight: bold;
        margin-top: 10px;
    }

</style>
<style type="text/css">
    .x-grid3-td-name b {
        font-family:tahoma, verdana;
        display:block;
        color:#333;
    }
    .x-grid3-td-name b i {
        font-weight:normal;
        font-style: normal;
        color:#000;
    }
    .x-grid3-td-name .personicon2 {
        padding-left:10px;
        background:transparent url(/images/engineer-icon.png) no-repeat 0 2px;
    }
    .x-grid3-td-name .x-grid3-cell-inner {
        white-space:normal;
    }

    .x-grid3-row-body p {
        margin:5px 20px 10px 25px !important;
        color:#555;
    }

    span .rolename {
        color:#333;
    }
</style>

<style type="text/css">
        /*css for afe &boq3 table*/
    table.boq
    {
        width: 100%;
        background-color: #fafafa;
        border: 1px #000000 solid;
        border-collapse: collapse;
        border-spacing: 0px; }


    td.boqheader
    { background-color: #99CCCC;
        border: 1px #000000 solid;
        font-weight: bold;
        font-size: 14px;
        text-align: center;
        color: #404040; }


    td.boqisi
    { border-bottom: 1px #6699CC dotted;
        font-weight: normal;
        font-size: .7em;
        color: #404040;
        background-color: #fafafa;
        padding-top: 4px;
        padding-bottom: 4px;
        padding-left: 8px;
        padding-right: 8px; }
        /*end here*/

</style>


<script type="text/javascript">

// MixedCollection untuk workflow_trans_id dan trano
    var allTrans = '';
<?php if ($this->allTrans) { ?>

    allTrans = new Ext.util.MixedCollection();
    allTrans.addAll(<?=$this->allTrans?>);

<?php } ?>
function rejectGeneric(trano,trans_id,prjKode,uidFirst,buttonId)
{
    var win = new Ext.Window ({
        id: 'window-comment',
        layout: 'border',
        width: 350,
        height: 200,
        modal: true,
        closeAction: 'close',
        resizable: false,
        title: 'Your reason why reject this Document',
        style: 'margin-top: 10px',
        labelAlign: 'right',
        stateful: false,
        items :
                [
                    new Ext.form.FormPanel({
                        frame: true,
                        region: 'center',
                        layout: 'fit',
                        items: [
                            {
                                xtype: 'textarea',
                                id: 'user-comment'
                            }
                        ]
                    })
                ],
        buttons: [
            {
                text: 'OK',
                handler: function(){
                    var comment = Ext.getCmp('user-comment').getValue().toString().replace(/\"|\'|\t|\n|\r/g,'');

                    params = {
//                        trans:trano,
                        trans:trans_id,
//                        trans_id:trans_id,
                        uid:uidFirst,
                        prj_kode:prjKode,
                        user: '<?=$this->uidNext?>',
                        comment: comment,
                        user_id:'<?=$this->userID?>',
                        docType: 'ARFP'
                    };
                    Ext.Ajax.request({
                        url: '/admin/workflow/reject',
                        method:'POST',
                        success: function(resp){
                            var returnData = Ext.util.JSON.decode(resp.responseText);
                            if (returnData.success)
                            {
                                var element = document.getElementById(buttonId);
                                element.parentNode.removeChild(element);

                                // Hapus trans_id yang telah di reject dari MixedCollection agar tidak diproses lagi...
                                if (allTrans != '')
                                {
                                    var indeks = allTrans.findIndexBy(function(items){
                                        return (items.trans_id == trans_id);
                                    });
                                    if (indeks >= 0)
                                    {
                                        allTrans.removeAt(indeks);
                                    }

                                    if (allTrans.getCount() == 0)
                                    {
                                        getDocs();
                                        myPanel = Ext.getCmp('abs-budget-panel');
                                        myPanel.body.load({
                                            url: '/default/home/showprocessdocument',
                                            scripts : true
                                        });
                                    }
                                }

                                if (win)
                                    win.close();
//                                getDocs();
                            }
                            else
                            {
                                Ext.Msg.alert('Error', returnData.msg);
                            }
                        },
                        failure:function( action){
                            if(action.failureType == 'server'){
                                obj = Ext.util.JSON.decode(action.response.responseText);
                                Ext.Msg.alert('Error!', obj.errors.reason);
                            }else{
                                Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                            }
                        },
                        params: params
                    });
                }
            },
            {
                text: 'Cancel',
                handler: function(){
                    if (win)
                        win.close();
                }
            },
        ]
    });

    win.show();
}
function showNextPerson(userArray,params,isEdit,prjKode,approval)
{
    if (approval == undefined ||approval == '')
        approval = false;
    if (isEdit == undefined || isEdit == "")
        isEdit = false;
    var addlist = Ext.data.Record.create([
        {name: 'id', type: 'string'},
        {name: 'workflow_id', type: 'string'},
        {name: 'workflow_item_id', type: 'string'},
        {name: 'workflow_item_type_id', type: 'string'},
        {name: 'workflow_item_name', type: 'string'},
        {name: 'workflow_structure_id', type: 'string'},
        {name: 'next', type: 'string'},
        {name: 'uid_next', type: 'string'},
        {name: 'trano', type: 'string'},
        {name: 'name', type: 'string'},
        {name: 'role_name', type: 'string'},
        {name: 'prj_kode', type: 'string'}
    ]);

    var storeUser = new Ext.data.Store({
        reader: new Ext.data.JsonReader({fields: addlist})
    });

    var groupByRole = '';
    var groupByType = '';

    Ext.each(userArray, function (t, index){
        var d = new addlist({
            id: t.id,
            workflow_id: t.workflow_id,
            workflow_item_id: t.workflow_item_id,
            workflow_item_type_id: t.workflow_item_type_id,
            workflow_item_name: t.workflow_item_name,
            workflow_structure_id: t.workflow_structure_id,
            uid_next: t.uid_next,
            trano: t.trano,
            next: t.next,
            name: t.name,
            role_name: t.role_name,
            prj_kode: t.prj_kode
        });
        storeUser.add(d);
        d = undefined;
        var cek = groupByRole.search(t.role_name);
        if (cek < 0)
        {
            if (groupByRole != "")
                groupByRole = groupByRole + "," + t.role_name;
            else
                groupByRole = t.role_name;
        }
        cek = groupByType.search(t.workflow_item_name);
        if (cek < 0)
        {
            if (groupByType != "")
                groupByType = groupByType + "," + t.workflow_item_name;
            else
                groupByType = t.workflow_item_name;
        }
    });

    var userColumns =  [
        new Ext.grid.RowNumberer(),
        {header: "Receiver", dataIndex: 'name', width: 220, renderer: function (v,p,r) {
            return '<div class="personicon"><b>' + r.data.name + '</b>&nbsp;,&nbsp;' + r.data.role_name + '<br>Transaction Type: <b>' + r.data.workflow_item_name + '</b><br>Project : <b>' + r.data.prj_kode + '</b></div>';
        }}
    ];

    var storeFilter = new Ext.data.SimpleStore({
        fields: ['val','filter'],
        data : [
            ['role','Person\'s Role'],
            ['type','Transaction Type']
        ]
    });
    var storeFilter2 = new Ext.data.ArrayStore({
        fields: ['filter']
    });
    var combo = new Ext.form.ComboBox({
        store: storeFilter,
        id: 'combofilter',
        displayField:'filter',
        valueField:'val',
        fieldLabel: 'Filter By',
        editable: false,
        typeAhead: true,
        mode: 'local',
        forceSelection: true,
        triggerAction: 'all',
        emptyText:'Select Criteria...',
        selectOnFocus:true,
        listeners: {
            select: { fn:
                    function(t,rec,indeks)
                    {
                        combo2.clearValue();
                        storeFilter2.removeAll();
                        var combolist = Ext.data.Record.create([
                            {name: 'filter', type: 'string'}
                        ]);
                        var teks = t.getValue();
                        switch(teks)
                        {
                            case 'role':
                                var arrayInsert = groupByRole.split(",");
                                break;
                            case 'type':
                                var arrayInsert = groupByType.split(",");
                                break;
                        }
                        Ext.each(arrayInsert,function(rows){
                            var d = new combolist({
                                filter: rows
                            });
                            storeFilter2.add(d);
                        });
                        combo2.setVisible(true);
                    }
            }
        }
    });

    var combo2 = new Ext.form.ComboBox({
        id: 'combofilter2',
        store: storeFilter2,
        displayField:'filter',
        valueField:'filter',
        fieldLabel: 'Value',
        editable: false,
        hidden: true,
        typeAhead: true,
        mode: 'local',
        forceSelection: true,
        triggerAction: 'all',
        emptyText:'Select Value..',
        selectOnFocus:true,
        listeners: {
            select: { fn:
                    function(t,rec,indeks)
                    {
                        var parentCombo = Ext.getCmp('combofilter').getValue();
                        var teks = t.getValue();
                        storeUser.clearFilter();
                        switch(parentCombo)
                        {
                            case 'role':
                                storeUser.filter('role_name',teks,true,false);
                                break;
                            case 'type':
                                storeUser.filter('workflow_item_name',teks,true,false);
                                break;
                        }
                        Ext.getCmp('user-grids').getView().refresh();
                    }
            }
        }
    });

    var bForm = new Ext.Window ({
        id: 'choose-next',
        layout: 'border',
        width: 350,
        height: 400,
        modal: true,
        resizable: false,
        title: 'Choose Document Receiver For Project ' + prjKode,
        style: 'margin-top: 10px',
        labelAlign: 'right',
        stateful: false,
        items : [
            new Ext.form.FormPanel({
                frame: true,
                region: 'north',
                width: 348,
                height: 70,
                items: [
                    combo,
                    combo2
                ]
            }),


            new Ext.grid.GridPanel({
                id: 'user-grids',
                region: 'center',
                width: 348,
                height: 248,
                loadMask: true,
                columns: userColumns,
                store: storeUser,
                sm: new Ext.grid.RowSelectionModel({
                    singleSelect:true
                }),
                viewConfig: {
                    forceFit: true,
                    enableRowBody:true,
                    showPreview:true,
                    getRowClass : function(record, rowIndex, p, ds) {
                        return 'x-grid3-row-collapsed';
                    }
                },
                listeners: {
                    'rowdblclick': function(g, rowIndex, e){
                        var record = g.getStore().getAt(rowIndex);
                        if (approval)
                        {
                            g.loadMask.show();
                            approveDocs(params,record)
                        }
                        bForm.close();
                    }
                }
            })
//                ]
//                })
        ],
        buttons: [
            {
                text: 'OK',
                id: 'ok-next',
                iconCls: 'silk-upd',
                handler: function(btn, ev) {
                    var row = Ext.getCmp('user-grids').getSelectionModel().getSelections();
                    var record = row[0];
                    if (approval)
                    {
                        approveDocs(params,record)
                    }
                    bForm.close();
                }

            },
            {
                text: 'Cancel',
                id: 'cancel',
                handler: function(btn, ev) {
                    bForm.close();
                    bForm = '';
                }

            }


        ]
    });
    bForm.show();
};

function approveDocs(params,dataArray)
{
    var addurl = '';
    if (dataArray != undefined)
        addurl = '/next/' + dataArray.data['uid_next'] + '/uid_next/' + dataArray.data['uid_next'] +  '/workflow_id/' + dataArray.data['workflow_id'] + '/workflow_item_id/' + dataArray.data['workflow_item_id'] + '/workflow_item_type_id/' + dataArray.data['workflow_item_type_id'] + '/trano/' + dataArray.data['trano'];
    Ext.getBody().mask('Loading..','x-mask-loading',false);
    Ext.Ajax.request({
        url: '/admin/workflow/approve' + addurl,
        method:'POST',
        success: function(resp){
            Ext.getBody().unmask();
            var returnData = Ext.util.JSON.decode(resp.responseText);
            if (returnData.success)
            {
                if (returnData.user != undefined && returnData.number == undefined)
                {
//                    if (returnData.params.alltrans != undefined)
//                    {
//                        var obj = returnData.params.alltrans;
//
//                        retTrans = Ext.util.JSON.encode(obj);
//                    }
//                    else
//                        var retTrans = params.trans_id;
//
//                    params = {
//                        multi: true,
//                        json_trans: retTrans,
//                        uid: params.uid,
//                        user:params.user,
//                        comment: params.comment,
//                        user_id: params.user_id,
//                        docType: params.docType,
//                        useOverride: true
//                    };

                    showNextPerson(returnData.user,params,false,returnData.prj_kode,true);
                    return false;
                }
                else
                {
                    if (Ext.getCmp('choose-next'))
                        Ext.getCmp('choose-next').close();
                    getDocs();
                    myPanel = Ext.getCmp('abs-budget-panel');
                    myPanel.body.load({
                        url: '/default/home/showprocessdocument',
                        scripts : true
                    });
                }
            }
            else
            {
                Ext.Msg.alert('Error', returnData.msg);
            }
        },
        failure:function( action){
            Ext.getBody().unmask();
            if(action.failureType == 'server'){
                obj = Ext.util.JSON.decode(action.response.responseText);
                Ext.Msg.alert('Error!', obj.errors.reason);
            }else{
                Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
            }
        },
        params: params
    });
}

function showResultText(btn, text){
    var comment='';
    if (btn == 'ok')
    {
        comment = text;
    }
    else if (btn == 'cancel')
        return false;
    params = {trans:trano, user: uid, comment: comment, user_id:user_id};
    Ext.Ajax.request({
        url: '/admin/workflow/reject',
        method:'POST',
        success: function(resp){
            var returnData = Ext.util.JSON.decode(resp.responseText);
            if (returnData.success)
            {
//    				Ext.Msg.alert('Success', 'Document has been rejected!');
                getDocs();
                myPanel = Ext.getCmp('abs-budget-panel');
                myPanel.body.load({
                    url: '/default/home/showprocessdocument',
                    scripts : true
                });
            }
            else
            {
                Ext.Msg.alert('Error', returnData.msg);
            }
        },
        failure:function( action){
            if(action.failureType == 'server'){
                obj = Ext.util.JSON.decode(action.response.responseText);
                Ext.Msg.alert('Error!', obj.errors.reason);
            }else{
                Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
            }
        },
        params: params
    });
};

var okButton = new Ext.Button({
    text: 'Approve All',
    iconCls: 'icon-add',
    scale: 'large',
    handler: function (){
        Ext.MessageBox.show({
            title: 'Comment',
            msg: 'Please enter comment:',
            width:300,
            buttons: Ext.MessageBox.OKCANCEL,
            multiline: true,
            fn: showResultText2
        });

        function showResultText2(btn, text){
            var comment='';
            if (btn == 'ok')
            {
                comment = text;
            }
            else if (btn == 'cancel')
                return false;

            var json = '';
            if (allTrans != '')
            {
                allTrans.each(function(items){
                    json += Ext.util.JSON.encode(items) + ',';
                });

                json = '[' + json.substring(0, json.length - 1) + ']';
            }

            params = {
                multi: true,
                json_trans: json,
                comment: comment,
                user_id:'<?=$this->userID?>',
                user:'<?=$this->uidNext?>',
                docType: 'ARFP',
                useOverride: true
            };
            approveDocs(params);
        }
    }
});

var cancelButton = new Ext.Button({
    text: 'Reject All',
    iconCls: 'icon-cancel',
    scale: 'large',
    handler: function (){
        Ext.MessageBox.show({
            title: 'Comment',
            msg: 'Please enter comment:',
            width:300,
            buttons: Ext.MessageBox.OKCANCEL,
            multiline: true,
            fn: showResultText
        });

        function showResultText(btn, text){
            var comment='';
            if (btn == 'ok')
            {
                comment = text;
            }
            else if (btn == 'cancel')
                return false;

            var json = '';
            if (allTrans != '')
            {
                allTrans.each(function(items){
                    json += Ext.util.JSON.encode(items) + ',';
                });

                json = '[' + json.substring(0, json.length - 1) + ']';
            }

            params = {
                multi: true,
                json_trans: json,
                comment: comment,
                user_id:'<?=$this->userID?>',
                user:'<?=$this->uidNext?>',
                docType: 'ARFP'
            };
            Ext.getBody().mask('Loading..','x-mask-loading',false);
            Ext.Ajax.request({
                url: '/admin/workflow/reject',
                method:'POST',
                success: function(resp){
                    Ext.getBody().unmask();
                    var returnData = Ext.util.JSON.decode(resp.responseText);
                    if (returnData.success)
                    {
//    				Ext.Msg.alert('Success', 'Document has been rejected!');
                        getDocs();
                        myPanel = Ext.getCmp('abs-budget-panel');
                        myPanel.body.load({
                            url: '/default/home/showprocessdocument',
                            scripts : true
                        });
                    }
                    else
                    {
                        Ext.Msg.alert('Error', returnData.msg);
                    }
                },
                failure:function( action){
                    Ext.getBody().unmask();
                    if(action.failureType == 'server'){
                        obj = Ext.util.JSON.decode(action.response.responseText);
                        Ext.Msg.alert('Error!', obj.errors.reason);
                    }else{
                        Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                    }
                },
                params: params
            });
        };


    }
});

var backButton = new Ext.Button({
    text: 'Cancel',
    scale: 'large',
    handler: function (){
        myPanel = Ext.getCmp('abs-budget-panel');
        myPanel.body.load({
            url: '<?php echo $this->urlBack; ?>',
            scripts : true
        });
    }
});

var editButton = new Ext.Button({
    text: 'Goto Edit ARF Pulsa',
    iconCls: 'icon-go',
    scale: 'large',
    handler: function (){
        var json = '';
        if (allTrans != '')
        {
            allTrans.each(function(items){
                json += Ext.util.JSON.encode(items) + ',';
            });

            json = '[' + json.substring(0, json.length - 1) + ']';
        }
        myPanel = Ext.getCmp('abs-budget-panel');
        myPanel.body.load({
            url: '/procurement/arf-pulsa/edit',
            scripts : true,
            params: {
                json: json
            }
        });
    }
});
</script>


<link rel="stylesheet" type="text/css" href="/css/table.css"/>

<div class="body">
    <div class="title">ARF PULSA</div>

    <?php if ($this->reject) { ?>
    <div class="last-reject">
                This Document was Rejected by <?php echo $this->lastReject[0]['name']; ?> at <?php echo date('d-m-Y H:i:s',strtotime($this->lastReject[0]['date'])); ?>
        <br />
        Comment : <?php echo $this->lastReject[0]['comment']; ?>
    </div>
    <?php } ?>

    <?php if ($this->dataFile != '') { ?>
    <div class="files">
        Attachment Files :<br />
        <ul>
            <?php foreach ($this->dataFile as $key => $val) { ?>
            <li>- <a href="#" onclick="location.href = '/default/file/download/path/files/filename/<?php echo $val['savename']; ?>';"><?php echo $val['filename']; ?></a></li>
            <?php } ?>
        </ul>
    </div>
    <?php } ?>

    <div class="etc">
        <div class="kiri-etc">
            <?=$displayNum?>
            <div class="blok">Document ID : <?=$this->caption_id?></div>
        </div>

    </div>

    <table id="mytable" cellspacing="0">
        <tr>
            <th scope="col"><center>No.</center></th>
            <th scope="col"><center>ARF No</center></th>
            <th scope="col"><center>Site</center></th>
            <th scope="col"><center>Job Number</center></th>
            <th scope="col"><center>Description</center></th>
            <th scope="col"><center>Qty</center></th>
            <th scope="col"><center>Unit Price</center></th>
            <th scope="col"><center>Total</center></th>
        </tr>
    <?php

        $i=0;
        $grandtotals=0;

        foreach($this->dataPulsaDetail as $k => $v)
        {
            $prj_kode = $k;
    ?>

        <tr>
        <th scope="row" class="spec" colspan="8">Project <?=$prj_kode?>
            <?php if (!$this->reject && !$this->show) { ?>
            &nbsp;&nbsp;<input id="<?=$prj_kode?>-button" type="submit" value="&gt;&gt;Reject this Project&lt;&lt;" onclick="rejectGeneric('<?=$v['item_id']?>','<?=$v['workflow_trans_id']?>','<?=$prj_kode?>','<?=$uid?>','<?=$prj_kode?>-button')"></input></th>
            <? } ?>
        </tr>
    <?php
            $totals = 0;
            foreach($v['detail'] as $k2 => $v2)
            {
    ?>
                <tr>
                    <th scope="row" class="spec"><?=($i+1)?></th>
                    <td><?=$v2['trano']?></td>
                    <td><?=$v2['sit_kode']?> - <?=$v2['sit_nama']?></td>
                    <td><?=$v2['workid']?></td>
                    <td><?=$v2['kode_brg']?> - <?=$v2['nama_brg']?></td>
                    <td align="right"><?=number_format($v2['qty'],4)?></td>
                    <td align="right"><?=number_format($v2['harga'],2)?></td>
                    <td align="right"><?=number_format($v2['total'],2)?></td>

                </tr>
    <?php
                $totals = $totals + ($v2['qty'] * $v2['harga']);
                $grandtotals += ($v2['qty'] * $v2['harga']);
                $i++;
            }
    ?>

        <tr>
            <th scope="row" class="spec" colspan="7">Total</th>
            <td align="right"><?=number_format($totals,2)?></td>
        </tr>
    <?php
        }
    ?>

        <tr>
            <th scope="row" class="spec" colspan="7">Grand Total</th>
            <td align="right" ><?=number_format($grandtotals,2)?></td>
        </tr>
    </table>

    <?php
    if ( $this->etc[0]['user_approval'] != '')
    {
        ?>
        <div class="all-approve">
            <b>Approval History</b></br>
            <ul>
                <?php
                foreach ($this->etc[0]['user_approval'] as $key => $val)
                {
                    ?>
                    <li><?php echo "<b>" . $val['approve'] . "</b> " . date('d-m-Y H:i:s',strtotime($val['date'])) . " : " . $val['displayname'] . " (" . $val['display_name'] . ")<br />Sign : " . $val['signature'] . "<br />Comment : " . $val['comment']; ?></li>
                    <?
                }
                ?>
            </ul>
        </div>
        <?php
    }
    ?>
    <?php
    if ( $this->user_approval != '')
    {
        ?>
        <div class="all-approve">
            <b>Approval History</b></br>
            <ul>
                <?php
                foreach ($this->user_approval as $key => $val)
                {
                    ?>
                    <li><?php echo "<b>" . $val['approve'] . "</b> " . date('d-m-Y H:i:s',strtotime($val['date'])) . " : " . $val['displayname'] . " (" . $val['role_name'] . ")<br />Sign : " . $val['signature'] . "<br />Comment : " . $val['comment']; ?></li>
                    <?
                }
                ?>
            </ul>
        </div>
        <?php
    }
    ?>
    <div style="margin-top:15px;">
    <?php if (!$this->show && !$this->reject) { ?>
        <div id="back-button"  style="margin-left:5px;float: right;"></div>
        <div id="cancel-button"  style="margin-left:5px;float: right;"></div>
        <div id="ok-button"  style="margin-left:5px;float: right;"></div>

        <script type="text/javascript">
            okButton.render('ok-button');
            cancelButton.render('cancel-button');
            backButton.render('back-button');
        </script>
    <?php }
        if ($this->reject) {
    ?>
        <div id="edit-button"  style="margin-left:5px;float: right;"></div>
        <script type="text/javascript">
            editButton.render('edit-button');
        </script>
    <?php } ?>
    </div>
</div>