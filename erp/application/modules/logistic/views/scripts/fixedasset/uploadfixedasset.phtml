<script type="text/javascript">

    Ext.apply(Ext.form.VTypes,{
        numericText: "Only numbers are allowed.",
        numericMask: /[0-9]/,
        numericRe: /(^-?dd*.d*$)|(^-?dd*$)|(^-?.dd*$)/,
        numeric: function(v) {
            return function() { return this.numericRe.test(v)} ;
            }
    });


    var editor = new Ext.ux.grid.RowEditor({
        saveText: 'Update',
        clicksToEdit: 2
    });
    
     function showcoalist(tipe)
        {
            var coastore = new Ext.data.Store({
                autoLoad: true,
                url: '/finance/paymentreimbursement/getcoalist',
                reader: new Ext.data.JsonReader({
                    root: 'data',
                    totalProperty: 'total',
                    fields: [{
                            name: 'coa_kode'
                        }, {
                            name: 'coa_nama'
                        }, {
                            name: 'tipe'
                        }]
                })

            })

            var coagrid = new Ext.grid.GridPanel({
                store: coastore,
                viewConfig: {
                    forceFit: true
                },
                height: 300,
                columns: [{
                        header: 'COA CODE',
                        dataIndex: 'coa_kode',
                        align: 'center',
                        sortable: true
                    }, {
                        header: 'COA NAME',
                        dataIndex: 'coa_nama',
                        align: 'center',
                        sortable: true
                    }, {
                        header: 'Type',
                        dataIndex: 'tipe',
                        align: 'center',
                        sortable: true
                    }],
                bbar: new Ext.PagingToolbar({
                    id: 'paging-coa',
                    pageSize: 20,
                    store: coastore,
                    displayInfo: true,
                    displayMsg: 'Displaying data {0} - {1} of {2}',
                    emptyMsg: "No data to display"
                }), tbar: [{
                        text: 'Search By',
                        xtype: 'label',
                        style: 'margin-left:5px'
                    }, {
                        xtype: 'combo',
                        width: 100,
                        allowBlank: false,
                        store: new Ext.data.SimpleStore({
                            fields: ['name', 'nilai'],
                            data: [
                                ['Coa Code', 1],
                                ['Coa Name', 2],
                                ['Coa Type', 3]
                            ]
                        }),
                        valueField: 'nilai',
                        displayField: 'name',
                        typeAhead: true,
                        forceSelection: true,
                        editable: false,
                        mode: 'local',
                        triggerAction: 'all',
                        selectOnFocus: true,
                        value: 1,
                        id: 'option'
                    }, {
                        xtype: 'textfield',
                        id: 'search',
                        style: 'margin-left:10px',
                        enableKeyEvents: true,
                        width: 100,
                        listeners: {
                            'keyup': function(txttext, event)
                            {
                                var txttext = txttext.getValue();
                                if (txttext != "" && txttext.toString().length >= 3)
                                {
                                    var option = Ext.getCmp('option').getValue();
                                    var search = Ext.getCmp('search').getValue();

                                    coastore.proxy.setUrl('/finance/paymentreimbursement/getcoalist/search/' + search + '/option/' + option);
                                    coastore.reload();
                                    coagrid.getView().refresh();
                                }
                            }
                        }
                    }],
                listeners:
                        {
                            'rowdblclick': function(gridaktif, rowIndex, e)
                            {
                                isDbClick = true;
                                var coa = gridaktif.getStore().getAt(rowIndex);
                                var coa_kode = coa.get('coa_kode');

                                if (tipe == 'debet')
                                {
                                    Ext.getCmp('coa_debit').setValue(coa_kode);
                                } else if (tipe == 'credit')
                                {
                                    Ext.getCmp('coa_credit').setValue(coa_kode);
                                
                                } 
//                                else if (tipe == 'debit_exchange')
//                                {
//                                    Ext.getCmp('coa_debit_exchange').setValue(coa_kode);
//                                
//                                } else if (tipe == 'credit_exchange')
//                                {
//                                    Ext.getCmp('coa_credit_exchange').setValue(coa_kode);
//                                }

                                coawindow.close();

                            }
                        }



            })

            var coawindow = new Ext.Window({
                title: 'COA List',
                id: 'coa-list-window',
                layout: 'absolute',
                minHeight: 200,
                stateful: false,
                modal: true,
                resizable: false,
                closeAction: 'close',
                width: 432,
                height: 330,
                loadMask: true,
                items: [
                    coagrid
                ]

            })

            coawindow.show();
        }

    function showkategori ()
    {
        var kategoristore = new Ext.data.Store ({
            autoLoad:true,
            url:'/finance/kategoriasset/getkategoriasset',
            reader:new Ext.data.JsonReader ({
                root:'data',
                totalProperty:'total',
                fields:[{
                    name:'id'
                },{
                    name:'kode_ktfa'
                },{
                    name:'nama'
                },{
                    name:'coa_debit'
                },{
                    name:'coa_credit'
                }]
            })

        })

        var kategorigrid = new Ext.grid.GridPanel ({

            store:kategoristore,
            viewConfig:{
                forceFit:true
            },
            height:300,
            columns:[{
                header:'Kode Kategori',
                dataIndex:'kode_ktfa',
                align:'center',
                sortable:true
            },{
                header:'Name',
                dataIndex:'nama',
                align:'center',
                sortable:true
            }],
            bbar:new Ext.PagingToolbar ({
                id: 'paging-coa',
                pageSize: 20,
                store: kategoristore,
                displayInfo: true,
                displayMsg: 'Displaying data {0} - {1} of {2}',
                emptyMsg: "No data to display"
            }),
            listeners:
            {
                'rowclick':function(gridaktif,rowIndex,e)
                {
                    isDbClick = true;
                    editor.startEditing((editor.getCurrentRowIndex()));
                    var kategori = gridaktif.getStore().getAt(rowIndex);
                    var kode = kategori.get('kode_ktfa');
//                        var coa_name = coa.get('coa_nama');
                    Ext.getCmp('kode_kategori').setValue(kode);
//                        Ext.getCmp('coa-name').setValue(coa_name);

                    kategoriwindow.close();

                }
            }



        })


        var kategoriwindow = new Ext.Window ({

            title:'Kategori List',
            id:'kategori-list-window',
            layout:'absolute',
            minHeight: 200,
            stateful:false,
            modal: true,
            resizable: false,
            closeAction: 'close',
            width: 432,
            height: 330,
            loadMask:true,
            items:[
                kategorigrid
            ]

        })

        kategoriwindow.show();
    }

    function deleterowgrid (idItem)
    {
        Ext.MessageBox.confirm('Confirm', 'Are you sure want to delete this?', function(btn){
            if (btn == 'yes')
            {
                var store = Ext.getCmp('request-grid').getStore();
                var dat = store.getById(idItem);
//                var row = storevoucher.getById(Ext.getCmp('create-bank-payment-voucher').idEdit);

                if (dat)
                {
                    store.remove(dat);
//                    Ext.getCmp('create-bank-payment-voucher').stat = 'new';
//                    Ext.getCmp('create-bank-payment-voucher').idEdit = '';
                    Ext.getCmp('request-grid').getView().refresh();
                }

            }
        });
    }

    Ext.onReady(function(){

        Ext.QuickTips.init();

        function windowinsert ()
        {
            var formpanel = new Ext.form.FormPanel ({

                title:'Insert Brand',
                id:'insert-brand',
                frame:true,
                layout:'form',
                width:346,
                items:[{
                    xtype:'textfield',
                    fieldLabel:'Brand Code ',
                    labelStyle:'width:140',
        //                        width:160,
                    allowBlank: false,
                    id:'brand-code',
                    maxLength:2
                },{
                    xtype:'textfield',
                    fieldLabel:'Brand Name ',
                    labelStyle:'width:140',
        //                        width:160,
                    allowBlank: false,
                    id:'brand-name'
                }],
                buttons:[{
                    text:'Submit',
                    handler:function(btn,ev)
                    {
                        Ext.getCmp('insert-brand').getForm().submit({
                            method:'POST',
                            url:'/logistic/logisticbarang/doinsertbrand',
                            success:function(thisForm,response){
                                windowinsert.close();

                            },
                            failure:function(thisForm,response){
                                if (response.failureType == 'server')
                                {
                                    var resp = Ext.util.JSON.decode(response.response.responseText);
                                    Ext.Msg.alert('Error',resp.pesan);
                                }
                            }
                        })
                    }
                },{
                    text:'Close',
                    handler:function(btn,ev)
                    {
                        windowinsert.close();
                    }
                }]

            })

            var windowinsert = new Ext.Window ({

            //                title:'Choose Brand',
                id:'window-insert',
                layout:'absolute',
                minHeight: 200,
                stateful:false,
                modal: true,
                resizable: false,
                closeAction: 'close',
                width: 360,
                height:150,
                loadMask:true,
                items:[formpanel]

            })

            windowinsert.show();
        }

        var formpanel = new Ext.form.FormPanel ({

            title:'Upload Fixed asset',
            renderTo:'upload-fixedasset',
            frame:true,
            fileUpload: true,
            width:600,
            bodyStyle: 'padding: 10px 10px 0 10px;',
            labelWidth: 100,
            defaults: {
//                anchor: '95%'
            },
            items:[{
                xtype:'combo',
                id:'location',
                width:140,
                store: new Ext.data.SimpleStore({
                    fields:['nilai','name'],
                    data:[
                            ['Central Storage','Central Storage'],
                            ['Warehouse Storage','Warehouse Storage']
                        ]
                }),
                valueField:'nilai',
                displayField:'name',
                typeAhead: true,
                forceSelection: true,
                editable: false,
                mode: 'local',
                triggerAction: 'all',
                selectOnFocus: true,
                fieldLabel:'Storage Location ',
                allowBlank:false,
                listeners:{
                    'select':function(combo,record,index)
                    {
                        Ext.getCmp('storage').clearValue();
                        Ext.getCmp('storage').getStore().load({
                            params: {
                                type: record.data.nilai
                            }
                        });
                    }
                }
            },{
                xtype:'combo',
                width:140,
                fieldLabel:'Storage ',
                store: new Ext.data.Store({
                    fields:['nilai','name'],
                    proxy: new Ext.data.HttpProxy({
                        url: '/logistic/fixedasset/getstorage'
                    }),
                    reader: new Ext.data.JsonReader({
                        totalProperty: 'total',
                        root: 'data'
                    }, [{
                            name: 'gdg_nama'
                        },{
                            name: 'gdg_kode'
                        }])
                }),
                valueField:'gdg_nama',
                displayField:'gdg_nama',
                typeAhead: true,
                forceSelection: true,
                editable: true,
                mode: 'local',
                triggerAction: 'all',
                selectOnFocus: true,
                id:'storage',
                allowBlank:false,
                listeners: {
                        'select': function(combo, record, index)
                        {
                            Ext.getCmp('gdg_kode_id').setValue('');
                            Ext.getCmp('gdg_kode_id').setValue(record.data.gdg_kode);

                        }
                    }
                },
                {
                    xtype: 'textfield',
                    fieldLabel: '',
                    id: 'gdg_kode_id',
                    allowBlank: false,
                    hidden:true
                },
            {
                xtype: 'fileuploadfield',
                id: 'form-file',
                emptyText: 'Select a File',
                fieldLabel: 'File Excel ',
                name: 'file-path',
                buttonText: '',
                anchor:'95%',
                buttonCfg: {
                    iconCls: 'upload-icon'
                },
                allowBlank: false
            }],
            buttons:[{
                text:'Download Sample Format of Fixed Asset',
                handler: function(){
                    window.open('/default/file/download/type/fixed_asset','mywin',
                    'left=20,top=20,width=100,height=20,toolbar=0,resizable=0');
                }
            },{
                text:'Upload',
                handler:function (){

                    formpanel.getForm().submit ({

                        url: '/logistic/fixedasset/douploadfixedasset',
                        waitMsg: 'Uploading your file...',
                        success: function(fp, o)
                        {
                            var json = Ext.util.JSON.encode(o.result);
                            var jsonDataPosts = '{"posts" : ' + Ext.util.JSON.encode(o.result.RESULT.posts) + '}';
                            var jsonDataFields = Ext.util.JSON.encode(o.result.RESULT.fields);

                            var Posts = Ext.util.JSON.decode(jsonDataPosts);

                            var jsonData = Ext.util.JSON.decode(json);

                            var reader = new Ext.data.JsonReader({
                                idProperty: 'id',
                                root: 'posts',
                                fields: jsonData.RESULT.fields
                            });

                            var store = new Ext.data.Store({
                                id: 'asset-store',
                                reader: reader
                            });

                            if(grid != undefined)
                            {
                                grid.destroy();
                            }

                            var theData = Ext.util.JSON.decode(jsonDataPosts);
                            store.loadData(theData);


                            var grid = new Ext.grid.GridPanel({
                            id: 'request-grid',
                            store: store,
                            height: 400,
                            frame: true,
//                            viewConfig:{
//                                forceFit:true
//                            },
                            view: new Ext.grid.GridView({
                                enableRowBody:true,
                                getRowClass:function(record, rowIndex, p, store) {
                                    var valid = parseInt(record.get('numValid'));
                                    if (valid > 0)
                                        return 'x-grid3-row-with-body3';
                                }
                            }),

                            renderTo:'fi-grid',
                            tbar: [{
                                        text: 'Refresh',
                                        iconCls: 'silk-table-refresh',
                                        handler: function(){
                                            Ext.MessageBox.confirm('Confirm', 'This action will remove all changes on grid, Refresh data now?',
                                                function(btn)
                                                {
                                                    if (btn == 'yes')
                                                    {
                                                        grid.getStore().removeAll();
                                                        grid.getStore().loadData(Ext.util.JSON.decode(jsonDataPosts));
                                                    }
                                                }
                                            );

                                        },
                                        scope: this
                                    },'-',{
                                        text:'Create Brand',
                                        handler:function ()
                                        {
                                            windowinsert ();
                                        }
                                    }],
                                   buttons: [{
                                                text: 'Submit',
                                                iconCls: 'icon-save',
                                                handler: function(){
                                                    if (grid.getStore().getCount() == 0)
                                                        return false;
                                                    Ext.MessageBox.confirm('Confirm', 'This action will submit Fixed asset, Proceed?',
                                                        function(btn)
                                                        {
                                                            if (btn == 'yes')
                                                            {
                                                                var json='', valid = true;
                                                                grid.getStore().each(function(store){
                                                                    var encode = Ext.util.JSON.encode(store.data);
                                                                    if (encode != undefined)
                                                                        json += encode + ',';

                                                                });

                                                                json = '[' + json.substring(0, json.length - 1) + ']';
                                                                var gdg_kode = Ext.getCmp('gdg_kode_id').getValue();

                                                                params = {posts:json,gdg_kode:gdg_kode};

                                                                Ext.Ajax.request ({
                                                                    url:'/logistic/fixedasset/doinsertuploadfixedasset',
                                                                    method:'POST',
                                                                    params:params,
                                                                    success:function(result){
                                                                        obj = Ext.util.JSON.decode(result.responseText);

                                                                        if (obj.success)
                                                                        {
                                                                            Ext.Msg.alert ('Message','Success, Data has been saved');
                                                                            myPanel = Ext.getCmp('abs-budget-panel');
                                                                            myPanel.body.load({
                                                                            url: '/logistic/fixedasset/menu',
                                                                            scripts : true
                                                                            });
                                                                        }else
                                                                        {
                                                                            Ext.Msg.alert('Error', obj.msg);
                                                                        }
                                                                    },
                                                                    failure:function( action){
                                                                        if(action.failureType == 'server'){
                                                                          obj = Ext.util.JSON.decode(action.response.responseText);
                                                                          Ext.Msg.alert('Error!', obj.errors.reason);
                                                                        }else{
                                                                          Ext.Msg.alert('Warning!', 'Server is unreachable : ' + action.response.responseText);
                                                                        }
                                                                    }
                                                                })
                                                            }
                                                        }
                                                    );

                                                },
                                                scope: this
                                            },{
                                                text: 'Cancel',
                                                iconCls: 'icon-cancel',
                                                handler: function(){
                                                    Ext.getCmp('form-file').enable();
                                                    Ext.getCmp('request-grid').getStore().removeAll();
                                                    Ext.getCmp('request-grid').disable();
                                                }
                                            }],
                            plugins: [editor],
                            columns: [new Ext.grid.RowNumberer(),
                                {
                                    header: "Action",
                                    width: 40,
                                    dataIndex: 'id',
                                    css:'text-align:center;',
                                    renderer: function (v,p,r) {
                                        return '<a href="#" onclick="deleterowgrid(\'' + r.id + '\')"><img src="/images/g_rec_del.png"></a>';
                                    }
                                },{
                                    header: 'New Code',
                                    dataIndex: 'new_code',
                                    width: 100,
                                    sortable: true,
                                    editor: {
                                        xtype:'textfield'
                                    }
                                },{
                                    header: 'Clasification',
                                    dataIndex: 'clasification',
                                    width: 100,
                                    sortable: true,
                                    editor: {
                                        xtype:'textfield'
                                    }
                                },{
                                    header: 'Code Part Old',
                                    dataIndex: 'code_part_old',
                                    width: 120,
                                    sortable: true,
                                    editor: {
                                        xtype:'textfield'
                                    }
                                },{
                                    header: 'Marking date',
                                    dataIndex: 'marking_date',
                                    width: 80,
                                    sortable: true,
                                    renderer: Ext.util.Format.dateRenderer('d M Y'),
                                    editor: {
                                        xtype:'datefield'
                                    }
                                },{
                                    header: 'Accessories',
                                    dataIndex: 'accessories',
                                    width: 160,
                                    sortable: true,
                                    editor: {
                                        xtype:'textfield'
                                    }
                                },{
                                    header: 'Brand',
                                    dataIndex: 'brand',
                                    width: 80,
                                    sortable: true,
                                    editor:{

                                    xtype:'combo',
                                    store: new Ext.data.Store({
                                        autoLoad: true,
                                        fields:['name','nilai'],
                                        proxy: new Ext.data.HttpProxy({
                                            url: '/logistic/logisticbarang/getbrand'
                                        }),
                                        reader: new Ext.data.JsonReader({
                                            totalProperty: 'total',
                                            root: 'data'
                                        }, [{
                                                name: 'mrk_nama'
                                            },{
                                                name: 'mrk_nama'
                                            }])
                                    }),
                                    valueField:'mrk_nama',
                                    displayField:'mrk_nama',
                                    typeAhead: true,
                                    forceSelection: true,
                                    editable: true,
                                    mode: 'remote',
                                    triggerAction: 'all',
                                    selectOnFocus: true,
                                    id:'mrk',
                                    allowBlank:false

                                    }
                                },{
                                    header: 'Type',
                                    dataIndex: 'type',
                                    width: 80,
                                    sortable: true,
                                    editor: {
                                        xtype:'textfield'
                                    }
                                },{
                                    header: 'Serial Number',
                                    dataIndex: 'serial_number',
                                    width: 80,
                                    sortable: true,
                                    editor: {
                                        xtype:'textfield'
                                    }
                                },{
                                    header: 'Description',
                                    dataIndex: 'description',
                                    width: 160,
                                    sortable: true,
                                    editor: {
                                        xtype:'textfield'
                                    }
                                },{
                                    header: 'Purchase Status',
                                    dataIndex: 'purchase_status',
                                    width: 100,
                                    sortable: true,
                                    editor: {
                                        xtype:'textfield'
                                    }
                                },{
                                    header: 'Purchase Date',
                                    dataIndex: 'purchase_date',
                                    width: 80,
                                    sortable: true,
                                    renderer: Ext.util.Format.dateRenderer('d M Y')
                                },{
                                    header: 'Condition',
                                    dataIndex: 'condition',
                                    width: 80,
                                    sortable: true,
                                    editor:{
                                        xtype:'combo',
                                        store: new Ext.data.Store({
                                            autoLoad: true,
                                            fields:['name','nilai'],
                                            proxy: new Ext.data.HttpProxy({
                                                url: '/logistic/fixedasset/getkondisi'
                                            }),
                                            reader: new Ext.data.JsonReader({
                                                totalProperty: 'total',
                                                root: 'data'
                                            }, [{
                                                    name: 'kds_nama'
                                                },{
                                                    name: 'kds_nama'
                                                }])
                                        }),
                                        valueField:'kds_nama',
                                        displayField:'kds_nama',
                                        typeAhead: true,
                                        forceSelection: true,
                                        editable: true,
                                        mode: 'remote',
                                        triggerAction: 'all',
                                        selectOnFocus: true,
                                        id:'condition',
                                        allowBlank:false
                                    }
                                },{
                                    header: 'Valuta',
                                    dataIndex: 'valuta',
                                    width: 20,
                                    sortable: true,
                                    align:'center',
                                    editor:{
                                        xtype:'combo',
                                        id:'val_kode',
                                        width:100,
                                        store: new Ext.data.SimpleStore({
                                            fields:['nilai','name'],
                                            data:[
                                                    ['IDR','IDR'],
                                                    ['USD','USD']
                                                ]
                                        }),
                                        valueField:'nilai',
                                        displayField:'name',
                                        typeAhead: true,
                                        forceSelection: true,
                                        editable: false,
                                        mode: 'local',
                                        triggerAction: 'all',
                                        selectOnFocus: true,
                                        value:'IDR'
                                    }
                                },{
                                    header: 'Purchase Price',
                                    dataIndex: 'purchase_price',
                                    width: 100,
                                    sortable: true,
                                    align:'right',
                                    renderer: function(v,p,r){
                                        var value = Ext.util.Format.number(v,'?0,000.00');
                                        return value;
                                    },
                                    editor: {
                                        xtype:'textfield',
                                        vtype:'numeric'
                                    }
                                },{
                                    header: 'Depr Rate',
                                    dataIndex: 'depr_rate',
                                    width: 80,
                                    sortable: true,
                                    align:'right',
                                    renderer: function(v,p,r) {
                                        return v + ' ' + '%';
                                    },
                                    editor: {
                                        xtype:'textfield',
                                        vtype:'numeric'
                                    }
                                },{
                                    header: 'Depr Exp/Month',
                                    dataIndex: 'depr_exp',
                                    width: 80,
                                    sortable: true,
                                    align:'right',
                                    renderer: function(v,p,r){
                                        var value = Ext.util.Format.number(v,'?0,000.00');
                                        return value;
                                    },
                                    editor: {
                                        xtype:'textfield',
                                        vtype:'numeric'
                                    }
                                },
//                                    {
//                                    header: 'Total Depreciation',
//                                    dataIndex: 'total_depr',
//                                    width: 80,
//                                    sortable: true,
//                                    align:'right',
//                                    renderer: function(v,p,r){
//                                        var value = Ext.util.Format.number(v,'?0,000.00');
//                                        return value;
//                                    },
//                                    editor: {
//                                        xtype:'textfield',
//                                        vtype:'numeric'
//                                    }
//                                },
                                    {
                                    header: 'Status Asset',
                                    dataIndex: 'status_aktif',
                                    width: 80,
                                    sortable: true,
                                    editor:{
                                        xtype:'combo',
                                        id:'status_aktif',
                                        width:100,
                                        store: new Ext.data.SimpleStore({
                                            fields:['nilai','name'],
                                            data:[
                                                    [0,0],
                                                    [1,1]
                                                ]
                                        }),
                                        valueField:'nilai',
                                        displayField:'name',
                                        typeAhead: true,
                                        forceSelection: true,
                                        editable: false,
                                        mode: 'local',
                                        triggerAction: 'all',
                                        selectOnFocus: true,
                                        value:0
                                    },
                                    renderer : function(v, params, data){
                                        var status;
                                        if (v == '1')
                                        {
                                            status = 'Active';
                                        }
                                        else if (v == '' || v == undefined || v == '0')
                                        {
                                            status = 'Not Active';
                                        }
                                    return status;}
                                },{
                                    header: 'Kode Kategori',
                                    dataIndex: 'kode_kategori',
                                    width: 100,
                                    sortable: true,
                                    editor:{
                                        xtype:'trigger',
                                        id:'kode_kategori',
                                        triggerClass: 'teropong',
                                        allowBlank: false,
                                        editable : false,
                                        width:100,
                                        onTriggerClick:function()
                                        {
                                            editor.stopEditing();
                                            editor.hide();
                                           showkategori ();
                                        }

                                    }
                                },  
                                {
                                    header: 'COA Debit',
                                    dataIndex: 'coa_debit',
                                    width: 100,
                                    sortable: true,
                                    editor:{
                                        xtype:'combo',
                                        id:'coa_debit',
                                        triggerClass: 'teropong',
                                        allowBlank: false,
                                        editable : false,
                                        width:100,
                                        onTriggerClick:function()
                                        {
                                            editor.stopEditing();
                                            editor.hide();
                                            showcoalist('debet');
                                        }

                                    }
                                },
                                {
                                    header: 'COA Credit',
                                    dataIndex: 'coa_credit',
                                    width: 100,
                                    sortable: true,
                                    editor:{
                                        xtype:'combo',
                                        id:'coa_credit',
                                        triggerClass: 'teropong',
                                        allowBlank: false,
                                        editable : false,
                                        width:100,
                                        onTriggerClick:function()
                                        {
                                            editor.stopEditing();
                                            editor.hide();
                                            showcoalist('credit');
                                        }

                                    }
                                }
                                
                                ]
                                  });
                        }

                    })

                }
            },{
                text:'Cancel',
                handler:function(){
                    myPanel = Ext.getCmp('abs-budget-panel');
                    myPanel.body.load({
                    url: '/logistic/fixedasset/menu',
                    scripts : true
                    })
                }
            }]

        })



    })


</script>

    <div id="upload-fixedasset"></div>
    <br />
    <div id="fi-grid"></div>