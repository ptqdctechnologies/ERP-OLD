<script type="text/javascript">
<?php echo $this->action('popupgrid','grid'); ?>

function submitData(params,dataArray)
{
    submitUrl = '/humanresource/humanresource/submitohp/uid/<?php echo $this->uid; ?>';
    
    Ext.Ajax.request({
        url: submitUrl,
        method:'POST',
        success: function(result, request){
            var returnData = Ext.util.JSON.decode(result.responseText);
            if( !returnData.success) {
                Ext.Msg.alert('Error!', returnData.msg);
                 return false;
            } else {
                if (returnData.user != undefined && returnData.number == undefined)
                {
                    showNextPerson(returnData.user,params,'',returnData.prjKode);
                    return false;
                }
                else
                {

                    if (returnData.error == undefined || returnData.error == "")
                    {
                        Ext.Msg.alert('Success!', 'Your Temporary Overhead Project Budget has been submitted!<br>Transaction Number: <b>' + returnData.number + '</b><br>' + returnData.count + ' of ' + returnData.of + ' Row has been saved.');
                        Ext.getCmp('boq3-grid').getStore().removeAll();
                        Ext.getCmp('boq3-grid').disable();
                        Ext.getCmp('boq3-form').enable();
                        Ext.getCmp('boq3-form').getForm().reset();
//                                                                            getExchangeRate();
                        Ext.getCmp('gtotal-text').setText('');
                        Ext.getCmp('gtotal-text2').setText('');
                        myPanel = Ext.getCmp('abs-budget-panel');
                        myPanel.body.load({
                            url: '/humanresource/humanresource/addohp',
                            scripts : true
                        });
                    }
                    else
                    {
                        var errorMsg = '';
                        var successMsg = '';
                        var winTitle = '';

                        if (returnData.allfailed == undefined)
                        {
                            winTitle = 'Success Submitting Temporary Overhead Project Budget';
                            successMsg = '<center>Temporary Overhead Project Budget has been saved and submitted to current Workflow!' + '<br>Your Timesheet number is <b><font color="#ff0000">' + returnData.number + '</font></b><br><br><b>However, there\'s some Error on Your Workflow while System Submitting Your Temporary Overhead Project Budget, Please see the information below.</b></center>';
                        }
                        else
                        {
                            winTitle = 'Error Submitting Temporary Overhead Project Budget';
                            successMsg = '<center><b>There\'s some Error on Your Workflow while System Submitting Your Temporary Overhead Project Budget, Please see the information below.</b></center>'
                        }
                        var errRows =  Ext.util.JSON.decode(returnData.error);
                        Ext.each(errRows.msg,function(rows){
                            errorMsg += "<li>" + rows + "</li>";
                        });
                        if (errorMsg != "" || errorMsg != '')
                            errorMsg = "<ul>" + errorMsg +  "</ul>";

                        var nav = new Ext.Panel({
                            region: 'north',
                            margins:'3 0 3 3',
                            cmargins:'3 3 3 3',
                            html: successMsg
                        });

                        var nav2 = new Ext.Panel({
                            region: 'center',
                            title: 'Error Description',
                            margins:'3 0 3 3',
                            cmargins:'3 3 3 3',
		                    autoScroll: true,
                            html: errorMsg
                        });

                        var win = new Ext.Window({
                            title: winTitle,
                            closeAction: 'close',
                            width:300,
                            height:350,
                            plain:true,
                            layout: 'border',
                            modal: true,
                            closable: false,
                            items: [
                                nav,
                                nav2
                            ],
                            buttons: [
                                {
                                    text: 'OK',
                                    handler: function(){
                                        myPanel = Ext.getCmp('abs-budget-panel');
                                        myPanel.body.load({
                                            url: '/humanresource/humanresource/addohp',
                                            scripts : true
                                        });
                                        win.close();
                                    }
                                }
                            ]
                        });

                        win.show(this);
                    }
                }
            }
        }
        ,failure:function( action){
        if(action.failureType == 'server'){
        obj = Ext.util.JSON.decode(action.response.responseText);
        Ext.Msg.alert('Error!', obj.errors.reason);
        }
        },
            params: params
    });
}

function showNextPerson(userArray,params,isEdit,prjKode,approval)
{
    if (approval == undefined ||approval == '')
        approval = false;
    if (isEdit == undefined || isEdit == "")
        isEdit = false;
    var addlist = Ext.data.Record.create([
             {name: 'id', type: 'string'},
             {name: 'workflow_id', type: 'string'},
             {name: 'workflow_item_id', type: 'string'},
             {name: 'workflow_item_type_id', type: 'string'},
             {name: 'workflow_item_name', type: 'string'},
             {name: 'workflow_structure_id', type: 'string'},
             {name: 'next', type: 'string'},
             {name: 'uid_next', type: 'string'},
             {name: 'trano', type: 'string'},
             {name: 'name', type: 'string'},
             {name: 'role_name', type: 'string'},
             {name: 'prj_kode', type: 'string'}
        ]);

     var storeUser = new Ext.data.Store({
        reader: new Ext.data.JsonReader({fields: addlist})
    });

    var groupByRole = '';
    var groupByType = '';

    Ext.each(userArray, function (t, index){
        var d = new addlist({
            id: t.id,
            workflow_id: t.workflow_id,
            workflow_item_id: t.workflow_item_id,
            workflow_item_type_id: t.workflow_item_type_id,
            workflow_item_name: t.workflow_item_name,
            workflow_structure_id: t.workflow_structure_id,
            uid_next: t.uid_next,
            trano: t.trano,
            next: t.next,
            name: t.name,
            role_name: t.role_name,
            prj_kode: t.prj_kode
        });
        storeUser.add(d);
        d = undefined;
        var cek = groupByRole.search(t.role_name);
        if (cek < 0)
        {
            if (groupByRole != "")
                groupByRole = groupByRole + "," + t.role_name;
            else
                groupByRole = t.role_name;
        }
        cek = groupByType.search(t.workflow_item_name);
        if (cek < 0)
        {
            if (groupByType != "")
                groupByType = groupByType + "," + t.workflow_item_name;
            else
                groupByType = t.workflow_item_name;
        }
    });

    var userColumns =  [
        new Ext.grid.RowNumberer(),
        {header: "Receiver", dataIndex: 'name', width: 220, renderer: function (v,p,r) {
            return '<div class="personicon"><b>' + r.data.name + '</b>&nbsp;<span class="rolename">' + r.data.role_name + '<br>Transaction Type: ' + r.data.workflow_item_name + '<br>Project : ' + r.data.prj_kode + '</span></div>';
        }}
    ];

    var storeFilter = new Ext.data.SimpleStore({
        fields: ['val','filter'],
        data : [
            ['role','Person\'s Role'],
            ['type','Transaction Type']
        ]
    });
    var storeFilter2 = new Ext.data.ArrayStore({
        fields: ['filter']
    });
    var combo = new Ext.form.ComboBox({
        store: storeFilter,
        id: 'combofilter',
        displayField:'filter',
        valueField:'val',
        fieldLabel: 'Filter By',
        editable: false,
        typeAhead: true,
        mode: 'local',
        forceSelection: true,
        triggerAction: 'all',
        emptyText:'Select Criteria...',
        selectOnFocus:true,
        listeners: {
            select: { fn:
                    function(t,rec,indeks)
                    {
                       combo2.clearValue();
                       storeFilter2.removeAll();
                       var combolist = Ext.data.Record.create([
                         {name: 'filter', type: 'string'}
                       ]);
                       var teks = t.getValue();
                       switch(teks)
                       {
                           case 'role':
                            var arrayInsert = groupByRole.split(",");
                           break;
                           case 'type':
                            var arrayInsert = groupByType.split(",");
                           break;
                       }
                       Ext.each(arrayInsert,function(rows){
                           var d = new combolist({
                                filter: rows
                           });
                           storeFilter2.add(d);
                       });
                       combo2.setVisible(true);
                    }
            }
        }
    });

    var combo2 = new Ext.form.ComboBox({
        id: 'combofilter2',
        store: storeFilter2,
        displayField:'filter',
        valueField:'filter',
        fieldLabel: 'Value',
        editable: false,
        hidden: true,
        typeAhead: true,
        mode: 'local',
        forceSelection: true,
        triggerAction: 'all',
        emptyText:'Select Value..',
        selectOnFocus:true,
        listeners: {
            select: { fn:
                    function(t,rec,indeks)
                    {
                       var parentCombo = Ext.getCmp('combofilter').getValue();
                       var teks = t.getValue();
                       storeUser.clearFilter();
                       switch(parentCombo)
                       {
                           case 'role':
                            storeUser.filter('role_name',teks,true,false);
                           break;
                           case 'type':
                            storeUser.filter('workflow_item_name',teks,true,false);
                           break;
                       }
                       Ext.getCmp('user-grids').getView().refresh();
                    }
            }
        }
    });

    var bForm = new Ext.Window ({
    id: 'choose-next',
    layout: 'border',
    width: 350,
    height: 400,
    modal: true,
    resizable: false,
    title: 'Choose Document Receiver For Project ' + prjKode,
    style: 'margin-top: 10px',
    labelAlign: 'right',
    stateful: false,
    items : [
            new Ext.form.FormPanel({
                frame: true,
                region: 'north',
                width: 348,
                height: 70,
                items: [
                        combo,
                        combo2
                ]
            }),


                    new Ext.grid.GridPanel({
                        id: 'user-grids',
                        region: 'center',
                        width: 348,
                        height: 248,
                        loadMask: true,
                        columns: userColumns,
                        store: storeUser,
                        sm: new Ext.grid.RowSelectionModel({
                            singleSelect:true
                        }),
                        viewConfig: {
                            forceFit: true,
                            enableRowBody:true,
                            showPreview:true,
                            getRowClass : function(record, rowIndex, p, ds) {
                                            return 'x-grid3-row-collapsed';
                                          }
                        },
                        listeners: {
                            'rowdblclick': function(g, rowIndex, e){
                                    var record = g.getStore().getAt(rowIndex);
                                    if (approval)
                                    {
                                        approveDocs(params,record)
                                    }
                                    else
                                    {
                                        if (isEdit)
                                            submitData2(params,record);
                                        else
                                            submitData(params,record);
                                    }
                                    bForm.close();
                            }
                        }
                    })
//                ]
//                })
            ],
             buttons: [
                      {
                         text: 'OK',
                         id: 'ok-next',
                         iconCls: 'silk-upd',
                         handler: function(btn, ev) {
                            var row = Ext.getCmp('site-grids').getSelectionModel().getSelections();
                            var record = row[0];
                            if (approval)
                            {
                                approveDocs(params,record)
                            }
                            else
                            {
                                if (isEdit)
                                    submitData2(params,record);
                                else
                                    submitData(params,record);
                            }
                            bForm.close();
                          }

                      },
                      {
                         text: 'Cancel',
                         id: 'cancel',
                         handler: function(btn, ev) {
                             bForm.close();
                             bForm = '';
                          }

                      }


                        ]
        });
        bForm.show();
};

//** Number **//
Ext.apply(Ext.form.VTypes, {
	'numeric': function(){

			/*****************************************************************
			DESCRIPTION: Validates that a string contains only valid numbers.
			PARAMETERS:
			   strValue - String to be tested for validity
			RETURNS:
			   True if valid, otherwise false.
			******************************************************************/
			  var objRegExp  =  /(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/;
			  return function(strValue){
				  //check for numeric characters
				  return objRegExp.test(strValue);
			  }
	}(),
	'numericText': 'Only numbers are allowed'
});

//** Number **//
Ext.apply(Ext.form.VTypes, {
	'numeric': function(){

			/*****************************************************************
			DESCRIPTION: Validates that a string contains only valid numbers.
			PARAMETERS:
			   strValue - String to be tested for validity
			RETURNS:
			   True if valid, otherwise false.
			******************************************************************/
			  var objRegExp  =  /(^-?\d\d*\.\d*$)|(^-?\d\d*$)|(^-?\.\d\d*$)/;
			  return function(strValue){
				  //check for numeric characters
				  return objRegExp.test(strValue);
			  }
	}(),
	'numericText': 'Only numbers are allowed'
});

//var myGridSummary = Ext.extend(Ext.ux.grid.GridSummary, {
//    renderSummary : function(o, cs, cm) {
//        cs = cs || this.view.getColumnData();
//        var cfg = cm.config,
//            buf = [],
//            last = cs.length - 1;
//
//        for (var i = 0, len = cs.length; i < len; i++) {
//            var c = cs[i], cf = cfg[i], p = {};
//
//            p.id = c.id;
//            p.style = c.style;
//            p.css = i === 0 ? 'x-grid3-cell-first ' : (i == last ? 'x-grid3-cell-last ' : '');
//
//            if (cf.summaryType || cf.summaryRenderer) {
//                p.value = (cf.summaryRenderer || c.renderer)(o.data[c.name], p, o);
//            } else {
//                p.value = '';
//            }
//            if (p.value === undefined || p.value === "") {
//                p.value = "&#160;";
//            }
//            buf[buf.length] = this.cellTpl.apply(p);
//        }
//
//        return this.rowTpl.apply({
//            tstyle: 'width:' + (this.view.getTotalWidth() * 2) + ';',
//            cells: buf.join('')
//        });
//    }
//});


//var summary = new Ext.ux.grid.GridSummary();
//
//Ext.ux.grid.GridSummary.Calculations = {
//	    'jumlah': function(v, record, colName, data, rowIdx){
//            return data[colName] + Ext.num(parseFloat(v.toString().replace(/\$|\,/g,'')), 0);
//	    }
//};

function totals(t, params, data){

     var total = [];
     Ext.getCmp('boq3-grid').getStore().each(function (stores){

        var val_kode = stores.data['val_kode'];
        if (total[val_kode] == undefined)
        {
            total[val_kode] = Ext.num(parseFloat(stores.data['total'].toString().replace(/\$|\,/g,'')), 0);
        }
         else
        {
            total[val_kode] = Ext.num(total[val_kode],0) + Ext.num(parseFloat(stores.data['total'].toString().replace(/\$|\,/g,'')), 0);
        }

     });
	 return CommaFormatted(total['IDR'].toFixed(2));

}

var msg = function(title, msg){
    Ext.Msg.show({
        title: title,
        msg: msg,
        minWidth: 200,
        modal: true,
        icon: Ext.Msg.INFO,
        buttons: Ext.Msg.OK
    });
};

var grid;

var fp = new Ext.FormPanel({
    renderTo: 'fi-form',
    id: 'boq3-form',
    fileUpload: true,
    width: 500,
    frame: true,
    title: 'File Overhead Project Budget Upload Form',
    autoHeight: true,
    bodyStyle: 'padding: 10px 10px 0 10px;',
    labelWidth: 100,
    defaults: {
        anchor: '95%'
    },
    items: [
//	{xtype:'trigger', name:'prj_kode',id: 'prj_kode_text',fieldLabel: 'Project Code', triggerClass: 'search-button',
//		onTriggerClick: function( ){
//		projectPopUphandler();
//		},
//		allowBlank: false,
//		editable: false
//	},
//	{fieldLabel: '',
//		xtype: 'textfield',
//        id:'prj_nama_text',
//        name: 'prj_nama',
//        readOnly:true,
//        style: { 'font-weight' : 'bold' }
//    },
//	{xtype:'trigger', name:'sit_kode',id: 'sit_kode_text',fieldLabel: 'Site Code',  triggerClass: 'search-button',
//		onTriggerClick: function( ){
//		if (Ext.getCmp('prj_kode_text').getValue() != '')
//			sitePopUphandler();
//		},
//		editable: false,
//		allowBlank: false
//	},
//	{fieldLabel: '',
//		xtype: 'textfield',
//        id:'sit_nama_text',
//        name: 'sit_nama',
//        readOnly:true,
//        style: { 'font-weight' : 'bold' }
//    },
	{
        xtype: 'fileuploadfield',
        id: 'form-file',
        emptyText: 'Select a File',
        fieldLabel: 'File Excel',
        name: 'file-path',
        buttonText: '',
        buttonCfg: {
            iconCls: 'upload-icon'
        },
        allowBlank: false
    },
//	{fieldLabel: 'USD Exchange Rate',
//		xtype: 'textfield',
//		vtype: 'numeric',
//        id:'rateidr',
//        name: 'rateidr',
//        renderer: function(v){
//	    return v ? Ext.util.Format.number(v, '0,0') : '';
//  		}
//    },
	{fieldLabel: 'Description',
		xtype: 'textfield',
        id:'ket',
        name: 'ket'
    }],
    buttons: [
        {
	        text: 'Download Sample Format of OHP',
	        handler: function(){
	        	window.open('/default/file/download/type/ohp','mywin',
	            'left=20,top=20,width=100,height=20,toolbar=0,resizable=0');
	    		}
    	},
        {
        text: 'Upload',
        handler: function(){
            if(fp.getForm().isValid()){

                fp.getForm().submit({
                    url: '/humanresource/humanresource/uploadohp',
                    waitMsg: 'Uploading your file...',
                    success: function(fp, o){
                        msg('Success', 'Processed file "'+ o.result.file +'" on the server');

                        Ext.getCmp('boq3-form').disable();
                        if (grid != undefined)
                        {
                            grid.enable();
                        }
                        var json = Ext.util.JSON.encode(o.result);
                        var jsonDataPosts = '{"posts" : ' + Ext.util.JSON.encode(o.result.RESULT.posts) + '}';
                        var jsonDataFields = Ext.util.JSON.encode(o.result.RESULT.fields);

                        var Posts = Ext.util.JSON.decode(jsonDataPosts);

                        var jsonData = Ext.util.JSON.decode(json);

                        var reader = new Ext.data.JsonReader({
                            idProperty: 'id',
                            root: 'posts',
                            fields: jsonData.RESULT.fields
                        });

                        var store = new Ext.data.Store({
                            id: 'boq3-store',
                            reader: reader
                        });

                        if(grid != undefined)
                        {
                            grid.destroy();
                        }

                        var theData = Ext.util.JSON.decode(jsonDataPosts);
                        store.loadData(theData);

                        var editor = new Ext.ux.grid.RowEditor({
                            saveText: 'Update',
                            clicksToEdit: 2,
                            listeners: {
                                'afteredit': function(ed,obj,rec,index){
//                                    var recs = store.getAt(index);
//                                    recs.data['total'] = parseFloat(rec.data['qty']) * parseFloat(rec.data['harga']);

                                    ed.record.commit(); //Commit changes into store
                                }
                            }
                        });

                        var expander = new Ext.ux.grid.RowExpander({
                            tpl : new Ext.Template(
                                    '<div style="margin-left:45px;"><p><br>',
                                    '<p><b>Project Name:</b> {prj_nama}</p><br>',
                                    '<p><b>Site Name:</b> {sit_nama}</p><br>',
                                    '<p><b>Work Name:</b> {workname}</p><br>',
                                    '<p><b>Product Name:</b> {nama_brg}</p><br></div>'
                                   )
                        });

                        var datas = new Ext.data.SimpleStore({
                            fields:['type','name']
                                    ,data:[['USD','USD'],['IDR','IDR']]
                                });

                        var totJum = 0;
                        var totJumUSD = 0;

                        grid = new Ext.grid.GridPanel({
                            id: 'boq3-grid',
                            store: store,
                            width: 800,
                            height: 400,
                            frame: true,
                            bbar: new Ext.Toolbar({
                                    id: 'gtotal-bbar',
                                    style:"text-align:right",
                                    items: [
                                            {
                                             xtype: 'label',
                                             id: 'gtotal-text'
                                            },'-',
                                            {
                                             xtype: 'label',
                                             id: 'gtotal-text2'
                                            }
                                        ],
                                    layout: 'fit'
                                }),
                            renderTo:'fi-grid',
                            tbar: [
                                    {
                                        text: 'Refresh',
                                        iconCls: 'silk-table-refresh',
                                        handler: function(){
                                            Ext.MessageBox.confirm('Confirm', 'This action will remove all changes on grid, Refresh data now?',
                                                function(btn)
                                                {
                                                    if (btn == 'yes')
                                                    {
                                                        grid.getStore().removeAll();
                                                        grid.getStore().loadData(Ext.util.JSON.decode(jsonDataPosts));
                                                    }
                                                }
                                            );

                                        },
                                        scope: this
                                    }
                                   ],
                                   buttons: [
                                            {
                                                text: 'Submit Budget',
                                                iconCls: 'icon-save',
                                                handler: function(){
                                                    if (grid.getStore().getCount() == 0)
                                                        return false;
                                                    Ext.MessageBox.confirm('Confirm', 'This action will submit Overhead Project Budget, Proceed?',
                                                        function(btn)
                                                        {
                                                            if (btn == 'yes')
                                                            {
                                                                var json='';
                                                                grid.getStore().each(function(store){
                                                                    var encode = Ext.util.JSON.encode(store.data);
                                                                    if (encode != undefined)
                                                                        json += encode + ',';
                                                                });
                                                                json = '[' + json.substring(0, json.length - 1) + ']';

                                                                var desc = '"' + Ext.getCmp('ket').getValue() + '"';
                                                                var submitUrl = '';

                                                                params = {posts:json, ket:desc};

//                                                                Ext.Ajax.request({
//                                                                    url: '/humanresource/humanresource/cekbarang',
//                                                                    method:'POST',
//                                                                    success: function(result, request){
//
//                                                                    var returnData = Ext.util.JSON.decode(result.responseText);
//
//                                                                    if(returnData.success){

                                                                   submitData(params);

//                                                                    }
//                                                                    else{
//                                                                        Ext.Msg.alert('Error!', '<br>There are Item that does not Exist in <b>BOQ3</b>');
//                                                                        var wrong = returnData.wrong;
//                                                                        Ext.each(wrong,function(items,indeks){
//                                                                           var col = grid.getStore().queryBy(function(record,id){
//
//                                                                                 return  record.get('prj_kode') == items['prj_kode']  &&  record.get('sit_kode') == items['sit_kode']  && record.get('workid') == items['workid']  && record.get('kode_brg') == items['kode_brg'];
//
//                                                                            });
//                                                                            if (col.length > 0)
//                                                                            {
//                                                                                col.items[0].markDirty();
//                                                                            }
//                                                                        });
//                                                                        grid.getView().refresh();
//                                                                        return false;
//                                                                    }
//                                                                    }
//                                                                    ,failure:function( action){
//                                                                        if(action.failureType == 'server'){
//                                                                        obj = Ext.util.JSON.decode(action.response.responseText);
//                                                                        Ext.Msg.alert('Error!', obj.errors.reason);
//                                                                        }
//                                                                        },
//                                                                            params: params
//                                                                    });
                                                            }
                                                        }
                                                    );

                                                },
                                                scope: this
                                            },
                                            {
                                                text: 'Cancel',
                                                iconCls: 'icon-cancel',
                                                handler: function(){
                                                    Ext.getCmp('boq3-form').enable();
                                                    Ext.getCmp('boq3-grid').getStore().removeAll();
                                                    Ext.getCmp('boq3-grid').disable();
                                                }
                                            }
                                           ],
                            plugins: [editor,expander],
                            columns: [
                                      new Ext.grid.RowNumberer(),
                                        expander,
                                      {
                                          header: 'Project Code',
                                          dataIndex: 'prj_kode',
                                          width: 100,
                                          sortable: true,
                                          editor: {
                                              xtype: 'textfield',
                                              allowBlank: false
                                          }
                                      },
//                                      {
//                                          header: 'Project Name',
//                                          dataIndex: 'prj_nama',
//                                          width: 100,
//                                          sortable: true,
//                                          editor: {
//                                              xtype: 'textfield'
//
//                                          }
//                                      },
                                      {
                                          header: 'Site Code',
                                          dataIndex: 'sit_kode',
                                          width: 100,
                                          sortable: true,
                                          editor: {
                                              xtype: 'textfield',
                                              allowBlank: false
                                          }
                                      },
//                                      {
//                                          header: 'Site Name',
//                                          dataIndex: 'sit_nama',
//                                          width: 100,
//                                          sortable: true,
//                                          editor: {
//                                              xtype: 'textfield'
//
//                                          }
//                                      },
                                      {
                                          header: 'Workid',
                                          dataIndex: 'workid',
                                          width: 100,
                                          sortable: true,
                                          editor: {
                                              xtype: 'textfield',
                                              allowBlank: false
                                          }
                                      },
//                                      {
//                                          header: 'Workname',
//                                          dataIndex: 'workname',
//                                          width: 100,
//                                          sortable: true,
//                                          editor: {
//                                              xtype: 'textfield'
//
//                                          }
//                                      },
                                      {
                                          header: 'Product ID',
                                          dataIndex: 'kode_brg',
                                          width: 100,
                                          sortable: true,
                                          editor: {
                                              xtype: 'textfield',
                                              allowBlank: false
                                          }
                                      },
//                                      {
//                                          header: 'Product Name',
//                                          dataIndex: 'nama_brg',
//                                          width: 100,
//                                          sortable: true,
//                                          editor: {
//                                              xtype: 'textfield'
//
//                                          }
//                                      },
                                        {
                                          xtype: 'numbercolumn',
                                          header: 'Total',
                                          dataIndex: 'total',
                                          align: 'right',
                                          width: 100,
                                          renderer: function(v){
                                            return v ? Ext.util.Format.number(v, '0,0') : '';
                                            },
                                          sortable: true,
                                          editor: {
                                              xtype: 'numberfield',
                                              allowBlank: false,
                                              minValue: 0
                                          }
                                      }
                                       ]
                                  });


                    },
                    failure: function(fp, o){
                        msg('Error', 'File "'+o.result.file+'" cannot processed on the server! Please refresh (F5) Your browser or Try uploading again.');
                    }
                });
            }
        }
    },{
        text: 'Reset',
        handler: function(){
            fp.getForm().reset();
//            getExchangeRate();
        }
    }, {
        text: 'Cancel',
        handler: function(btn, ev){
        	myPanel = Ext.getCmp('abs-budget-panel');
    	    myPanel.body.load({
    	        url: '/projectmanagement/budget/showcreateboq3',
    	        scripts : true
            });
        },
        scope: this
    }]
});

//function getExchangeRate()
//{
//	Ext.Ajax.request({
//	    url: '/default/valuta/getexchangerate',
//	    method:'POST',
//	    success: function(result, request){
//		   		var returnData = Ext.util.JSON.decode(result.responseText);
//				if(returnData.success) {
//					Ext.getCmp('rateidr').setValue(returnData.rate);
//				}
//			}
//			,failure:function( action){
//		if(action.failureType == 'server'){
//	    obj = Ext.util.JSON.decode(action.response.responseText);
//	    Ext.Msg.alert('Error!', obj.errors.reason);
//		}
//		}
//	});
//}

</script>

<div id="fi-form"></div>
<br />
<div id="fi-grid"></div>